
MQTT_ESP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005764  08005764  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800576c  0800576c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000409c  20000010  08005784  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040ac  08005784  000240ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015101  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f0b  00000000  00000000  00035141  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f0  00000000  00000000  00038050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a0  00000000  00000000  00039240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003375  00000000  00000000  0003a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e541  00000000  00000000  0003d655  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7025  00000000  00000000  0004bb96  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122bbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f0  00000000  00000000  00122c38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800567c 	.word	0x0800567c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800567c 	.word	0x0800567c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	2000002c 	.word	0x2000002c
 8000540:	20000080 	.word	0x20000080

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b0a8      	sub	sp, #160	; 0xa0
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800054a:	f000 fc8f 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f8ad 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f971 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000556:	f000 f945 	bl	80007e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800055a:	f000 f919 	bl	8000790 <MX_USART1_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMessageQDef(uart1queue, 64, uint32_t);
 800055e:	4b45      	ldr	r3, [pc, #276]	; (8000674 <main+0x130>)
 8000560:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART1_Queue = osMessageCreate (osMessageQ(uart1queue), NULL);
 800056a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f002 fd5c 	bl	800302e <osMessageCreate>
 8000576:	4602      	mov	r2, r0
 8000578:	4b3f      	ldr	r3, [pc, #252]	; (8000678 <main+0x134>)
 800057a:	601a      	str	r2, [r3, #0]

  osMessageQDef(uart2queue, 64, uint32_t);
 800057c:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <main+0x130>)
 800057e:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART2_Queue = osMessageCreate (osMessageQ(uart2queue), NULL);
 8000588:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fd4d 	bl	800302e <osMessageCreate>
 8000594:	4602      	mov	r2, r0
 8000596:	4b39      	ldr	r3, [pc, #228]	; (800067c <main+0x138>)
 8000598:	601a      	str	r2, [r3, #0]

  osMailQDef(command_mail, 16, CommandMail_t);
 800059a:	2310      	movs	r3, #16
 800059c:	673b      	str	r3, [r7, #112]	; 0x70
 800059e:	230c      	movs	r3, #12
 80005a0:	677b      	str	r3, [r7, #116]	; 0x74
 80005a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005a6:	67bb      	str	r3, [r7, #120]	; 0x78
  command_mail = osMailCreate(osMailQ(command_mail), NULL);
 80005a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fe1a 	bl	80031e8 <osMailCreate>
 80005b4:	4602      	mov	r2, r0
 80005b6:	4b32      	ldr	r3, [pc, #200]	; (8000680 <main+0x13c>)
 80005b8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(UART1task, StartUART1task, osPriorityNormal, 0, 128);
 80005ba:	4b32      	ldr	r3, [pc, #200]	; (8000684 <main+0x140>)
 80005bc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART1_TaskHandler = osThreadCreate(osThread(UART1task), NULL);
 80005ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fbca 	bl	8002d6e <osThreadCreate>
 80005da:	4602      	mov	r2, r0
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <main+0x144>)
 80005de:	601a      	str	r2, [r3, #0]

  osThreadDef(UART2task, StartUART2task, osPriorityNormal, 0, 128);
 80005e0:	4b2a      	ldr	r3, [pc, #168]	; (800068c <main+0x148>)
 80005e2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART2_TaskHandler = osThreadCreate(osThread(UART2task), NULL);
 80005f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fbb7 	bl	8002d6e <osThreadCreate>
 8000600:	4602      	mov	r2, r0
 8000602:	4b23      	ldr	r3, [pc, #140]	; (8000690 <main+0x14c>)
 8000604:	601a      	str	r2, [r3, #0]

  osThreadDef(Commandtask, StartCommandtask, osPriorityNormal, 0, 128);
 8000606:	4b23      	ldr	r3, [pc, #140]	; (8000694 <main+0x150>)
 8000608:	f107 041c 	add.w	r4, r7, #28
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Command_TaskHandler = osThreadCreate(osThread(Commandtask), NULL);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fba4 	bl	8002d6e <osThreadCreate>
 8000626:	4602      	mov	r2, r0
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <main+0x154>)
 800062a:	601a      	str	r2, [r3, #0]

  osThreadDef(Defaulttask, StartDefaulttask, osPriorityNormal, 0, 128);
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <main+0x158>)
 800062e:	463c      	mov	r4, r7
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Default_TaskHandler = osThreadCreate(osThread(Defaulttask), NULL);
 800063e:	463b      	mov	r3, r7
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fb93 	bl	8002d6e <osThreadCreate>
 8000648:	4602      	mov	r2, r0
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <main+0x15c>)
 800064c:	601a      	str	r2, [r3, #0]

  /*
   * Starting TX and RX form UART1 and UART2
   */

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <main+0x160>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <main+0x160>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f042 0220 	orr.w	r2, r2, #32
 800065c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <main+0x164>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	68da      	ldr	r2, [r3, #12]
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <main+0x164>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f042 0220 	orr.w	r2, r2, #32
 800066c:	60da      	str	r2, [r3, #12]

  /* Start scheduler */
  osKernelStart();
 800066e:	f002 fb77 	bl	8002d60 <osKernelStart>
  //Ringbuf_init();




  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0x12e>
 8000674:	08005694 	.word	0x08005694
 8000678:	20004064 	.word	0x20004064
 800067c:	20004060 	.word	0x20004060
 8000680:	20003fd4 	.word	0x20003fd4
 8000684:	080056b0 	.word	0x080056b0
 8000688:	20003fd0 	.word	0x20003fd0
 800068c:	080056d8 	.word	0x080056d8
 8000690:	20003fcc 	.word	0x20003fcc
 8000694:	08005700 	.word	0x08005700
 8000698:	2000405c 	.word	0x2000405c
 800069c:	08005728 	.word	0x08005728
 80006a0:	20004018 	.word	0x20004018
 80006a4:	2000401c 	.word	0x2000401c
 80006a8:	20003fd8 	.word	0x20003fd8

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2234      	movs	r2, #52	; 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 ffd5 	bl	800566a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <SystemClock_Config+0xdc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a2b      	ldr	r2, [pc, #172]	; (8000788 <SystemClock_Config+0xdc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b29      	ldr	r3, [pc, #164]	; (8000788 <SystemClock_Config+0xdc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemClock_Config+0xe0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a25      	ldr	r2, [pc, #148]	; (800078c <SystemClock_Config+0xe0>)
 80006f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0xe0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000720:	23b4      	movs	r3, #180	; 0xb4
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f9a5 	bl	8001a84 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000740:	f000 f8fc 	bl	800093c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000744:	f000 fe62 	bl	800140c <HAL_PWREx_EnableOverDrive>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800074e:	f000 f8f5 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2105      	movs	r1, #5
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fe9b 	bl	80014ac <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800077c:	f000 f8de 	bl	800093c <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_USART1_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007c8:	f001 fdf4 	bl	80023b4 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f8b3 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20003fd8 	.word	0x20003fd8
 80007e0:	40011000 	.word	0x40011000

080007e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART2_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800081c:	f001 fdca 	bl	80023b4 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f889 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000401c 	.word	0x2000401c
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a2c      	ldr	r2, [pc, #176]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a25      	ldr	r2, [pc, #148]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <MX_GPIO_Init+0xd0>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2120      	movs	r1, #32
 80008c2:	4812      	ldr	r0, [pc, #72]	; (800090c <MX_GPIO_Init+0xd4>)
 80008c4:	f000 fd88 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_GPIO_Init+0xd8>)
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_GPIO_Init+0xdc>)
 80008de:	f000 fbe9 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008e2:	2320      	movs	r3, #32
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0xd4>)
 80008fa:	f000 fbdb 	bl	80010b4 <HAL_GPIO_Init>

}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000
 8000910:	10210000 	.word	0x10210000
 8000914:	40020800 	.word	0x40020800

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 fac1 	bl	8000eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40001000 	.word	0x40001000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <StartDefaulttask>:


const char *c = "AT";

void StartDefaulttask(void const * argument)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]

	while(1)
	{

		osDelay(100);
 8000952:	2064      	movs	r0, #100	; 0x64
 8000954:	f002 fa57 	bl	8002e06 <osDelay>
 8000958:	e7fb      	b.n	8000952 <StartDefaulttask+0x8>
	...

0800095c <StartUART1task>:
	}
}

void StartUART1task(void const * argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b098      	sub	sp, #96	; 0x60
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	osEvent event;
	CommandMail_t *mptr;

	mptr = osMailCAlloc(command_mail, 10);
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <StartUART1task+0xac>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	210a      	movs	r1, #10
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fca9 	bl	80032c2 <osMailCAlloc>
 8000970:	6578      	str	r0, [r7, #84]	; 0x54
	mptr->size = 0;
 8000972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]

	uint32_t temp = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t buffer_size = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	65bb      	str	r3, [r7, #88]	; 0x58
	uint8_t buffer[64] = {0};
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	2240      	movs	r2, #64	; 0x40
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fe6e 	bl	800566a <memset>


	while(1)
	{
		event = osMessageGet(UART1_Queue, osWaitForever);
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <StartUART1task+0xb0>)
 8000990:	6819      	ldr	r1, [r3, #0]
 8000992:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fbb0 	bl	8003100 <osMessageGet>
		if(event.status == osEventMessage)
 80009a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009a2:	2b10      	cmp	r3, #16
 80009a4:	d101      	bne.n	80009aa <StartUART1task+0x4e>
		{
			temp = event.value.v;
 80009a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009a8:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (temp == '\n')
 80009aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009ac:	2b0a      	cmp	r3, #10
 80009ae:	d11f      	bne.n	80009f0 <StartUART1task+0x94>
		{
			buffer[buffer_size] = temp;
 80009b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009b2:	b2d9      	uxtb	r1, r3
 80009b4:	f107 0208 	add.w	r2, r7, #8
 80009b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009ba:	4413      	add	r3, r2
 80009bc:	460a      	mov	r2, r1
 80009be:	701a      	strb	r2, [r3, #0]
			buffer_size++;
 80009c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009c2:	3301      	adds	r3, #1
 80009c4:	65bb      	str	r3, [r7, #88]	; 0x58
			mptr->Direction = 1;
 80009c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009c8:	2201      	movs	r2, #1
 80009ca:	711a      	strb	r2, [r3, #4]
			mptr->senderID = 0x01;
 80009cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009ce:	2201      	movs	r2, #1
 80009d0:	715a      	strb	r2, [r3, #5]
			mptr->size = buffer_size + 1;
 80009d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009d8:	609a      	str	r2, [r3, #8]
			mptr->commandstring = buffer;
 80009da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009dc:	f107 0208 	add.w	r2, r7, #8
 80009e0:	601a      	str	r2, [r3, #0]
			osMailPut(command_mail, mptr);
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <StartUART1task+0xac>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 fc8d 	bl	8003308 <osMailPut>
 80009ee:	e7ce      	b.n	800098e <StartUART1task+0x32>
		}
		else
		{
			buffer[buffer_size] = temp;
 80009f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009f2:	b2d9      	uxtb	r1, r3
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009fa:	4413      	add	r3, r2
 80009fc:	460a      	mov	r2, r1
 80009fe:	701a      	strb	r2, [r3, #0]
			buffer_size++;
 8000a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a02:	3301      	adds	r3, #1
 8000a04:	65bb      	str	r3, [r7, #88]	; 0x58
		event = osMessageGet(UART1_Queue, osWaitForever);
 8000a06:	e7c2      	b.n	800098e <StartUART1task+0x32>
 8000a08:	20003fd4 	.word	0x20003fd4
 8000a0c:	20004064 	.word	0x20004064

08000a10 <StartUART2task>:

}


void StartUART2task(void const * argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	osEvent event;
	uint8_t Buffer;
	while(1)
	{
		event = osMessageGet(UART2_Queue, osWaitForever);
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <StartUART2task+0x38>)
 8000a1a:	6819      	ldr	r1, [r3, #0]
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fb6b 	bl	8003100 <osMessageGet>
		if(event.status == osEventMessage)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b10      	cmp	r3, #16
 8000a2e:	d102      	bne.n	8000a36 <StartUART2task+0x26>
		{
			Buffer = event.value.v;
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	72fb      	strb	r3, [r7, #11]
		}
		HAL_UART_Transmit(&huart2,&Buffer, sizeof(Buffer), 100);
 8000a36:	f107 010b 	add.w	r1, r7, #11
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <StartUART2task+0x3c>)
 8000a40:	f001 fd05 	bl	800244e <HAL_UART_Transmit>
		event = osMessageGet(UART2_Queue, osWaitForever);
 8000a44:	e7e8      	b.n	8000a18 <StartUART2task+0x8>
 8000a46:	bf00      	nop
 8000a48:	20004060 	.word	0x20004060
 8000a4c:	2000401c 	.word	0x2000401c

08000a50 <StartCommandtask>:

}


void StartCommandtask(void const * argument)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	osEvent event;
	CommandMail_t *rptr;

	while(1)
	{
		event = osMailGet(command_mail, osWaitForever);        // wait for mail
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <StartCommandtask+0x44>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fc8d 	bl	8003384 <osMailGet>
	    if (event.status == osEventMail)
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b20      	cmp	r3, #32
 8000a6e:	d1f3      	bne.n	8000a58 <StartCommandtask+0x8>
	    {
	    	rptr = event.value.p;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	617b      	str	r3, [r7, #20]
	    	HAL_UART_Transmit(&huart1,rptr->commandstring, rptr->size, 100);
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	6819      	ldr	r1, [r3, #0]
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	2364      	movs	r3, #100	; 0x64
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <StartCommandtask+0x48>)
 8000a82:	f001 fce4 	bl	800244e <HAL_UART_Transmit>
			osMailFree(command_mail, rptr);
 8000a86:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <StartCommandtask+0x44>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6979      	ldr	r1, [r7, #20]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 fced 	bl	800346c <osMailFree>
		event = osMailGet(command_mail, osWaitForever);        // wait for mail
 8000a92:	e7e1      	b.n	8000a58 <StartCommandtask+0x8>
 8000a94:	20003fd4 	.word	0x20003fd4
 8000a98:	20003fd8 	.word	0x20003fd8

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_MspInit+0x54>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <HAL_MspInit+0x54>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x54>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_MspInit+0x54>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_MspInit+0x54>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_MspInit+0x54>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	210f      	movs	r1, #15
 8000ade:	f06f 0001 	mvn.w	r0, #1
 8000ae2:	f000 fabd 	bl	8001060 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a3a      	ldr	r2, [pc, #232]	; (8000bfc <HAL_UART_MspInit+0x108>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d135      	bne.n	8000b82 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a31      	ldr	r2, [pc, #196]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b60:	2307      	movs	r3, #7
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4826      	ldr	r0, [pc, #152]	; (8000c04 <HAL_UART_MspInit+0x110>)
 8000b6c:	f000 faa2 	bl	80010b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2105      	movs	r1, #5
 8000b74:	2025      	movs	r0, #37	; 0x25
 8000b76:	f000 fa73 	bl	8001060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b7a:	2025      	movs	r0, #37	; 0x25
 8000b7c:	f000 fa8c 	bl	8001098 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b80:	e038      	b.n	8000bf4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a20      	ldr	r2, [pc, #128]	; (8000c08 <HAL_UART_MspInit+0x114>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d133      	bne.n	8000bf4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_UART_MspInit+0x10c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4809      	ldr	r0, [pc, #36]	; (8000c04 <HAL_UART_MspInit+0x110>)
 8000be0:	f000 fa68 	bl	80010b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2105      	movs	r1, #5
 8000be8:	2026      	movs	r0, #38	; 0x26
 8000bea:	f000 fa39 	bl	8001060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bee:	2026      	movs	r0, #38	; 0x26
 8000bf0:	f000 fa52 	bl	8001098 <HAL_NVIC_EnableIRQ>
}
 8000bf4:	bf00      	nop
 8000bf6:	3730      	adds	r7, #48	; 0x30
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40011000 	.word	0x40011000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40004400 	.word	0x40004400

08000c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2036      	movs	r0, #54	; 0x36
 8000c22:	f000 fa1d 	bl	8001060 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000c26:	2036      	movs	r0, #54	; 0x36
 8000c28:	f000 fa36 	bl	8001098 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <HAL_InitTick+0xa4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_InitTick+0xa4>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_InitTick+0xa4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c48:	f107 0210 	add.w	r2, r7, #16
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fd44 	bl	80016e0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c58:	f000 fd1a 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <HAL_InitTick+0xa8>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	0c9b      	lsrs	r3, r3, #18
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <HAL_InitTick+0xb0>)
 8000c74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c92:	f001 f951 	bl	8001f38 <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d104      	bne.n	8000ca6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c9e:	f001 f980 	bl	8001fa2 <HAL_TIM_Base_Start_IT>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3730      	adds	r7, #48	; 0x30
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	20004068 	.word	0x20004068
 8000cbc:	40001000 	.word	0x40001000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(device_uart);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <USART1_IRQHandler+0x10>)
 8000cfa:	f000 f819 	bl	8000d30 <Uart_isr>
	return;
 8000cfe:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20003fd8 	.word	0x20003fd8

08000d08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	//Uart_isr(&huart2);
	Uart_isr(pc_uart);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <USART2_IRQHandler+0x10>)
 8000d0e:	f000 f80f 	bl	8000d30 <Uart_isr>
	return;
 8000d12:	bf00      	nop
	HAL_UART_IRQHandler(&huart2);

  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000401c 	.word	0x2000401c

08000d1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <TIM6_DAC_IRQHandler+0x10>)
 8000d22:	f001 f962 	bl	8001fea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20004068 	.word	0x20004068

08000d30 <Uart_isr>:

/* USER CODE BEGIN 1 */

void Uart_isr (UART_HandleTypeDef *huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f003 0320 	and.w	r3, r3, #32
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d02d      	beq.n	8000dae <Uart_isr+0x7e>
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d028      	beq.n	8000dae <Uart_isr+0x7e>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <Uart_isr+0xac>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d10c      	bne.n	8000d8c <Uart_isr+0x5c>
        {
        	if(osMessagePut (UART2_Queue, c, 10) != osOK)
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <Uart_isr+0xb0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	7bf9      	ldrb	r1, [r7, #15]
 8000d78:	220a      	movs	r2, #10
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 f980 	bl	8003080 <osMessagePut>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d026      	beq.n	8000dd4 <Uart_isr+0xa4>
			{
			  Error_Handler();
 8000d86:	f7ff fdd9 	bl	800093c <Error_Handler>
			{
			  Error_Handler();
			}
        }

        return;
 8000d8a:	e023      	b.n	8000dd4 <Uart_isr+0xa4>
        else if (huart == pc_uart)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <Uart_isr+0xb4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d11f      	bne.n	8000dd4 <Uart_isr+0xa4>
           	if(osMessagePut (UART1_Queue, c, 10) != osOK)
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <Uart_isr+0xb8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	7bf9      	ldrb	r1, [r7, #15]
 8000d9a:	220a      	movs	r2, #10
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 f96f 	bl	8003080 <osMessagePut>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d015      	beq.n	8000dd4 <Uart_isr+0xa4>
			  Error_Handler();
 8000da8:	f7ff fdc8 	bl	800093c <Error_Handler>
        return;
 8000dac:	e012      	b.n	8000dd4 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00e      	beq.n	8000dd6 <Uart_isr+0xa6>
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d009      	beq.n	8000dd6 <Uart_isr+0xa6>
    {
    	__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	e000      	b.n	8000dd6 <Uart_isr+0xa6>
        return;
 8000dd4:	bf00      	nop
        	    }
        	}
    	return;
#endif
    }
}
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20003fd8 	.word	0x20003fd8
 8000de0:	20004060 	.word	0x20004060
 8000de4:	2000401c 	.word	0x2000401c
 8000de8:	20004064 	.word	0x20004064

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <SystemInit+0x28>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <SystemInit+0x28>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SystemInit+0x28>)
 8000e02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e06:	609a      	str	r2, [r3, #8]
#endif
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e1e:	e003      	b.n	8000e28 <LoopCopyDataInit>

08000e20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e26:	3104      	adds	r1, #4

08000e28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e30:	d3f6      	bcc.n	8000e20 <CopyDataInit>
  ldr  r2, =_sbss
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e34:	e002      	b.n	8000e3c <LoopFillZerobss>

08000e36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e38:	f842 3b04 	str.w	r3, [r2], #4

08000e3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e40:	d3f9      	bcc.n	8000e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e42:	f7ff ffd3 	bl	8000dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f004 fbe1 	bl	800560c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fb7b 	bl	8000544 <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e54:	08005774 	.word	0x08005774
  ldr  r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e5c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000e60:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000e64:	200040ac 	.word	0x200040ac

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f8d8 	bl	800104a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff feb6 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fdfc 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	200040a8 	.word	0x200040a8

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200040a8 	.word	0x200040a8

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff4c 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001072:	f7ff ff61 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 8001076:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	68b9      	ldr	r1, [r7, #8]
 800107c:	6978      	ldr	r0, [r7, #20]
 800107e:	f7ff ffb1 	bl	8000fe4 <NVIC_EncodePriority>
 8001082:	4602      	mov	r2, r0
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff80 	bl	8000f90 <__NVIC_SetPriority>
}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff54 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e165      	b.n	800139c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 8154 	bne.w	8001396 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d00b      	beq.n	800110e <HAL_GPIO_Init+0x5a>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001102:	2b11      	cmp	r3, #17
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b12      	cmp	r3, #18
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0xfc>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b12      	cmp	r3, #18
 80011ae:	d123      	bne.n	80011f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	69b9      	ldr	r1, [r7, #24]
 80011f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0203 	and.w	r2, r3, #3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80ae 	beq.w	8001396 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b5c      	ldr	r3, [pc, #368]	; (80013b0 <HAL_GPIO_Init+0x2fc>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <HAL_GPIO_Init+0x2fc>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b59      	ldr	r3, [pc, #356]	; (80013b0 <HAL_GPIO_Init+0x2fc>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001256:	4a57      	ldr	r2, [pc, #348]	; (80013b4 <HAL_GPIO_Init+0x300>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4e      	ldr	r2, [pc, #312]	; (80013b8 <HAL_GPIO_Init+0x304>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d025      	beq.n	80012ce <HAL_GPIO_Init+0x21a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4d      	ldr	r2, [pc, #308]	; (80013bc <HAL_GPIO_Init+0x308>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01f      	beq.n	80012ca <HAL_GPIO_Init+0x216>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x212>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <HAL_GPIO_Init+0x310>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x20e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4a      	ldr	r2, [pc, #296]	; (80013c8 <HAL_GPIO_Init+0x314>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x20a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a49      	ldr	r2, [pc, #292]	; (80013cc <HAL_GPIO_Init+0x318>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x206>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a48      	ldr	r2, [pc, #288]	; (80013d0 <HAL_GPIO_Init+0x31c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x202>
 80012b2:	2306      	movs	r3, #6
 80012b4:	e00c      	b.n	80012d0 <HAL_GPIO_Init+0x21c>
 80012b6:	2307      	movs	r3, #7
 80012b8:	e00a      	b.n	80012d0 <HAL_GPIO_Init+0x21c>
 80012ba:	2305      	movs	r3, #5
 80012bc:	e008      	b.n	80012d0 <HAL_GPIO_Init+0x21c>
 80012be:	2304      	movs	r3, #4
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x21c>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e004      	b.n	80012d0 <HAL_GPIO_Init+0x21c>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_Init+0x21c>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_GPIO_Init+0x21c>
 80012ce:	2300      	movs	r3, #0
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	f002 0203 	and.w	r2, r2, #3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4093      	lsls	r3, r2
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e0:	4934      	ldr	r1, [pc, #208]	; (80013b4 <HAL_GPIO_Init+0x300>)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ee:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <HAL_GPIO_Init+0x320>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001312:	4a30      	ldr	r2, [pc, #192]	; (80013d4 <HAL_GPIO_Init+0x320>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001318:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <HAL_GPIO_Init+0x320>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133c:	4a25      	ldr	r2, [pc, #148]	; (80013d4 <HAL_GPIO_Init+0x320>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_GPIO_Init+0x320>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_GPIO_Init+0x320>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_GPIO_Init+0x320>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <HAL_GPIO_Init+0x320>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3301      	adds	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	f67f ae96 	bls.w	80010d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a4:	bf00      	nop
 80013a6:	3724      	adds	r7, #36	; 0x24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40021400 	.word	0x40021400
 80013d0:	40021800 	.word	0x40021800
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f4:	e003      	b.n	80013fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_PWREx_EnableOverDrive+0x90>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_PWREx_EnableOverDrive+0x90>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <HAL_PWREx_EnableOverDrive+0x90>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001438:	f7ff fd4e 	bl	8000ed8 <HAL_GetTick>
 800143c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800143e:	e009      	b.n	8001454 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001440:	f7ff fd4a 	bl	8000ed8 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800144e:	d901      	bls.n	8001454 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e01f      	b.n	8001494 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001460:	d1ee      	bne.n	8001440 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001468:	f7ff fd36 	bl	8000ed8 <HAL_GetTick>
 800146c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800146e:	e009      	b.n	8001484 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001470:	f7ff fd32 	bl	8000ed8 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800147e:	d901      	bls.n	8001484 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e007      	b.n	8001494 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001490:	d1ee      	bne.n	8001470 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	420e0040 	.word	0x420e0040
 80014a4:	40007000 	.word	0x40007000
 80014a8:	420e0044 	.word	0x420e0044

080014ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0cc      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c0:	4b68      	ldr	r3, [pc, #416]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d90c      	bls.n	80014e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	4b65      	ldr	r3, [pc, #404]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b63      	ldr	r3, [pc, #396]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0b8      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4a58      	ldr	r2, [pc, #352]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800150a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001524:	4b50      	ldr	r3, [pc, #320]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	494d      	ldr	r1, [pc, #308]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d044      	beq.n	80015cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d119      	bne.n	800158a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e07f      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d003      	beq.n	800156a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001566:	2b03      	cmp	r3, #3
 8001568:	d107      	bne.n	800157a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156a:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d109      	bne.n	800158a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e06f      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e067      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f023 0203 	bic.w	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4934      	ldr	r1, [pc, #208]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	4313      	orrs	r3, r2
 800159a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800159c:	f7ff fc9c 	bl	8000ed8 <HAL_GetTick>
 80015a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a4:	f7ff fc98 	bl	8000ed8 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e04f      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 020c 	and.w	r2, r3, #12
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d1eb      	bne.n	80015a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015cc:	4b25      	ldr	r3, [pc, #148]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d20c      	bcs.n	80015f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e032      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4916      	ldr	r1, [pc, #88]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	490e      	ldr	r1, [pc, #56]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001632:	f000 f887 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 8001636:	4601      	mov	r1, r0
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	5cd3      	ldrb	r3, [r2, r3]
 8001646:	fa21 f303 	lsr.w	r3, r1, r3
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_RCC_ClockConfig+0x1c8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fada 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023c00 	.word	0x40023c00
 8001668:	40023800 	.word	0x40023800
 800166c:	0800574c 	.word	0x0800574c
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <HAL_RCC_GetHCLKFreq+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000

08001690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001694:	f7ff fff0 	bl	8001678 <HAL_RCC_GetHCLKFreq>
 8001698:	4601      	mov	r1, r0
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	0a9b      	lsrs	r3, r3, #10
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	0800575c 	.word	0x0800575c

080016b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016bc:	f7ff ffdc 	bl	8001678 <HAL_RCC_GetHCLKFreq>
 80016c0:	4601      	mov	r1, r0
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	0b5b      	lsrs	r3, r3, #13
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	0800575c 	.word	0x0800575c

080016e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	220f      	movs	r2, #15
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_RCC_GetClockConfig+0x5c>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0203 	and.w	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_RCC_GetClockConfig+0x5c>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_RCC_GetClockConfig+0x5c>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_GetClockConfig+0x5c>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_RCC_GetClockConfig+0x60>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 020f 	and.w	r2, r3, #15
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	601a      	str	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40023c00 	.word	0x40023c00

08001744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800175e:	4bc6      	ldr	r3, [pc, #792]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x334>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b0c      	cmp	r3, #12
 8001768:	f200 817e 	bhi.w	8001a68 <HAL_RCC_GetSysClockFreq+0x324>
 800176c:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <HAL_RCC_GetSysClockFreq+0x30>)
 800176e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001772:	bf00      	nop
 8001774:	080017a9 	.word	0x080017a9
 8001778:	08001a69 	.word	0x08001a69
 800177c:	08001a69 	.word	0x08001a69
 8001780:	08001a69 	.word	0x08001a69
 8001784:	080017af 	.word	0x080017af
 8001788:	08001a69 	.word	0x08001a69
 800178c:	08001a69 	.word	0x08001a69
 8001790:	08001a69 	.word	0x08001a69
 8001794:	080017b5 	.word	0x080017b5
 8001798:	08001a69 	.word	0x08001a69
 800179c:	08001a69 	.word	0x08001a69
 80017a0:	08001a69 	.word	0x08001a69
 80017a4:	08001911 	.word	0x08001911
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a8:	4bb4      	ldr	r3, [pc, #720]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x338>)
 80017aa:	613b      	str	r3, [r7, #16]
       break;
 80017ac:	e15f      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ae:	4bb4      	ldr	r3, [pc, #720]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x33c>)
 80017b0:	613b      	str	r3, [r7, #16]
      break;
 80017b2:	e15c      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b4:	4bb0      	ldr	r3, [pc, #704]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x334>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017bc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017be:	4bae      	ldr	r3, [pc, #696]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x334>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d04a      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ca:	4bab      	ldr	r3, [pc, #684]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x334>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	099b      	lsrs	r3, r3, #6
 80017d0:	f04f 0400 	mov.w	r4, #0
 80017d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	ea03 0501 	and.w	r5, r3, r1
 80017e0:	ea04 0602 	and.w	r6, r4, r2
 80017e4:	4629      	mov	r1, r5
 80017e6:	4632      	mov	r2, r6
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	f04f 0400 	mov.w	r4, #0
 80017f0:	0154      	lsls	r4, r2, #5
 80017f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017f6:	014b      	lsls	r3, r1, #5
 80017f8:	4619      	mov	r1, r3
 80017fa:	4622      	mov	r2, r4
 80017fc:	1b49      	subs	r1, r1, r5
 80017fe:	eb62 0206 	sbc.w	r2, r2, r6
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	f04f 0400 	mov.w	r4, #0
 800180a:	0194      	lsls	r4, r2, #6
 800180c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001810:	018b      	lsls	r3, r1, #6
 8001812:	1a5b      	subs	r3, r3, r1
 8001814:	eb64 0402 	sbc.w	r4, r4, r2
 8001818:	f04f 0100 	mov.w	r1, #0
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	00e2      	lsls	r2, r4, #3
 8001822:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001826:	00d9      	lsls	r1, r3, #3
 8001828:	460b      	mov	r3, r1
 800182a:	4614      	mov	r4, r2
 800182c:	195b      	adds	r3, r3, r5
 800182e:	eb44 0406 	adc.w	r4, r4, r6
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	0262      	lsls	r2, r4, #9
 800183c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001840:	0259      	lsls	r1, r3, #9
 8001842:	460b      	mov	r3, r1
 8001844:	4614      	mov	r4, r2
 8001846:	4618      	mov	r0, r3
 8001848:	4621      	mov	r1, r4
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f04f 0400 	mov.w	r4, #0
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	f7fe fcdc 	bl	8000210 <__aeabi_uldivmod>
 8001858:	4603      	mov	r3, r0
 800185a:	460c      	mov	r4, r1
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e049      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001860:	4b85      	ldr	r3, [pc, #532]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x334>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	f04f 0400 	mov.w	r4, #0
 800186a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	ea03 0501 	and.w	r5, r3, r1
 8001876:	ea04 0602 	and.w	r6, r4, r2
 800187a:	4629      	mov	r1, r5
 800187c:	4632      	mov	r2, r6
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	f04f 0400 	mov.w	r4, #0
 8001886:	0154      	lsls	r4, r2, #5
 8001888:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800188c:	014b      	lsls	r3, r1, #5
 800188e:	4619      	mov	r1, r3
 8001890:	4622      	mov	r2, r4
 8001892:	1b49      	subs	r1, r1, r5
 8001894:	eb62 0206 	sbc.w	r2, r2, r6
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	f04f 0400 	mov.w	r4, #0
 80018a0:	0194      	lsls	r4, r2, #6
 80018a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018a6:	018b      	lsls	r3, r1, #6
 80018a8:	1a5b      	subs	r3, r3, r1
 80018aa:	eb64 0402 	sbc.w	r4, r4, r2
 80018ae:	f04f 0100 	mov.w	r1, #0
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	00e2      	lsls	r2, r4, #3
 80018b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018bc:	00d9      	lsls	r1, r3, #3
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	195b      	adds	r3, r3, r5
 80018c4:	eb44 0406 	adc.w	r4, r4, r6
 80018c8:	f04f 0100 	mov.w	r1, #0
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	02a2      	lsls	r2, r4, #10
 80018d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018d6:	0299      	lsls	r1, r3, #10
 80018d8:	460b      	mov	r3, r1
 80018da:	4614      	mov	r4, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	4621      	mov	r1, r4
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f04f 0400 	mov.w	r4, #0
 80018e6:	461a      	mov	r2, r3
 80018e8:	4623      	mov	r3, r4
 80018ea:	f7fe fc91 	bl	8000210 <__aeabi_uldivmod>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018f4:	4b60      	ldr	r3, [pc, #384]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x334>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	613b      	str	r3, [r7, #16]
      break;
 800190e:	e0ae      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x334>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001918:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800191a:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x334>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d04a      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001926:	4b54      	ldr	r3, [pc, #336]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x334>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	099b      	lsrs	r3, r3, #6
 800192c:	f04f 0400 	mov.w	r4, #0
 8001930:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	ea03 0501 	and.w	r5, r3, r1
 800193c:	ea04 0602 	and.w	r6, r4, r2
 8001940:	4629      	mov	r1, r5
 8001942:	4632      	mov	r2, r6
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	f04f 0400 	mov.w	r4, #0
 800194c:	0154      	lsls	r4, r2, #5
 800194e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001952:	014b      	lsls	r3, r1, #5
 8001954:	4619      	mov	r1, r3
 8001956:	4622      	mov	r2, r4
 8001958:	1b49      	subs	r1, r1, r5
 800195a:	eb62 0206 	sbc.w	r2, r2, r6
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	f04f 0400 	mov.w	r4, #0
 8001966:	0194      	lsls	r4, r2, #6
 8001968:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800196c:	018b      	lsls	r3, r1, #6
 800196e:	1a5b      	subs	r3, r3, r1
 8001970:	eb64 0402 	sbc.w	r4, r4, r2
 8001974:	f04f 0100 	mov.w	r1, #0
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	00e2      	lsls	r2, r4, #3
 800197e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001982:	00d9      	lsls	r1, r3, #3
 8001984:	460b      	mov	r3, r1
 8001986:	4614      	mov	r4, r2
 8001988:	195b      	adds	r3, r3, r5
 800198a:	eb44 0406 	adc.w	r4, r4, r6
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	0262      	lsls	r2, r4, #9
 8001998:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800199c:	0259      	lsls	r1, r3, #9
 800199e:	460b      	mov	r3, r1
 80019a0:	4614      	mov	r4, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	4621      	mov	r1, r4
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f04f 0400 	mov.w	r4, #0
 80019ac:	461a      	mov	r2, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	f7fe fc2e 	bl	8000210 <__aeabi_uldivmod>
 80019b4:	4603      	mov	r3, r0
 80019b6:	460c      	mov	r4, r1
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e049      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x334>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	f04f 0400 	mov.w	r4, #0
 80019c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	ea03 0501 	and.w	r5, r3, r1
 80019d2:	ea04 0602 	and.w	r6, r4, r2
 80019d6:	4629      	mov	r1, r5
 80019d8:	4632      	mov	r2, r6
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	f04f 0400 	mov.w	r4, #0
 80019e2:	0154      	lsls	r4, r2, #5
 80019e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019e8:	014b      	lsls	r3, r1, #5
 80019ea:	4619      	mov	r1, r3
 80019ec:	4622      	mov	r2, r4
 80019ee:	1b49      	subs	r1, r1, r5
 80019f0:	eb62 0206 	sbc.w	r2, r2, r6
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	f04f 0400 	mov.w	r4, #0
 80019fc:	0194      	lsls	r4, r2, #6
 80019fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a02:	018b      	lsls	r3, r1, #6
 8001a04:	1a5b      	subs	r3, r3, r1
 8001a06:	eb64 0402 	sbc.w	r4, r4, r2
 8001a0a:	f04f 0100 	mov.w	r1, #0
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	00e2      	lsls	r2, r4, #3
 8001a14:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a18:	00d9      	lsls	r1, r3, #3
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4614      	mov	r4, r2
 8001a1e:	195b      	adds	r3, r3, r5
 8001a20:	eb44 0406 	adc.w	r4, r4, r6
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	02a2      	lsls	r2, r4, #10
 8001a2e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a32:	0299      	lsls	r1, r3, #10
 8001a34:	460b      	mov	r3, r1
 8001a36:	4614      	mov	r4, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f04f 0400 	mov.w	r4, #0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4623      	mov	r3, r4
 8001a46:	f7fe fbe3 	bl	8000210 <__aeabi_uldivmod>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	0f1b      	lsrs	r3, r3, #28
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	613b      	str	r3, [r7, #16]
      break;
 8001a66:	e002      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x338>)
 8001a6a:	613b      	str	r3, [r7, #16]
      break;
 8001a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6e:	693b      	ldr	r3, [r7, #16]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	00f42400 	.word	0x00f42400
 8001a80:	007a1200 	.word	0x007a1200

08001a84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8083 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a9e:	4b95      	ldr	r3, [pc, #596]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d019      	beq.n	8001ade <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aaa:	4b92      	ldr	r3, [pc, #584]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d106      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ab6:	4b8f      	ldr	r3, [pc, #572]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac2:	d00c      	beq.n	8001ade <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac4:	4b8b      	ldr	r3, [pc, #556]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	d112      	bne.n	8001af6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad0:	4b88      	ldr	r3, [pc, #544]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001adc:	d10b      	bne.n	8001af6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	4b85      	ldr	r3, [pc, #532]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d05b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x11e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d157      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e216      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x8a>
 8001b00:	4b7c      	ldr	r3, [pc, #496]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a7b      	ldr	r2, [pc, #492]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e01d      	b.n	8001b4a <HAL_RCC_OscConfig+0xc6>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_OscConfig+0xae>
 8001b18:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a75      	ldr	r2, [pc, #468]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a72      	ldr	r2, [pc, #456]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e00b      	b.n	8001b4a <HAL_RCC_OscConfig+0xc6>
 8001b32:	4b70      	ldr	r3, [pc, #448]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6f      	ldr	r2, [pc, #444]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b6d      	ldr	r3, [pc, #436]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6c      	ldr	r2, [pc, #432]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d013      	beq.n	8001b7a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff f9c1 	bl	8000ed8 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5a:	f7ff f9bd 	bl	8000ed8 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b64      	cmp	r3, #100	; 0x64
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1db      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6c:	4b61      	ldr	r3, [pc, #388]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0xd6>
 8001b78:	e014      	b.n	8001ba4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f9ad 	bl	8000ed8 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b82:	f7ff f9a9 	bl	8000ed8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b64      	cmp	r3, #100	; 0x64
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1c7      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b94:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0xfe>
 8001ba0:	e000      	b.n	8001ba4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d06f      	beq.n	8001c90 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bb0:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d017      	beq.n	8001bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bc8:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00b      	beq.n	8001bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd4:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d11c      	bne.n	8001c1a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be0:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d116      	bne.n	8001c1a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bec:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_OscConfig+0x180>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e18f      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4938      	ldr	r1, [pc, #224]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c18:	e03a      	b.n	8001c90 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d020      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c22:	4b35      	ldr	r3, [pc, #212]	; (8001cf8 <HAL_RCC_OscConfig+0x274>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff f956 	bl	8000ed8 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c30:	f7ff f952 	bl	8000ed8 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e170      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4925      	ldr	r1, [pc, #148]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
 8001c62:	e015      	b.n	8001c90 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <HAL_RCC_OscConfig+0x274>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff f935 	bl	8000ed8 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c72:	f7ff f931 	bl	8000ed8 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e14f      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d037      	beq.n	8001d0c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d016      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_RCC_OscConfig+0x278>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff f915 	bl	8000ed8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb2:	f7ff f911 	bl	8000ed8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e12f      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x22e>
 8001cd0:	e01c      	b.n	8001d0c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_RCC_OscConfig+0x278>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f8fe 	bl	8000ed8 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cde:	e00f      	b.n	8001d00 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff f8fa 	bl	8000ed8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d908      	bls.n	8001d00 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e118      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	42470000 	.word	0x42470000
 8001cfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	4b8a      	ldr	r3, [pc, #552]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1e9      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8097 	beq.w	8001e48 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1e:	4b83      	ldr	r3, [pc, #524]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10f      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a7e      	ldr	r2, [pc, #504]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b7c      	ldr	r3, [pc, #496]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	4b79      	ldr	r3, [pc, #484]	; (8001f30 <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d118      	bne.n	8001d88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x4ac>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a75      	ldr	r2, [pc, #468]	; (8001f30 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d62:	f7ff f8b9 	bl	8000ed8 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6a:	f7ff f8b5 	bl	8000ed8 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0d3      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7c:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <HAL_RCC_OscConfig+0x4ac>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x31a>
 8001d90:	4b66      	ldr	r3, [pc, #408]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	4a65      	ldr	r2, [pc, #404]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9c:	e01c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x354>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x33c>
 8001da6:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	4a60      	ldr	r2, [pc, #384]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	6713      	str	r3, [r2, #112]	; 0x70
 8001db2:	4b5e      	ldr	r3, [pc, #376]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	4a5d      	ldr	r2, [pc, #372]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x354>
 8001dc0:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	4a59      	ldr	r2, [pc, #356]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	6713      	str	r3, [r2, #112]	; 0x70
 8001dcc:	4b57      	ldr	r3, [pc, #348]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a56      	ldr	r2, [pc, #344]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001dd2:	f023 0304 	bic.w	r3, r3, #4
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d015      	beq.n	8001e0c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de0:	f7ff f87a 	bl	8000ed8 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de8:	f7ff f876 	bl	8000ed8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e092      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfe:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0ee      	beq.n	8001de8 <HAL_RCC_OscConfig+0x364>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7ff f864 	bl	8000ed8 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7ff f860 	bl	8000ed8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e07c      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2a:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ee      	bne.n	8001e14 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d105      	bne.n	8001e48 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3c:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	4a3a      	ldr	r2, [pc, #232]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d068      	beq.n	8001f22 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d060      	beq.n	8001f1e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d145      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_RCC_OscConfig+0x4b0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f835 	bl	8000ed8 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff f831 	bl	8000ed8 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e04f      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69da      	ldr	r2, [r3, #28]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	019b      	lsls	r3, r3, #6
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	085b      	lsrs	r3, r3, #1
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	041b      	lsls	r3, r3, #16
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	061b      	lsls	r3, r3, #24
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	071b      	lsls	r3, r3, #28
 8001ebc:	491b      	ldr	r1, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_RCC_OscConfig+0x4b0>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f806 	bl	8000ed8 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f802 	bl	8000ed8 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e020      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x44c>
 8001eee:	e018      	b.n	8001f22 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_RCC_OscConfig+0x4b0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7fe ffef 	bl	8000ed8 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efe:	f7fe ffeb 	bl	8000ed8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e009      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_OscConfig+0x4a8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f0      	bne.n	8001efe <HAL_RCC_OscConfig+0x47a>
 8001f1c:	e001      	b.n	8001f22 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40007000 	.word	0x40007000
 8001f34:	42470060 	.word	0x42470060

08001f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e01d      	b.n	8001f86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f815 	bl	8001f8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f000 f968 	bl	800224c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d007      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d122      	bne.n	8002046 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d11b      	bne.n	8002046 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f06f 0202 	mvn.w	r2, #2
 8002016:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f8ee 	bl	800220e <HAL_TIM_IC_CaptureCallback>
 8002032:	e005      	b.n	8002040 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f8e0 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8f1 	bl	8002222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b04      	cmp	r3, #4
 8002052:	d122      	bne.n	800209a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b04      	cmp	r3, #4
 8002060:	d11b      	bne.n	800209a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f06f 0204 	mvn.w	r2, #4
 800206a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f8c4 	bl	800220e <HAL_TIM_IC_CaptureCallback>
 8002086:	e005      	b.n	8002094 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f8b6 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8c7 	bl	8002222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d122      	bne.n	80020ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d11b      	bne.n	80020ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f06f 0208 	mvn.w	r2, #8
 80020be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2204      	movs	r2, #4
 80020c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f89a 	bl	800220e <HAL_TIM_IC_CaptureCallback>
 80020da:	e005      	b.n	80020e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f88c 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f89d 	bl	8002222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d122      	bne.n	8002142 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b10      	cmp	r3, #16
 8002108:	d11b      	bne.n	8002142 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f06f 0210 	mvn.w	r2, #16
 8002112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2208      	movs	r2, #8
 8002118:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f870 	bl	800220e <HAL_TIM_IC_CaptureCallback>
 800212e:	e005      	b.n	800213c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f862 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f873 	bl	8002222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10e      	bne.n	800216e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f06f 0201 	mvn.w	r2, #1
 8002166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7fe fbd5 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002178:	2b80      	cmp	r3, #128	; 0x80
 800217a:	d10e      	bne.n	800219a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b80      	cmp	r3, #128	; 0x80
 8002188:	d107      	bne.n	800219a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f903 	bl	80023a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d10e      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	d107      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f838 	bl	8002236 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d10e      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d107      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f06f 0220 	mvn.w	r2, #32
 80021ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f8cd 	bl	800238c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a40      	ldr	r2, [pc, #256]	; (8002360 <TIM_Base_SetConfig+0x114>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d013      	beq.n	800228c <TIM_Base_SetConfig+0x40>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226a:	d00f      	beq.n	800228c <TIM_Base_SetConfig+0x40>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3d      	ldr	r2, [pc, #244]	; (8002364 <TIM_Base_SetConfig+0x118>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00b      	beq.n	800228c <TIM_Base_SetConfig+0x40>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3c      	ldr	r2, [pc, #240]	; (8002368 <TIM_Base_SetConfig+0x11c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3b      	ldr	r2, [pc, #236]	; (800236c <TIM_Base_SetConfig+0x120>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3a      	ldr	r2, [pc, #232]	; (8002370 <TIM_Base_SetConfig+0x124>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d108      	bne.n	800229e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a2f      	ldr	r2, [pc, #188]	; (8002360 <TIM_Base_SetConfig+0x114>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d02b      	beq.n	80022fe <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d027      	beq.n	80022fe <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a2c      	ldr	r2, [pc, #176]	; (8002364 <TIM_Base_SetConfig+0x118>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d023      	beq.n	80022fe <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a2b      	ldr	r2, [pc, #172]	; (8002368 <TIM_Base_SetConfig+0x11c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01f      	beq.n	80022fe <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a2a      	ldr	r2, [pc, #168]	; (800236c <TIM_Base_SetConfig+0x120>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01b      	beq.n	80022fe <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a29      	ldr	r2, [pc, #164]	; (8002370 <TIM_Base_SetConfig+0x124>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d017      	beq.n	80022fe <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a28      	ldr	r2, [pc, #160]	; (8002374 <TIM_Base_SetConfig+0x128>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a27      	ldr	r2, [pc, #156]	; (8002378 <TIM_Base_SetConfig+0x12c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00f      	beq.n	80022fe <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a26      	ldr	r2, [pc, #152]	; (800237c <TIM_Base_SetConfig+0x130>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00b      	beq.n	80022fe <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a25      	ldr	r2, [pc, #148]	; (8002380 <TIM_Base_SetConfig+0x134>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a24      	ldr	r2, [pc, #144]	; (8002384 <TIM_Base_SetConfig+0x138>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d003      	beq.n	80022fe <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a23      	ldr	r2, [pc, #140]	; (8002388 <TIM_Base_SetConfig+0x13c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d108      	bne.n	8002310 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <TIM_Base_SetConfig+0x114>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d003      	beq.n	8002344 <TIM_Base_SetConfig+0xf8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <TIM_Base_SetConfig+0x124>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d103      	bne.n	800234c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	615a      	str	r2, [r3, #20]
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40010000 	.word	0x40010000
 8002364:	40000400 	.word	0x40000400
 8002368:	40000800 	.word	0x40000800
 800236c:	40000c00 	.word	0x40000c00
 8002370:	40010400 	.word	0x40010400
 8002374:	40014000 	.word	0x40014000
 8002378:	40014400 	.word	0x40014400
 800237c:	40014800 	.word	0x40014800
 8002380:	40001800 	.word	0x40001800
 8002384:	40001c00 	.word	0x40001c00
 8002388:	40002000 	.word	0x40002000

0800238c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e03f      	b.n	8002446 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe fb8a 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2224      	movs	r2, #36	; 0x24
 80023e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f90b 	bl	8002614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800240c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800241c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800242c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b088      	sub	sp, #32
 8002452:	af02      	add	r7, sp, #8
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4613      	mov	r3, r2
 800245c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b20      	cmp	r3, #32
 800246c:	f040 8083 	bne.w	8002576 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_UART_Transmit+0x2e>
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e07b      	b.n	8002578 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_UART_Transmit+0x40>
 800248a:	2302      	movs	r3, #2
 800248c:	e074      	b.n	8002578 <HAL_UART_Transmit+0x12a>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2221      	movs	r2, #33	; 0x21
 80024a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024a4:	f7fe fd18 	bl	8000ed8 <HAL_GetTick>
 80024a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	88fa      	ldrh	r2, [r7, #6]
 80024ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80024be:	e042      	b.n	8002546 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d6:	d122      	bne.n	800251e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2200      	movs	r2, #0
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f84c 	bl	8002580 <UART_WaitOnFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e042      	b.n	8002578 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002504:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	3302      	adds	r3, #2
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	e017      	b.n	8002546 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3301      	adds	r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	e013      	b.n	8002546 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	2180      	movs	r1, #128	; 0x80
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f829 	bl	8002580 <UART_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e01f      	b.n	8002578 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	60ba      	str	r2, [r7, #8]
 800253e:	781a      	ldrb	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1b7      	bne.n	80024c0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2200      	movs	r2, #0
 8002558:	2140      	movs	r1, #64	; 0x40
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f810 	bl	8002580 <UART_WaitOnFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e006      	b.n	8002578 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002576:	2302      	movs	r3, #2
  }
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	4613      	mov	r3, r2
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002590:	e02c      	b.n	80025ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002598:	d028      	beq.n	80025ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d007      	beq.n	80025b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80025a0:	f7fe fc9a 	bl	8000ed8 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d21d      	bcs.n	80025ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e00f      	b.n	800260c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	4013      	ands	r3, r2
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	429a      	cmp	r2, r3
 8002608:	d0c3      	beq.n	8002592 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002656:	f023 030c 	bic.w	r3, r3, #12
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	68f9      	ldr	r1, [r7, #12]
 8002660:	430b      	orrs	r3, r1
 8002662:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002682:	f040 818b 	bne.w	800299c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4ac1      	ldr	r2, [pc, #772]	; (8002990 <UART_SetConfig+0x37c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d005      	beq.n	800269c <UART_SetConfig+0x88>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4abf      	ldr	r2, [pc, #764]	; (8002994 <UART_SetConfig+0x380>)
 8002696:	4293      	cmp	r3, r2
 8002698:	f040 80bd 	bne.w	8002816 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800269c:	f7ff f80c 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 80026a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	461d      	mov	r5, r3
 80026a6:	f04f 0600 	mov.w	r6, #0
 80026aa:	46a8      	mov	r8, r5
 80026ac:	46b1      	mov	r9, r6
 80026ae:	eb18 0308 	adds.w	r3, r8, r8
 80026b2:	eb49 0409 	adc.w	r4, r9, r9
 80026b6:	4698      	mov	r8, r3
 80026b8:	46a1      	mov	r9, r4
 80026ba:	eb18 0805 	adds.w	r8, r8, r5
 80026be:	eb49 0906 	adc.w	r9, r9, r6
 80026c2:	f04f 0100 	mov.w	r1, #0
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026d6:	4688      	mov	r8, r1
 80026d8:	4691      	mov	r9, r2
 80026da:	eb18 0005 	adds.w	r0, r8, r5
 80026de:	eb49 0106 	adc.w	r1, r9, r6
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	461d      	mov	r5, r3
 80026e8:	f04f 0600 	mov.w	r6, #0
 80026ec:	196b      	adds	r3, r5, r5
 80026ee:	eb46 0406 	adc.w	r4, r6, r6
 80026f2:	461a      	mov	r2, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	f7fd fd8b 	bl	8000210 <__aeabi_uldivmod>
 80026fa:	4603      	mov	r3, r0
 80026fc:	460c      	mov	r4, r1
 80026fe:	461a      	mov	r2, r3
 8002700:	4ba5      	ldr	r3, [pc, #660]	; (8002998 <UART_SetConfig+0x384>)
 8002702:	fba3 2302 	umull	r2, r3, r3, r2
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	461d      	mov	r5, r3
 8002710:	f04f 0600 	mov.w	r6, #0
 8002714:	46a9      	mov	r9, r5
 8002716:	46b2      	mov	sl, r6
 8002718:	eb19 0309 	adds.w	r3, r9, r9
 800271c:	eb4a 040a 	adc.w	r4, sl, sl
 8002720:	4699      	mov	r9, r3
 8002722:	46a2      	mov	sl, r4
 8002724:	eb19 0905 	adds.w	r9, r9, r5
 8002728:	eb4a 0a06 	adc.w	sl, sl, r6
 800272c:	f04f 0100 	mov.w	r1, #0
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002738:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800273c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002740:	4689      	mov	r9, r1
 8002742:	4692      	mov	sl, r2
 8002744:	eb19 0005 	adds.w	r0, r9, r5
 8002748:	eb4a 0106 	adc.w	r1, sl, r6
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	461d      	mov	r5, r3
 8002752:	f04f 0600 	mov.w	r6, #0
 8002756:	196b      	adds	r3, r5, r5
 8002758:	eb46 0406 	adc.w	r4, r6, r6
 800275c:	461a      	mov	r2, r3
 800275e:	4623      	mov	r3, r4
 8002760:	f7fd fd56 	bl	8000210 <__aeabi_uldivmod>
 8002764:	4603      	mov	r3, r0
 8002766:	460c      	mov	r4, r1
 8002768:	461a      	mov	r2, r3
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <UART_SetConfig+0x384>)
 800276c:	fba3 1302 	umull	r1, r3, r3, r2
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	2164      	movs	r1, #100	; 0x64
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	3332      	adds	r3, #50	; 0x32
 800277e:	4a86      	ldr	r2, [pc, #536]	; (8002998 <UART_SetConfig+0x384>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800278c:	4498      	add	r8, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	461d      	mov	r5, r3
 8002792:	f04f 0600 	mov.w	r6, #0
 8002796:	46a9      	mov	r9, r5
 8002798:	46b2      	mov	sl, r6
 800279a:	eb19 0309 	adds.w	r3, r9, r9
 800279e:	eb4a 040a 	adc.w	r4, sl, sl
 80027a2:	4699      	mov	r9, r3
 80027a4:	46a2      	mov	sl, r4
 80027a6:	eb19 0905 	adds.w	r9, r9, r5
 80027aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027c2:	4689      	mov	r9, r1
 80027c4:	4692      	mov	sl, r2
 80027c6:	eb19 0005 	adds.w	r0, r9, r5
 80027ca:	eb4a 0106 	adc.w	r1, sl, r6
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	461d      	mov	r5, r3
 80027d4:	f04f 0600 	mov.w	r6, #0
 80027d8:	196b      	adds	r3, r5, r5
 80027da:	eb46 0406 	adc.w	r4, r6, r6
 80027de:	461a      	mov	r2, r3
 80027e0:	4623      	mov	r3, r4
 80027e2:	f7fd fd15 	bl	8000210 <__aeabi_uldivmod>
 80027e6:	4603      	mov	r3, r0
 80027e8:	460c      	mov	r4, r1
 80027ea:	461a      	mov	r2, r3
 80027ec:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <UART_SetConfig+0x384>)
 80027ee:	fba3 1302 	umull	r1, r3, r3, r2
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2164      	movs	r1, #100	; 0x64
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	3332      	adds	r3, #50	; 0x32
 8002800:	4a65      	ldr	r2, [pc, #404]	; (8002998 <UART_SetConfig+0x384>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	f003 0207 	and.w	r2, r3, #7
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4442      	add	r2, r8
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e26f      	b.n	8002cf6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002816:	f7fe ff3b 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 800281a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	461d      	mov	r5, r3
 8002820:	f04f 0600 	mov.w	r6, #0
 8002824:	46a8      	mov	r8, r5
 8002826:	46b1      	mov	r9, r6
 8002828:	eb18 0308 	adds.w	r3, r8, r8
 800282c:	eb49 0409 	adc.w	r4, r9, r9
 8002830:	4698      	mov	r8, r3
 8002832:	46a1      	mov	r9, r4
 8002834:	eb18 0805 	adds.w	r8, r8, r5
 8002838:	eb49 0906 	adc.w	r9, r9, r6
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002848:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800284c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002850:	4688      	mov	r8, r1
 8002852:	4691      	mov	r9, r2
 8002854:	eb18 0005 	adds.w	r0, r8, r5
 8002858:	eb49 0106 	adc.w	r1, r9, r6
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	461d      	mov	r5, r3
 8002862:	f04f 0600 	mov.w	r6, #0
 8002866:	196b      	adds	r3, r5, r5
 8002868:	eb46 0406 	adc.w	r4, r6, r6
 800286c:	461a      	mov	r2, r3
 800286e:	4623      	mov	r3, r4
 8002870:	f7fd fcce 	bl	8000210 <__aeabi_uldivmod>
 8002874:	4603      	mov	r3, r0
 8002876:	460c      	mov	r4, r1
 8002878:	461a      	mov	r2, r3
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <UART_SetConfig+0x384>)
 800287c:	fba3 2302 	umull	r2, r3, r3, r2
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	461d      	mov	r5, r3
 800288a:	f04f 0600 	mov.w	r6, #0
 800288e:	46a9      	mov	r9, r5
 8002890:	46b2      	mov	sl, r6
 8002892:	eb19 0309 	adds.w	r3, r9, r9
 8002896:	eb4a 040a 	adc.w	r4, sl, sl
 800289a:	4699      	mov	r9, r3
 800289c:	46a2      	mov	sl, r4
 800289e:	eb19 0905 	adds.w	r9, r9, r5
 80028a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028ba:	4689      	mov	r9, r1
 80028bc:	4692      	mov	sl, r2
 80028be:	eb19 0005 	adds.w	r0, r9, r5
 80028c2:	eb4a 0106 	adc.w	r1, sl, r6
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	461d      	mov	r5, r3
 80028cc:	f04f 0600 	mov.w	r6, #0
 80028d0:	196b      	adds	r3, r5, r5
 80028d2:	eb46 0406 	adc.w	r4, r6, r6
 80028d6:	461a      	mov	r2, r3
 80028d8:	4623      	mov	r3, r4
 80028da:	f7fd fc99 	bl	8000210 <__aeabi_uldivmod>
 80028de:	4603      	mov	r3, r0
 80028e0:	460c      	mov	r4, r1
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <UART_SetConfig+0x384>)
 80028e6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2164      	movs	r1, #100	; 0x64
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	3332      	adds	r3, #50	; 0x32
 80028f8:	4a27      	ldr	r2, [pc, #156]	; (8002998 <UART_SetConfig+0x384>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002906:	4498      	add	r8, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	461d      	mov	r5, r3
 800290c:	f04f 0600 	mov.w	r6, #0
 8002910:	46a9      	mov	r9, r5
 8002912:	46b2      	mov	sl, r6
 8002914:	eb19 0309 	adds.w	r3, r9, r9
 8002918:	eb4a 040a 	adc.w	r4, sl, sl
 800291c:	4699      	mov	r9, r3
 800291e:	46a2      	mov	sl, r4
 8002920:	eb19 0905 	adds.w	r9, r9, r5
 8002924:	eb4a 0a06 	adc.w	sl, sl, r6
 8002928:	f04f 0100 	mov.w	r1, #0
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002934:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002938:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800293c:	4689      	mov	r9, r1
 800293e:	4692      	mov	sl, r2
 8002940:	eb19 0005 	adds.w	r0, r9, r5
 8002944:	eb4a 0106 	adc.w	r1, sl, r6
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	461d      	mov	r5, r3
 800294e:	f04f 0600 	mov.w	r6, #0
 8002952:	196b      	adds	r3, r5, r5
 8002954:	eb46 0406 	adc.w	r4, r6, r6
 8002958:	461a      	mov	r2, r3
 800295a:	4623      	mov	r3, r4
 800295c:	f7fd fc58 	bl	8000210 <__aeabi_uldivmod>
 8002960:	4603      	mov	r3, r0
 8002962:	460c      	mov	r4, r1
 8002964:	461a      	mov	r2, r3
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <UART_SetConfig+0x384>)
 8002968:	fba3 1302 	umull	r1, r3, r3, r2
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	2164      	movs	r1, #100	; 0x64
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	3332      	adds	r3, #50	; 0x32
 800297a:	4a07      	ldr	r2, [pc, #28]	; (8002998 <UART_SetConfig+0x384>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	f003 0207 	and.w	r2, r3, #7
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4442      	add	r2, r8
 800298c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800298e:	e1b2      	b.n	8002cf6 <UART_SetConfig+0x6e2>
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4ad7      	ldr	r2, [pc, #860]	; (8002d00 <UART_SetConfig+0x6ec>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d005      	beq.n	80029b2 <UART_SetConfig+0x39e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4ad6      	ldr	r2, [pc, #856]	; (8002d04 <UART_SetConfig+0x6f0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	f040 80d1 	bne.w	8002b54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80029b2:	f7fe fe81 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 80029b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	469a      	mov	sl, r3
 80029bc:	f04f 0b00 	mov.w	fp, #0
 80029c0:	46d0      	mov	r8, sl
 80029c2:	46d9      	mov	r9, fp
 80029c4:	eb18 0308 	adds.w	r3, r8, r8
 80029c8:	eb49 0409 	adc.w	r4, r9, r9
 80029cc:	4698      	mov	r8, r3
 80029ce:	46a1      	mov	r9, r4
 80029d0:	eb18 080a 	adds.w	r8, r8, sl
 80029d4:	eb49 090b 	adc.w	r9, r9, fp
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029ec:	4688      	mov	r8, r1
 80029ee:	4691      	mov	r9, r2
 80029f0:	eb1a 0508 	adds.w	r5, sl, r8
 80029f4:	eb4b 0609 	adc.w	r6, fp, r9
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4619      	mov	r1, r3
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f04f 0400 	mov.w	r4, #0
 8002a0a:	0094      	lsls	r4, r2, #2
 8002a0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a10:	008b      	lsls	r3, r1, #2
 8002a12:	461a      	mov	r2, r3
 8002a14:	4623      	mov	r3, r4
 8002a16:	4628      	mov	r0, r5
 8002a18:	4631      	mov	r1, r6
 8002a1a:	f7fd fbf9 	bl	8000210 <__aeabi_uldivmod>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	460c      	mov	r4, r1
 8002a22:	461a      	mov	r2, r3
 8002a24:	4bb8      	ldr	r3, [pc, #736]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002a26:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	469b      	mov	fp, r3
 8002a34:	f04f 0c00 	mov.w	ip, #0
 8002a38:	46d9      	mov	r9, fp
 8002a3a:	46e2      	mov	sl, ip
 8002a3c:	eb19 0309 	adds.w	r3, r9, r9
 8002a40:	eb4a 040a 	adc.w	r4, sl, sl
 8002a44:	4699      	mov	r9, r3
 8002a46:	46a2      	mov	sl, r4
 8002a48:	eb19 090b 	adds.w	r9, r9, fp
 8002a4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a50:	f04f 0100 	mov.w	r1, #0
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a64:	4689      	mov	r9, r1
 8002a66:	4692      	mov	sl, r2
 8002a68:	eb1b 0509 	adds.w	r5, fp, r9
 8002a6c:	eb4c 060a 	adc.w	r6, ip, sl
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	f04f 0400 	mov.w	r4, #0
 8002a82:	0094      	lsls	r4, r2, #2
 8002a84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a88:	008b      	lsls	r3, r1, #2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4623      	mov	r3, r4
 8002a8e:	4628      	mov	r0, r5
 8002a90:	4631      	mov	r1, r6
 8002a92:	f7fd fbbd 	bl	8000210 <__aeabi_uldivmod>
 8002a96:	4603      	mov	r3, r0
 8002a98:	460c      	mov	r4, r1
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b9a      	ldr	r3, [pc, #616]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2164      	movs	r1, #100	; 0x64
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	3332      	adds	r3, #50	; 0x32
 8002ab0:	4a95      	ldr	r2, [pc, #596]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002abc:	4498      	add	r8, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	469b      	mov	fp, r3
 8002ac2:	f04f 0c00 	mov.w	ip, #0
 8002ac6:	46d9      	mov	r9, fp
 8002ac8:	46e2      	mov	sl, ip
 8002aca:	eb19 0309 	adds.w	r3, r9, r9
 8002ace:	eb4a 040a 	adc.w	r4, sl, sl
 8002ad2:	4699      	mov	r9, r3
 8002ad4:	46a2      	mov	sl, r4
 8002ad6:	eb19 090b 	adds.w	r9, r9, fp
 8002ada:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ade:	f04f 0100 	mov.w	r1, #0
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002aee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002af2:	4689      	mov	r9, r1
 8002af4:	4692      	mov	sl, r2
 8002af6:	eb1b 0509 	adds.w	r5, fp, r9
 8002afa:	eb4c 060a 	adc.w	r6, ip, sl
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4619      	mov	r1, r3
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	f04f 0400 	mov.w	r4, #0
 8002b10:	0094      	lsls	r4, r2, #2
 8002b12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b16:	008b      	lsls	r3, r1, #2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4623      	mov	r3, r4
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	4631      	mov	r1, r6
 8002b20:	f7fd fb76 	bl	8000210 <__aeabi_uldivmod>
 8002b24:	4603      	mov	r3, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b77      	ldr	r3, [pc, #476]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	2164      	movs	r1, #100	; 0x64
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	3332      	adds	r3, #50	; 0x32
 8002b3e:	4a72      	ldr	r2, [pc, #456]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	f003 020f 	and.w	r2, r3, #15
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4442      	add	r2, r8
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	e0d0      	b.n	8002cf6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b54:	f7fe fd9c 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 8002b58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	469a      	mov	sl, r3
 8002b5e:	f04f 0b00 	mov.w	fp, #0
 8002b62:	46d0      	mov	r8, sl
 8002b64:	46d9      	mov	r9, fp
 8002b66:	eb18 0308 	adds.w	r3, r8, r8
 8002b6a:	eb49 0409 	adc.w	r4, r9, r9
 8002b6e:	4698      	mov	r8, r3
 8002b70:	46a1      	mov	r9, r4
 8002b72:	eb18 080a 	adds.w	r8, r8, sl
 8002b76:	eb49 090b 	adc.w	r9, r9, fp
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b8e:	4688      	mov	r8, r1
 8002b90:	4691      	mov	r9, r2
 8002b92:	eb1a 0508 	adds.w	r5, sl, r8
 8002b96:	eb4b 0609 	adc.w	r6, fp, r9
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	f04f 0400 	mov.w	r4, #0
 8002bac:	0094      	lsls	r4, r2, #2
 8002bae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bb2:	008b      	lsls	r3, r1, #2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	4628      	mov	r0, r5
 8002bba:	4631      	mov	r1, r6
 8002bbc:	f7fd fb28 	bl	8000210 <__aeabi_uldivmod>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	469b      	mov	fp, r3
 8002bd6:	f04f 0c00 	mov.w	ip, #0
 8002bda:	46d9      	mov	r9, fp
 8002bdc:	46e2      	mov	sl, ip
 8002bde:	eb19 0309 	adds.w	r3, r9, r9
 8002be2:	eb4a 040a 	adc.w	r4, sl, sl
 8002be6:	4699      	mov	r9, r3
 8002be8:	46a2      	mov	sl, r4
 8002bea:	eb19 090b 	adds.w	r9, r9, fp
 8002bee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c06:	4689      	mov	r9, r1
 8002c08:	4692      	mov	sl, r2
 8002c0a:	eb1b 0509 	adds.w	r5, fp, r9
 8002c0e:	eb4c 060a 	adc.w	r6, ip, sl
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4619      	mov	r1, r3
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	f04f 0400 	mov.w	r4, #0
 8002c24:	0094      	lsls	r4, r2, #2
 8002c26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c2a:	008b      	lsls	r3, r1, #2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4623      	mov	r3, r4
 8002c30:	4628      	mov	r0, r5
 8002c32:	4631      	mov	r1, r6
 8002c34:	f7fd faec 	bl	8000210 <__aeabi_uldivmod>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002c40:	fba3 1302 	umull	r1, r3, r3, r2
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	2164      	movs	r1, #100	; 0x64
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	3332      	adds	r3, #50	; 0x32
 8002c52:	4a2d      	ldr	r2, [pc, #180]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c5e:	4498      	add	r8, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	469b      	mov	fp, r3
 8002c64:	f04f 0c00 	mov.w	ip, #0
 8002c68:	46d9      	mov	r9, fp
 8002c6a:	46e2      	mov	sl, ip
 8002c6c:	eb19 0309 	adds.w	r3, r9, r9
 8002c70:	eb4a 040a 	adc.w	r4, sl, sl
 8002c74:	4699      	mov	r9, r3
 8002c76:	46a2      	mov	sl, r4
 8002c78:	eb19 090b 	adds.w	r9, r9, fp
 8002c7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c94:	4689      	mov	r9, r1
 8002c96:	4692      	mov	sl, r2
 8002c98:	eb1b 0509 	adds.w	r5, fp, r9
 8002c9c:	eb4c 060a 	adc.w	r6, ip, sl
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	f04f 0400 	mov.w	r4, #0
 8002cb2:	0094      	lsls	r4, r2, #2
 8002cb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cb8:	008b      	lsls	r3, r1, #2
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4623      	mov	r3, r4
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	4631      	mov	r1, r6
 8002cc2:	f7fd faa5 	bl	8000210 <__aeabi_uldivmod>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	460c      	mov	r4, r1
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002cce:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2164      	movs	r1, #100	; 0x64
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	3332      	adds	r3, #50	; 0x32
 8002ce0:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <UART_SetConfig+0x6f4>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	f003 020f 	and.w	r2, r3, #15
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4442      	add	r2, r8
 8002cf2:	609a      	str	r2, [r3, #8]
}
 8002cf4:	e7ff      	b.n	8002cf6 <UART_SetConfig+0x6e2>
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d00:	40011000 	.word	0x40011000
 8002d04:	40011400 	.word	0x40011400
 8002d08:	51eb851f 	.word	0x51eb851f

08002d0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d1e:	2b84      	cmp	r3, #132	; 0x84
 8002d20:	d005      	beq.n	8002d2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002d22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4413      	add	r3, r2
 8002d2a:	3303      	adds	r3, #3
 8002d2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d42:	f3ef 8305 	mrs	r3, IPSR
 8002d46:	607b      	str	r3, [r7, #4]
  return(result);
 8002d48:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bf14      	ite	ne
 8002d4e:	2301      	movne	r3, #1
 8002d50:	2300      	moveq	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002d64:	f001 fb40 	bl	80043e8 <vTaskStartScheduler>
  
  return osOK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d70:	b089      	sub	sp, #36	; 0x24
 8002d72:	af04      	add	r7, sp, #16
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <osThreadCreate+0x54>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01c      	beq.n	8002dc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685c      	ldr	r4, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681d      	ldr	r5, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691e      	ldr	r6, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ffb6 	bl	8002d0c <makeFreeRtosPriority>
 8002da0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002daa:	9202      	str	r2, [sp, #8]
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	9100      	str	r1, [sp, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4632      	mov	r2, r6
 8002db4:	4629      	mov	r1, r5
 8002db6:	4620      	mov	r0, r4
 8002db8:	f001 f953 	bl	8004062 <xTaskCreateStatic>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e01c      	b.n	8002dfc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685c      	ldr	r4, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dce:	b29e      	uxth	r6, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ff98 	bl	8002d0c <makeFreeRtosPriority>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f107 030c 	add.w	r3, r7, #12
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	9200      	str	r2, [sp, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	4632      	mov	r2, r6
 8002dea:	4629      	mov	r1, r5
 8002dec:	4620      	mov	r0, r4
 8002dee:	f001 f992 	bl	8004116 <xTaskCreate>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d001      	beq.n	8002dfc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <osDelay+0x16>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	e000      	b.n	8002e1e <osDelay+0x18>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f001 faae 	bl	8004380 <vTaskDelay>
  
  return osOK;
 8002e24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	3303      	adds	r3, #3
 8002e3c:	f023 0303 	bic.w	r3, r3, #3
 8002e40:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8002e42:	2014      	movs	r0, #20
 8002e44:	f002 fa0c 	bl	8005260 <pvPortMalloc>
 8002e48:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d046      	beq.n	8002ede <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2200      	movs	r2, #0
 8002e62:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 f9f9 	bl	8005260 <pvPortMalloc>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d02b      	beq.n	8002ed4 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 f9ea 	bl	8005260 <pvPortMalloc>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d011      	beq.n	8002ebe <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	e008      	b.n	8002eb2 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d3f1      	bcc.n	8002ea0 <osPoolCreate+0x72>
 8002ebc:	e00f      	b.n	8002ede <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f002 fa8e 	bl	80053e4 <vPortFree>
        vPortFree(thePool);
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f002 fa8b 	bl	80053e4 <vPortFree>
        thePool = NULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e004      	b.n	8002ede <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8002ed4:	6978      	ldr	r0, [r7, #20]
 8002ed6:	f002 fa85 	bl	80053e4 <vPortFree>
      thePool = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8002ede:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8002ef8:	f7ff ff20 	bl	8002d3c <inHandlerMode>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f02:	f3ef 8211 	mrs	r2, BASEPRI
 8002f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	617a      	str	r2, [r7, #20]
 8002f18:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f1a:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1e:	e001      	b.n	8002f24 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8002f20:	f002 f884 	bl	800502c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	e029      	b.n	8002f7e <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	4413      	add	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6892      	ldr	r2, [r2, #8]
 8002f36:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f3a:	fb02 f201 	mul.w	r2, r2, r1
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4413      	add	r3, r2
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d113      	bne.n	8002f78 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4619      	mov	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	611a      	str	r2, [r3, #16]
      break;
 8002f76:	e007      	b.n	8002f88 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d3d0      	bcc.n	8002f2a <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8002f88:	f7ff fed8 	bl	8002d3c <inHandlerMode>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	e001      	b.n	8002fa2 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8002f9e:	f002 f873 	bl	8005088 <vPortExitCritical>
  }
  
  return p;
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3728      	adds	r7, #40	; 0x28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <osPoolFree+0x14>
    return osErrorParameter;
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	e030      	b.n	8003022 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <osPoolFree+0x1e>
    return osErrorParameter;
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	e02b      	b.n	8003022 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d201      	bcs.n	8002fd8 <osPoolFree+0x2c>
    return osErrorParameter;
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	e024      	b.n	8003022 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002fec:	fb02 f201 	mul.w	r2, r2, r1
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <osPoolFree+0x4e>
    return osErrorParameter;
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	e013      	b.n	8003022 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d301      	bcc.n	8003014 <osPoolFree+0x68>
    return osErrorParameter;
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	e006      	b.n	8003022 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800302e:	b590      	push	{r4, r7, lr}
 8003030:	b085      	sub	sp, #20
 8003032:	af02      	add	r7, sp, #8
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d012      	beq.n	8003066 <osMessageCreate+0x38>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00e      	beq.n	8003066 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68dc      	ldr	r4, [r3, #12]
 8003058:	2300      	movs	r3, #0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	4623      	mov	r3, r4
 800305e:	f000 fb37 	bl	80036d0 <xQueueGenericCreateStatic>
 8003062:	4603      	mov	r3, r0
 8003064:	e008      	b.n	8003078 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	4619      	mov	r1, r3
 8003072:	f000 fba0 	bl	80037b6 <xQueueGenericCreate>
 8003076:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bd90      	pop	{r4, r7, pc}

08003080 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <osMessagePut+0x1e>
    ticks = 1;
 800309a:	2301      	movs	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800309e:	f7ff fe4d 	bl	8002d3c <inHandlerMode>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d018      	beq.n	80030da <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80030a8:	f107 0210 	add.w	r2, r7, #16
 80030ac:	f107 0108 	add.w	r1, r7, #8
 80030b0:	2300      	movs	r3, #0
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fcd8 	bl	8003a68 <xQueueGenericSendFromISR>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d001      	beq.n	80030c2 <osMessagePut+0x42>
      return osErrorOS;
 80030be:	23ff      	movs	r3, #255	; 0xff
 80030c0:	e018      	b.n	80030f4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d014      	beq.n	80030f2 <osMessagePut+0x72>
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <osMessagePut+0x7c>)
 80030ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	e00b      	b.n	80030f2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80030da:	f107 0108 	add.w	r1, r7, #8
 80030de:	2300      	movs	r3, #0
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fbc6 	bl	8003874 <xQueueGenericSend>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d001      	beq.n	80030f2 <osMessagePut+0x72>
      return osErrorOS;
 80030ee:	23ff      	movs	r3, #255	; 0xff
 80030f0:	e000      	b.n	80030f4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	e000ed04 	.word	0xe000ed04

08003100 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b08b      	sub	sp, #44	; 0x2c
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	617b      	str	r3, [r7, #20]
    return event;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	461c      	mov	r4, r3
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800312a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800312e:	e054      	b.n	80031da <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003130:	2300      	movs	r3, #0
 8003132:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800313e:	d103      	bne.n	8003148 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	e009      	b.n	800315c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d006      	beq.n	800315c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <osMessageGet+0x5c>
      ticks = 1;
 8003158:	2301      	movs	r3, #1
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800315c:	f7ff fdee 	bl	8002d3c <inHandlerMode>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01c      	beq.n	80031a0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003166:	f107 0220 	add.w	r2, r7, #32
 800316a:	f107 0314 	add.w	r3, r7, #20
 800316e:	3304      	adds	r3, #4
 8003170:	4619      	mov	r1, r3
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	f000 fde8 	bl	8003d48 <xQueueReceiveFromISR>
 8003178:	4603      	mov	r3, r0
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800317e:	2310      	movs	r3, #16
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e001      	b.n	8003188 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01d      	beq.n	80031ca <osMessageGet+0xca>
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <osMessageGet+0xe4>)
 8003190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	e014      	b.n	80031ca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	3304      	adds	r3, #4
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	4619      	mov	r1, r3
 80031aa:	68b8      	ldr	r0, [r7, #8]
 80031ac:	f000 fcf0 	bl	8003b90 <xQueueReceive>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d102      	bne.n	80031bc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80031b6:	2310      	movs	r3, #16
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e006      	b.n	80031ca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <osMessageGet+0xc6>
 80031c2:	2300      	movs	r3, #0
 80031c4:	e000      	b.n	80031c8 <osMessageGet+0xc8>
 80031c6:	2340      	movs	r3, #64	; 0x40
 80031c8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	461c      	mov	r4, r3
 80031ce:	f107 0314 	add.w	r3, r7, #20
 80031d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	372c      	adds	r7, #44	; 0x2c
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd90      	pop	{r4, r7, pc}
 80031e2:	bf00      	nop
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689c      	ldr	r4, [r3, #8]
 8003206:	200c      	movs	r0, #12
 8003208:	f002 f82a 	bl	8005260 <pvPortMalloc>
 800320c:	4603      	mov	r3, r0
 800320e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <osMailCreate+0x36>
    return NULL;
 800321a:	2300      	movs	r3, #0
 800321c:	e038      	b.n	8003290 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	681c      	ldr	r4, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	2104      	movs	r1, #4
 8003236:	f000 fabe 	bl	80037b6 <xQueueGenericCreate>
 800323a:	4603      	mov	r3, r0
 800323c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d107      	bne.n	800325a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f002 f8c7 	bl	80053e4 <vPortFree>
    return NULL;
 8003256:	2300      	movs	r3, #0
 8003258:	e01a      	b.n	8003290 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	681c      	ldr	r4, [r3, #0]
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fde2 	bl	8002e2e <osPoolCreate>
 800326a:	4603      	mov	r3, r0
 800326c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d107      	bne.n	800328a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f002 f8af 	bl	80053e4 <vPortFree>
    return NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	e002      	b.n	8003290 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8003290:	4618      	mov	r0, r3
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd90      	pop	{r4, r7, pc}

08003298 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <osMailAlloc+0x14>
    return NULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e006      	b.n	80032ba <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fe19 	bl	8002ee8 <osPoolAlloc>
 80032b6:	60f8      	str	r0, [r7, #12]
  
  return p;
 80032b8:	68fb      	ldr	r3, [r7, #12]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <osMailCAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailCAlloc (osMailQId queue_id, uint32_t millisec)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
  uint32_t i;
  void *p = osMailAlloc(queue_id, millisec);
 80032cc:	6839      	ldr	r1, [r7, #0]
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ffe2 	bl	8003298 <osMailAlloc>
 80032d4:	60b8      	str	r0, [r7, #8]
  
  if (p) {
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <osMailCAlloc+0x3c>
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e007      	b.n	80032f2 <osMailCAlloc+0x30>
      ((uint8_t *)p)[i] = 0;
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3301      	adds	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d3f1      	bcc.n	80032e2 <osMailCAlloc+0x20>
    }
  }
  
  return p;
 80032fe:	68bb      	ldr	r3, [r7, #8]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <osMailPut+0x14>
    return osErrorParameter;
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	e02c      	b.n	8003376 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8003320:	f7ff fd0c 	bl	8002d3c <inHandlerMode>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d018      	beq.n	800335c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6858      	ldr	r0, [r3, #4]
 800332e:	f107 020c 	add.w	r2, r7, #12
 8003332:	4639      	mov	r1, r7
 8003334:	2300      	movs	r3, #0
 8003336:	f000 fb97 	bl	8003a68 <xQueueGenericSendFromISR>
 800333a:	4603      	mov	r3, r0
 800333c:	2b01      	cmp	r3, #1
 800333e:	d001      	beq.n	8003344 <osMailPut+0x3c>
      return osErrorOS;
 8003340:	23ff      	movs	r3, #255	; 0xff
 8003342:	e018      	b.n	8003376 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d014      	beq.n	8003374 <osMailPut+0x6c>
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <osMailPut+0x78>)
 800334c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	e00b      	b.n	8003374 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6858      	ldr	r0, [r3, #4]
 8003360:	4639      	mov	r1, r7
 8003362:	2300      	movs	r3, #0
 8003364:	2200      	movs	r2, #0
 8003366:	f000 fa85 	bl	8003874 <xQueueGenericSend>
 800336a:	4603      	mov	r3, r0
 800336c:	2b01      	cmp	r3, #1
 800336e:	d001      	beq.n	8003374 <osMailPut+0x6c>
      return osErrorOS;
 8003370:	23ff      	movs	r3, #255	; 0xff
 8003372:	e000      	b.n	8003376 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	e000ed04 	.word	0xe000ed04

08003384 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b08b      	sub	sp, #44	; 0x2c
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	617b      	str	r3, [r7, #20]
    return event;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	461c      	mov	r4, r3
 80033a2:	f107 0314 	add.w	r3, r7, #20
 80033a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033ae:	e056      	b.n	800345e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033be:	d103      	bne.n	80033c8 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80033c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
 80033c6:	e009      	b.n	80033dc <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d006      	beq.n	80033dc <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <osMailGet+0x58>
      ticks = 1;
 80033d8:	2301      	movs	r3, #1
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80033dc:	f7ff fcae 	bl	8002d3c <inHandlerMode>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01d      	beq.n	8003422 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6858      	ldr	r0, [r3, #4]
 80033ea:	f107 0220 	add.w	r2, r7, #32
 80033ee:	f107 0314 	add.w	r3, r7, #20
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	f000 fca7 	bl	8003d48 <xQueueReceiveFromISR>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d102      	bne.n	8003406 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8003400:	2320      	movs	r3, #32
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	e001      	b.n	800340a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01e      	beq.n	800344e <osMailGet+0xca>
 8003410:	4b15      	ldr	r3, [pc, #84]	; (8003468 <osMailGet+0xe4>)
 8003412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	e015      	b.n	800344e <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	6858      	ldr	r0, [r3, #4]
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	3304      	adds	r3, #4
 800342c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342e:	4619      	mov	r1, r3
 8003430:	f000 fbae 	bl	8003b90 <xQueueReceive>
 8003434:	4603      	mov	r3, r0
 8003436:	2b01      	cmp	r3, #1
 8003438:	d102      	bne.n	8003440 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800343a:	2320      	movs	r3, #32
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	e006      	b.n	800344e <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <osMailGet+0xc6>
 8003446:	2300      	movs	r3, #0
 8003448:	e000      	b.n	800344c <osMailGet+0xc8>
 800344a:	2340      	movs	r3, #64	; 0x40
 800344c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	461c      	mov	r4, r3
 8003452:	f107 0314 	add.w	r3, r7, #20
 8003456:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800345a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	372c      	adds	r7, #44	; 0x2c
 8003462:	46bd      	mov	sp, r7
 8003464:	bd90      	pop	{r4, r7, pc}
 8003466:	bf00      	nop
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <osMailFree+0x14>
    return osErrorParameter;
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	e006      	b.n	800348e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	6839      	ldr	r1, [r7, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff fd90 	bl	8002fac <osPoolFree>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f103 0208 	add.w	r2, r3, #8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f103 0208 	add.w	r2, r3, #8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f103 0208 	add.w	r2, r3, #8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	601a      	str	r2, [r3, #0]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800354e:	d103      	bne.n	8003558 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	e00c      	b.n	8003572 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3308      	adds	r3, #8
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e002      	b.n	8003566 <vListInsert+0x2e>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	d2f6      	bcs.n	8003560 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	601a      	str	r2, [r3, #0]
}
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6892      	ldr	r2, [r2, #8]
 80035c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6852      	ldr	r2, [r2, #4]
 80035ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d103      	bne.n	80035de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	1e5a      	subs	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <xQueueGenericReset+0x28>
	__asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	e7fe      	b.n	8003626 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003628:	f001 fd00 	bl	800502c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	68f9      	ldr	r1, [r7, #12]
 8003636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	441a      	add	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	3b01      	subs	r3, #1
 800365a:	68f9      	ldr	r1, [r7, #12]
 800365c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	441a      	add	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	22ff      	movs	r2, #255	; 0xff
 800366c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	22ff      	movs	r2, #255	; 0xff
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d114      	bne.n	80036a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01a      	beq.n	80036bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3310      	adds	r3, #16
 800368a:	4618      	mov	r0, r3
 800368c:	f001 f8ea 	bl	8004864 <xTaskRemoveFromEventList>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d012      	beq.n	80036bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <xQueueGenericReset+0xcc>)
 8003698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	e009      	b.n	80036bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3310      	adds	r3, #16
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fef2 	bl	8003496 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3324      	adds	r3, #36	; 0x24
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff feed 	bl	8003496 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036bc:	f001 fce4 	bl	8005088 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036c0:	2301      	movs	r3, #1
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	; 0x38
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <xQueueGenericCreateStatic+0x28>
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f6:	e7fe      	b.n	80036f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <xQueueGenericCreateStatic+0x42>
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
 8003710:	e7fe      	b.n	8003710 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <xQueueGenericCreateStatic+0x4e>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <xQueueGenericCreateStatic+0x52>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <xQueueGenericCreateStatic+0x54>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <xQueueGenericCreateStatic+0x6c>
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	623b      	str	r3, [r7, #32]
 800373a:	e7fe      	b.n	800373a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <xQueueGenericCreateStatic+0x78>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <xQueueGenericCreateStatic+0x7c>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <xQueueGenericCreateStatic+0x7e>
 800374c:	2300      	movs	r3, #0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <xQueueGenericCreateStatic+0x96>
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	e7fe      	b.n	8003764 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003766:	2348      	movs	r3, #72	; 0x48
 8003768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b48      	cmp	r3, #72	; 0x48
 800376e:	d009      	beq.n	8003784 <xQueueGenericCreateStatic+0xb4>
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	e7fe      	b.n	8003782 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003784:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00d      	beq.n	80037ac <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003798:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f844 	bl	8003834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3730      	adds	r7, #48	; 0x30
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b08a      	sub	sp, #40	; 0x28
 80037ba:	af02      	add	r7, sp, #8
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	4613      	mov	r3, r2
 80037c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <xQueueGenericCreate+0x28>
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e7fe      	b.n	80037dc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	e004      	b.n	80037f4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	3348      	adds	r3, #72	; 0x48
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fd31 	bl	8005260 <pvPortMalloc>
 80037fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d011      	beq.n	800382a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3348      	adds	r3, #72	; 0x48
 800380e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003818:	79fa      	ldrb	r2, [r7, #7]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f805 	bl	8003834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800382a:	69bb      	ldr	r3, [r7, #24]
	}
 800382c:	4618      	mov	r0, r3
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d103      	bne.n	8003850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e002      	b.n	8003856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003862:	2101      	movs	r1, #1
 8003864:	69b8      	ldr	r0, [r7, #24]
 8003866:	f7ff fecb 	bl	8003600 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003882:	2300      	movs	r3, #0
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <xQueueGenericSend+0x30>
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a2:	e7fe      	b.n	80038a2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <xQueueGenericSend+0x3e>
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <xQueueGenericSend+0x42>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <xQueueGenericSend+0x44>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <xQueueGenericSend+0x5c>
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
 80038ce:	e7fe      	b.n	80038ce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d103      	bne.n	80038de <xQueueGenericSend+0x6a>
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <xQueueGenericSend+0x6e>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <xQueueGenericSend+0x70>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <xQueueGenericSend+0x88>
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	e7fe      	b.n	80038fa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038fc:	f001 f968 	bl	8004bd0 <xTaskGetSchedulerState>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <xQueueGenericSend+0x98>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <xQueueGenericSend+0x9c>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <xQueueGenericSend+0x9e>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <xQueueGenericSend+0xb6>
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	e7fe      	b.n	8003928 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800392a:	f001 fb7f 	bl	800502c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	429a      	cmp	r2, r3
 8003938:	d302      	bcc.n	8003940 <xQueueGenericSend+0xcc>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d129      	bne.n	8003994 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003946:	f000 fa7c 	bl	8003e42 <prvCopyDataToQueue>
 800394a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	3324      	adds	r3, #36	; 0x24
 8003958:	4618      	mov	r0, r3
 800395a:	f000 ff83 	bl	8004864 <xTaskRemoveFromEventList>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003964:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <xQueueGenericSend+0x1f0>)
 8003966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	e00a      	b.n	800398c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800397c:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <xQueueGenericSend+0x1f0>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800398c:	f001 fb7c 	bl	8005088 <vPortExitCritical>
				return pdPASS;
 8003990:	2301      	movs	r3, #1
 8003992:	e063      	b.n	8003a5c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800399a:	f001 fb75 	bl	8005088 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	e05c      	b.n	8003a5c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 ffbb 	bl	8004928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039b2:	2301      	movs	r3, #1
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039b6:	f001 fb67 	bl	8005088 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ba:	f000 fd73 	bl	80044a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039be:	f001 fb35 	bl	800502c <vPortEnterCritical>
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ce:	d103      	bne.n	80039d8 <xQueueGenericSend+0x164>
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e4:	d103      	bne.n	80039ee <xQueueGenericSend+0x17a>
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ee:	f001 fb4b 	bl	8005088 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039f2:	1d3a      	adds	r2, r7, #4
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 ffaa 	bl	8004954 <xTaskCheckForTimeOut>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d124      	bne.n	8003a50 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a08:	f000 fb13 	bl	8004032 <prvIsQueueFull>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d018      	beq.n	8003a44 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	3310      	adds	r3, #16
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fefe 	bl	800481c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a22:	f000 fa9e 	bl	8003f62 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a26:	f000 fd4b 	bl	80044c0 <xTaskResumeAll>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f47f af7c 	bne.w	800392a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <xQueueGenericSend+0x1f0>)
 8003a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	e772      	b.n	800392a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a46:	f000 fa8c 	bl	8003f62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a4a:	f000 fd39 	bl	80044c0 <xTaskResumeAll>
 8003a4e:	e76c      	b.n	800392a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a52:	f000 fa86 	bl	8003f62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a56:	f000 fd33 	bl	80044c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3738      	adds	r7, #56	; 0x38
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	; 0x38
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <xQueueGenericSendFromISR+0x2c>
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	e7fe      	b.n	8003a92 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <xQueueGenericSendFromISR+0x3a>
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <xQueueGenericSendFromISR+0x3e>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericSendFromISR+0x40>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <xQueueGenericSendFromISR+0x58>
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	623b      	str	r3, [r7, #32]
 8003abe:	e7fe      	b.n	8003abe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d103      	bne.n	8003ace <xQueueGenericSendFromISR+0x66>
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <xQueueGenericSendFromISR+0x6a>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <xQueueGenericSendFromISR+0x6c>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <xQueueGenericSendFromISR+0x84>
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e7fe      	b.n	8003aea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003aec:	f001 fb7a 	bl	80051e4 <vPortValidateInterruptPriority>
	__asm volatile
 8003af0:	f3ef 8211 	mrs	r2, BASEPRI
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	61ba      	str	r2, [r7, #24]
 8003b06:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003b08:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <xQueueGenericSendFromISR+0xb6>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d12c      	bne.n	8003b78 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b2e:	f000 f988 	bl	8003e42 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b32:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b3a:	d112      	bne.n	8003b62 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d016      	beq.n	8003b72 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	3324      	adds	r3, #36	; 0x24
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fe8b 	bl	8004864 <xTaskRemoveFromEventList>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00b      	beq.n	8003b72 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e007      	b.n	8003b72 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b66:	3301      	adds	r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	b25a      	sxtb	r2, r3
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b72:	2301      	movs	r3, #1
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003b76:	e001      	b.n	8003b7c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3738      	adds	r7, #56	; 0x38
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08c      	sub	sp, #48	; 0x30
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <xQueueReceive+0x2e>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	e7fe      	b.n	8003bbc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <xQueueReceive+0x3c>
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <xQueueReceive+0x40>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <xQueueReceive+0x42>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <xQueueReceive+0x5a>
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e7fe      	b.n	8003be8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bea:	f000 fff1 	bl	8004bd0 <xTaskGetSchedulerState>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <xQueueReceive+0x6a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <xQueueReceive+0x6e>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <xQueueReceive+0x70>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <xQueueReceive+0x88>
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e7fe      	b.n	8003c16 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c18:	f001 fa08 	bl	800502c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01f      	beq.n	8003c68 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c2c:	f000 f973 	bl	8003f16 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	1e5a      	subs	r2, r3, #1
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00f      	beq.n	8003c60 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	3310      	adds	r3, #16
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fe0d 	bl	8004864 <xTaskRemoveFromEventList>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c50:	4b3c      	ldr	r3, [pc, #240]	; (8003d44 <xQueueReceive+0x1b4>)
 8003c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c60:	f001 fa12 	bl	8005088 <vPortExitCritical>
				return pdPASS;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e069      	b.n	8003d3c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c6e:	f001 fa0b 	bl	8005088 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e062      	b.n	8003d3c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c7c:	f107 0310 	add.w	r3, r7, #16
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fe51 	bl	8004928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c86:	2301      	movs	r3, #1
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c8a:	f001 f9fd 	bl	8005088 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c8e:	f000 fc09 	bl	80044a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c92:	f001 f9cb 	bl	800502c <vPortEnterCritical>
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c9c:	b25b      	sxtb	r3, r3
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca2:	d103      	bne.n	8003cac <xQueueReceive+0x11c>
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb8:	d103      	bne.n	8003cc2 <xQueueReceive+0x132>
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cc2:	f001 f9e1 	bl	8005088 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cc6:	1d3a      	adds	r2, r7, #4
 8003cc8:	f107 0310 	add.w	r3, r7, #16
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fe40 	bl	8004954 <xTaskCheckForTimeOut>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d123      	bne.n	8003d22 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cdc:	f000 f993 	bl	8004006 <prvIsQueueEmpty>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d017      	beq.n	8003d16 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	3324      	adds	r3, #36	; 0x24
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fd94 	bl	800481c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf6:	f000 f934 	bl	8003f62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cfa:	f000 fbe1 	bl	80044c0 <xTaskResumeAll>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d189      	bne.n	8003c18 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <xQueueReceive+0x1b4>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	e780      	b.n	8003c18 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d18:	f000 f923 	bl	8003f62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d1c:	f000 fbd0 	bl	80044c0 <xTaskResumeAll>
 8003d20:	e77a      	b.n	8003c18 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d24:	f000 f91d 	bl	8003f62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d28:	f000 fbca 	bl	80044c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d2e:	f000 f96a 	bl	8004006 <prvIsQueueEmpty>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f43f af6f 	beq.w	8003c18 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3730      	adds	r7, #48	; 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08e      	sub	sp, #56	; 0x38
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <xQueueReceiveFromISR+0x2a>
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	e7fe      	b.n	8003d70 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d103      	bne.n	8003d80 <xQueueReceiveFromISR+0x38>
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <xQueueReceiveFromISR+0x3c>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <xQueueReceiveFromISR+0x3e>
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <xQueueReceiveFromISR+0x56>
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e7fe      	b.n	8003d9c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d9e:	f001 fa21 	bl	80051e4 <vPortValidateInterruptPriority>
	__asm volatile
 8003da2:	f3ef 8211 	mrs	r2, BASEPRI
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	61ba      	str	r2, [r7, #24]
 8003db8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003dba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d02f      	beq.n	8003e2a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dd8:	f000 f89d 	bl	8003f16 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	1e5a      	subs	r2, r3, #1
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dec:	d112      	bne.n	8003e14 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d016      	beq.n	8003e24 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	3310      	adds	r3, #16
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fd32 	bl	8004864 <xTaskRemoveFromEventList>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00e      	beq.n	8003e24 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e007      	b.n	8003e24 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e18:	3301      	adds	r3, #1
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	b25a      	sxtb	r2, r3
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003e24:	2301      	movs	r3, #1
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
 8003e28:	e001      	b.n	8003e2e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3738      	adds	r7, #56	; 0x38
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10d      	bne.n	8003e7c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d14d      	bne.n	8003f04 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fecd 	bl	8004c0c <xTaskPriorityDisinherit>
 8003e72:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	e043      	b.n	8003f04 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d119      	bne.n	8003eb6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6858      	ldr	r0, [r3, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	f001 fbe1 	bl	8005654 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	441a      	add	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d32b      	bcc.n	8003f04 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	e026      	b.n	8003f04 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	68d8      	ldr	r0, [r3, #12]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	f001 fbc7 	bl	8005654 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	425b      	negs	r3, r3
 8003ed0:	441a      	add	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d207      	bcs.n	8003ef2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	425b      	negs	r3, r3
 8003eec:	441a      	add	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d105      	bne.n	8003f04 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f0c:	697b      	ldr	r3, [r7, #20]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d018      	beq.n	8003f5a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	441a      	add	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d303      	bcc.n	8003f4a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68d9      	ldr	r1, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	461a      	mov	r2, r3
 8003f54:	6838      	ldr	r0, [r7, #0]
 8003f56:	f001 fb7d 	bl	8005654 <memcpy>
	}
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f6a:	f001 f85f 	bl	800502c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f74:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f76:	e011      	b.n	8003f9c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d012      	beq.n	8003fa6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3324      	adds	r3, #36	; 0x24
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fc6d 	bl	8004864 <xTaskRemoveFromEventList>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f90:	f000 fd40 	bl	8004a14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	dce9      	bgt.n	8003f78 <prvUnlockQueue+0x16>
 8003fa4:	e000      	b.n	8003fa8 <prvUnlockQueue+0x46>
					break;
 8003fa6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	22ff      	movs	r2, #255	; 0xff
 8003fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fb0:	f001 f86a 	bl	8005088 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fb4:	f001 f83a 	bl	800502c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fbe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fc0:	e011      	b.n	8003fe6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d012      	beq.n	8003ff0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3310      	adds	r3, #16
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fc48 	bl	8004864 <xTaskRemoveFromEventList>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fda:	f000 fd1b 	bl	8004a14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fde:	7bbb      	ldrb	r3, [r7, #14]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	dce9      	bgt.n	8003fc2 <prvUnlockQueue+0x60>
 8003fee:	e000      	b.n	8003ff2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ff0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	22ff      	movs	r2, #255	; 0xff
 8003ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ffa:	f001 f845 	bl	8005088 <vPortExitCritical>
}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800400e:	f001 f80d 	bl	800502c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800401a:	2301      	movs	r3, #1
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	e001      	b.n	8004024 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004024:	f001 f830 	bl	8005088 <vPortExitCritical>

	return xReturn;
 8004028:	68fb      	ldr	r3, [r7, #12]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800403a:	f000 fff7 	bl	800502c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	429a      	cmp	r2, r3
 8004048:	d102      	bne.n	8004050 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800404a:	2301      	movs	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e001      	b.n	8004054 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004054:	f001 f818 	bl	8005088 <vPortExitCritical>

	return xReturn;
 8004058:	68fb      	ldr	r3, [r7, #12]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004062:	b580      	push	{r7, lr}
 8004064:	b08e      	sub	sp, #56	; 0x38
 8004066:	af04      	add	r7, sp, #16
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <xTaskCreateStatic+0x28>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	623b      	str	r3, [r7, #32]
 8004088:	e7fe      	b.n	8004088 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <xTaskCreateStatic+0x42>
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	e7fe      	b.n	80040a2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040a4:	2354      	movs	r3, #84	; 0x54
 80040a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b54      	cmp	r3, #84	; 0x54
 80040ac:	d009      	beq.n	80040c2 <xTaskCreateStatic+0x60>
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	e7fe      	b.n	80040c0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01e      	beq.n	8004108 <xTaskCreateStatic+0xa6>
 80040ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01b      	beq.n	8004108 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	2202      	movs	r2, #2
 80040de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040e2:	2300      	movs	r3, #0
 80040e4:	9303      	str	r3, [sp, #12]
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	9302      	str	r3, [sp, #8]
 80040ea:	f107 0314 	add.w	r3, r7, #20
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f850 	bl	80041a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004102:	f000 f8d3 	bl	80042ac <prvAddNewTaskToReadyList>
 8004106:	e001      	b.n	800410c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800410c:	697b      	ldr	r3, [r7, #20]
	}
 800410e:	4618      	mov	r0, r3
 8004110:	3728      	adds	r7, #40	; 0x28
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004116:	b580      	push	{r7, lr}
 8004118:	b08c      	sub	sp, #48	; 0x30
 800411a:	af04      	add	r7, sp, #16
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4618      	mov	r0, r3
 800412c:	f001 f898 	bl	8005260 <pvPortMalloc>
 8004130:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004138:	2054      	movs	r0, #84	; 0x54
 800413a:	f001 f891 	bl	8005260 <pvPortMalloc>
 800413e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
 800414c:	e005      	b.n	800415a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800414e:	6978      	ldr	r0, [r7, #20]
 8004150:	f001 f948 	bl	80053e4 <vPortFree>
 8004154:	e001      	b.n	800415a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d017      	beq.n	8004190 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004168:	88fa      	ldrh	r2, [r7, #6]
 800416a:	2300      	movs	r3, #0
 800416c:	9303      	str	r3, [sp, #12]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	9302      	str	r3, [sp, #8]
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f80e 	bl	80041a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004184:	69f8      	ldr	r0, [r7, #28]
 8004186:	f000 f891 	bl	80042ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e002      	b.n	8004196 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004194:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004196:	69bb      	ldr	r3, [r7, #24]
	}
 8004198:	4618      	mov	r0, r3
 800419a:	3720      	adds	r7, #32
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041b8:	3b01      	subs	r3, #1
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f023 0307 	bic.w	r3, r3, #7
 80041c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <prvInitialiseNewTask+0x46>
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	e7fe      	b.n	80041e4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01f      	beq.n	800422c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	e012      	b.n	8004218 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	7819      	ldrb	r1, [r3, #0]
 80041fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	4413      	add	r3, r2
 8004200:	3334      	adds	r3, #52	; 0x34
 8004202:	460a      	mov	r2, r1
 8004204:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3301      	adds	r3, #1
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b0f      	cmp	r3, #15
 800421c:	d9e9      	bls.n	80041f2 <prvInitialiseNewTask+0x52>
 800421e:	e000      	b.n	8004222 <prvInitialiseNewTask+0x82>
			{
				break;
 8004220:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800422a:	e003      	b.n	8004234 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	2b06      	cmp	r3, #6
 8004238:	d901      	bls.n	800423e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800423a:	2306      	movs	r3, #6
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	2200      	movs	r2, #0
 800424e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	3304      	adds	r3, #4
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff f93e 	bl	80034d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	3318      	adds	r3, #24
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff f939 	bl	80034d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004268:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	f1c3 0207 	rsb	r2, r3, #7
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004278:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	2200      	movs	r2, #0
 800427e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	68f9      	ldr	r1, [r7, #12]
 800428c:	69b8      	ldr	r0, [r7, #24]
 800428e:	f000 fda7 	bl	8004de0 <pxPortInitialiseStack>
 8004292:	4602      	mov	r2, r0
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042a4:	bf00      	nop
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042b4:	f000 feba 	bl	800502c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042b8:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <prvAddNewTaskToReadyList+0xb8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	4a29      	ldr	r2, [pc, #164]	; (8004364 <prvAddNewTaskToReadyList+0xb8>)
 80042c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042c2:	4b29      	ldr	r3, [pc, #164]	; (8004368 <prvAddNewTaskToReadyList+0xbc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042ca:	4a27      	ldr	r2, [pc, #156]	; (8004368 <prvAddNewTaskToReadyList+0xbc>)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042d0:	4b24      	ldr	r3, [pc, #144]	; (8004364 <prvAddNewTaskToReadyList+0xb8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d110      	bne.n	80042fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042d8:	f000 fbc0 	bl	8004a5c <prvInitialiseTaskLists>
 80042dc:	e00d      	b.n	80042fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <prvAddNewTaskToReadyList+0xc0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <prvAddNewTaskToReadyList+0xbc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d802      	bhi.n	80042fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042f4:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <prvAddNewTaskToReadyList+0xbc>)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042fa:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <prvAddNewTaskToReadyList+0xc4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3301      	adds	r3, #1
 8004300:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <prvAddNewTaskToReadyList+0xc4>)
 8004302:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	2201      	movs	r2, #1
 800430a:	409a      	lsls	r2, r3
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <prvAddNewTaskToReadyList+0xc8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4313      	orrs	r3, r2
 8004312:	4a18      	ldr	r2, [pc, #96]	; (8004374 <prvAddNewTaskToReadyList+0xc8>)
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4a15      	ldr	r2, [pc, #84]	; (8004378 <prvAddNewTaskToReadyList+0xcc>)
 8004324:	441a      	add	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f7ff f8df 	bl	80034f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004332:	f000 fea9 	bl	8005088 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <prvAddNewTaskToReadyList+0xc0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00e      	beq.n	800435c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <prvAddNewTaskToReadyList+0xbc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	429a      	cmp	r2, r3
 800434a:	d207      	bcs.n	800435c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <prvAddNewTaskToReadyList+0xd0>)
 800434e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000380 	.word	0x20000380
 8004368:	20000280 	.word	0x20000280
 800436c:	2000038c 	.word	0x2000038c
 8004370:	2000039c 	.word	0x2000039c
 8004374:	20000388 	.word	0x20000388
 8004378:	20000284 	.word	0x20000284
 800437c:	e000ed04 	.word	0xe000ed04

08004380 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004392:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <vTaskDelay+0x60>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <vTaskDelay+0x2e>
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	e7fe      	b.n	80043ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80043ae:	f000 f879 	bl	80044a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043b2:	2100      	movs	r1, #0
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fcad 	bl	8004d14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043ba:	f000 f881 	bl	80044c0 <xTaskResumeAll>
 80043be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d107      	bne.n	80043d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80043c6:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <vTaskDelay+0x64>)
 80043c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	200003a8 	.word	0x200003a8
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	; 0x28
 80043ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043f6:	463a      	mov	r2, r7
 80043f8:	1d39      	adds	r1, r7, #4
 80043fa:	f107 0308 	add.w	r3, r7, #8
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc f886 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	9202      	str	r2, [sp, #8]
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	2300      	movs	r3, #0
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	2300      	movs	r3, #0
 8004414:	460a      	mov	r2, r1
 8004416:	491d      	ldr	r1, [pc, #116]	; (800448c <vTaskStartScheduler+0xa4>)
 8004418:	481d      	ldr	r0, [pc, #116]	; (8004490 <vTaskStartScheduler+0xa8>)
 800441a:	f7ff fe22 	bl	8004062 <xTaskCreateStatic>
 800441e:	4602      	mov	r2, r0
 8004420:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <vTaskStartScheduler+0xac>)
 8004422:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004424:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <vTaskStartScheduler+0xac>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800442c:	2301      	movs	r3, #1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	e001      	b.n	8004436 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d115      	bne.n	8004468 <vTaskStartScheduler+0x80>
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <vTaskStartScheduler+0xb0>)
 8004450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004454:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004456:	4b11      	ldr	r3, [pc, #68]	; (800449c <vTaskStartScheduler+0xb4>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800445c:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <vTaskStartScheduler+0xb8>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004462:	f000 fd45 	bl	8004ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004466:	e00d      	b.n	8004484 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800446e:	d109      	bne.n	8004484 <vTaskStartScheduler+0x9c>
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e7fe      	b.n	8004482 <vTaskStartScheduler+0x9a>
}
 8004484:	bf00      	nop
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	08005744 	.word	0x08005744
 8004490:	08004a2d 	.word	0x08004a2d
 8004494:	200003a4 	.word	0x200003a4
 8004498:	200003a0 	.word	0x200003a0
 800449c:	2000038c 	.word	0x2000038c
 80044a0:	20000384 	.word	0x20000384

080044a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <vTaskSuspendAll+0x18>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a03      	ldr	r2, [pc, #12]	; (80044bc <vTaskSuspendAll+0x18>)
 80044b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80044b2:	bf00      	nop
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	200003a8 	.word	0x200003a8

080044c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044ce:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <xTaskResumeAll+0x114>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <xTaskResumeAll+0x2a>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	e7fe      	b.n	80044e8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044ea:	f000 fd9f 	bl	800502c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044ee:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <xTaskResumeAll+0x114>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	4a37      	ldr	r2, [pc, #220]	; (80045d4 <xTaskResumeAll+0x114>)
 80044f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f8:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <xTaskResumeAll+0x114>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d161      	bne.n	80045c4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004500:	4b35      	ldr	r3, [pc, #212]	; (80045d8 <xTaskResumeAll+0x118>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d05d      	beq.n	80045c4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004508:	e02e      	b.n	8004568 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800450a:	4b34      	ldr	r3, [pc, #208]	; (80045dc <xTaskResumeAll+0x11c>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3318      	adds	r3, #24
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff f847 	bl	80035aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3304      	adds	r3, #4
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff f842 	bl	80035aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	2201      	movs	r2, #1
 800452c:	409a      	lsls	r2, r3
 800452e:	4b2c      	ldr	r3, [pc, #176]	; (80045e0 <xTaskResumeAll+0x120>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4313      	orrs	r3, r2
 8004534:	4a2a      	ldr	r2, [pc, #168]	; (80045e0 <xTaskResumeAll+0x120>)
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4a27      	ldr	r2, [pc, #156]	; (80045e4 <xTaskResumeAll+0x124>)
 8004546:	441a      	add	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3304      	adds	r3, #4
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f7fe ffce 	bl	80034f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <xTaskResumeAll+0x128>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <xTaskResumeAll+0x12c>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004568:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <xTaskResumeAll+0x11c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1cc      	bne.n	800450a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004576:	f000 fb0b 	bl	8004b90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800457a:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <xTaskResumeAll+0x130>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004586:	f000 f837 	bl	80045f8 <xTaskIncrementTick>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004590:	4b16      	ldr	r3, [pc, #88]	; (80045ec <xTaskResumeAll+0x12c>)
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3b01      	subs	r3, #1
 800459a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f1      	bne.n	8004586 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80045a2:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <xTaskResumeAll+0x130>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045a8:	4b10      	ldr	r3, [pc, #64]	; (80045ec <xTaskResumeAll+0x12c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045b0:	2301      	movs	r3, #1
 80045b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <xTaskResumeAll+0x134>)
 80045b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045c4:	f000 fd60 	bl	8005088 <vPortExitCritical>

	return xAlreadyYielded;
 80045c8:	68bb      	ldr	r3, [r7, #8]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200003a8 	.word	0x200003a8
 80045d8:	20000380 	.word	0x20000380
 80045dc:	20000340 	.word	0x20000340
 80045e0:	20000388 	.word	0x20000388
 80045e4:	20000284 	.word	0x20000284
 80045e8:	20000280 	.word	0x20000280
 80045ec:	20000394 	.word	0x20000394
 80045f0:	20000390 	.word	0x20000390
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004602:	4b4e      	ldr	r3, [pc, #312]	; (800473c <xTaskIncrementTick+0x144>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 8087 	bne.w	800471a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800460c:	4b4c      	ldr	r3, [pc, #304]	; (8004740 <xTaskIncrementTick+0x148>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3301      	adds	r3, #1
 8004612:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004614:	4a4a      	ldr	r2, [pc, #296]	; (8004740 <xTaskIncrementTick+0x148>)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11f      	bne.n	8004660 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004620:	4b48      	ldr	r3, [pc, #288]	; (8004744 <xTaskIncrementTick+0x14c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <xTaskIncrementTick+0x46>
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	e7fe      	b.n	800463c <xTaskIncrementTick+0x44>
 800463e:	4b41      	ldr	r3, [pc, #260]	; (8004744 <xTaskIncrementTick+0x14c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	4b40      	ldr	r3, [pc, #256]	; (8004748 <xTaskIncrementTick+0x150>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a3e      	ldr	r2, [pc, #248]	; (8004744 <xTaskIncrementTick+0x14c>)
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	4a3e      	ldr	r2, [pc, #248]	; (8004748 <xTaskIncrementTick+0x150>)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	4b3e      	ldr	r3, [pc, #248]	; (800474c <xTaskIncrementTick+0x154>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	4a3c      	ldr	r2, [pc, #240]	; (800474c <xTaskIncrementTick+0x154>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	f000 fa98 	bl	8004b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004660:	4b3b      	ldr	r3, [pc, #236]	; (8004750 <xTaskIncrementTick+0x158>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	429a      	cmp	r2, r3
 8004668:	d348      	bcc.n	80046fc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800466a:	4b36      	ldr	r3, [pc, #216]	; (8004744 <xTaskIncrementTick+0x14c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004674:	4b36      	ldr	r3, [pc, #216]	; (8004750 <xTaskIncrementTick+0x158>)
 8004676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800467a:	601a      	str	r2, [r3, #0]
					break;
 800467c:	e03e      	b.n	80046fc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800467e:	4b31      	ldr	r3, [pc, #196]	; (8004744 <xTaskIncrementTick+0x14c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	429a      	cmp	r2, r3
 8004694:	d203      	bcs.n	800469e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004696:	4a2e      	ldr	r2, [pc, #184]	; (8004750 <xTaskIncrementTick+0x158>)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800469c:	e02e      	b.n	80046fc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe ff81 	bl	80035aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	3318      	adds	r3, #24
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe ff78 	bl	80035aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	2201      	movs	r2, #1
 80046c0:	409a      	lsls	r2, r3
 80046c2:	4b24      	ldr	r3, [pc, #144]	; (8004754 <xTaskIncrementTick+0x15c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	4a22      	ldr	r2, [pc, #136]	; (8004754 <xTaskIncrementTick+0x15c>)
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <xTaskIncrementTick+0x160>)
 80046da:	441a      	add	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f7fe ff04 	bl	80034f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <xTaskIncrementTick+0x164>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d3b9      	bcc.n	800466a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046fa:	e7b6      	b.n	800466a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046fc:	4b17      	ldr	r3, [pc, #92]	; (800475c <xTaskIncrementTick+0x164>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004702:	4915      	ldr	r1, [pc, #84]	; (8004758 <xTaskIncrementTick+0x160>)
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d907      	bls.n	8004724 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e004      	b.n	8004724 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <xTaskIncrementTick+0x168>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	4a0f      	ldr	r2, [pc, #60]	; (8004760 <xTaskIncrementTick+0x168>)
 8004722:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <xTaskIncrementTick+0x16c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800472c:	2301      	movs	r3, #1
 800472e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004730:	697b      	ldr	r3, [r7, #20]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	200003a8 	.word	0x200003a8
 8004740:	20000384 	.word	0x20000384
 8004744:	20000338 	.word	0x20000338
 8004748:	2000033c 	.word	0x2000033c
 800474c:	20000398 	.word	0x20000398
 8004750:	200003a0 	.word	0x200003a0
 8004754:	20000388 	.word	0x20000388
 8004758:	20000284 	.word	0x20000284
 800475c:	20000280 	.word	0x20000280
 8004760:	20000390 	.word	0x20000390
 8004764:	20000394 	.word	0x20000394

08004768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800476e:	4b26      	ldr	r3, [pc, #152]	; (8004808 <vTaskSwitchContext+0xa0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004776:	4b25      	ldr	r3, [pc, #148]	; (800480c <vTaskSwitchContext+0xa4>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800477c:	e03e      	b.n	80047fc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <vTaskSwitchContext+0xa4>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004784:	4b22      	ldr	r3, [pc, #136]	; (8004810 <vTaskSwitchContext+0xa8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	fab3 f383 	clz	r3, r3
 8004790:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004792:	7afb      	ldrb	r3, [r7, #11]
 8004794:	f1c3 031f 	rsb	r3, r3, #31
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	491e      	ldr	r1, [pc, #120]	; (8004814 <vTaskSwitchContext+0xac>)
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	607b      	str	r3, [r7, #4]
 80047c0:	e7fe      	b.n	80047c0 <vTaskSwitchContext+0x58>
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4a11      	ldr	r2, [pc, #68]	; (8004814 <vTaskSwitchContext+0xac>)
 80047ce:	4413      	add	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	3308      	adds	r3, #8
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d104      	bne.n	80047f2 <vTaskSwitchContext+0x8a>
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a07      	ldr	r2, [pc, #28]	; (8004818 <vTaskSwitchContext+0xb0>)
 80047fa:	6013      	str	r3, [r2, #0]
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	200003a8 	.word	0x200003a8
 800480c:	20000394 	.word	0x20000394
 8004810:	20000388 	.word	0x20000388
 8004814:	20000284 	.word	0x20000284
 8004818:	20000280 	.word	0x20000280

0800481c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <vTaskPlaceOnEventList+0x24>
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e7fe      	b.n	800483e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <vTaskPlaceOnEventList+0x44>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3318      	adds	r3, #24
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7fe fe75 	bl	8003538 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800484e:	2101      	movs	r1, #1
 8004850:	6838      	ldr	r0, [r7, #0]
 8004852:	f000 fa5f 	bl	8004d14 <prvAddCurrentTaskToDelayedList>
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000280 	.word	0x20000280

08004864 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <xTaskRemoveFromEventList+0x2a>
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e7fe      	b.n	800488c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	3318      	adds	r3, #24
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fe89 	bl	80035aa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004898:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <xTaskRemoveFromEventList+0xac>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11c      	bne.n	80048da <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fe80 	bl	80035aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	2201      	movs	r2, #1
 80048b0:	409a      	lsls	r2, r3
 80048b2:	4b18      	ldr	r3, [pc, #96]	; (8004914 <xTaskRemoveFromEventList+0xb0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	4a16      	ldr	r2, [pc, #88]	; (8004914 <xTaskRemoveFromEventList+0xb0>)
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4a13      	ldr	r2, [pc, #76]	; (8004918 <xTaskRemoveFromEventList+0xb4>)
 80048ca:	441a      	add	r2, r3
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f7fe fe0c 	bl	80034f0 <vListInsertEnd>
 80048d8:	e005      	b.n	80048e6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3318      	adds	r3, #24
 80048de:	4619      	mov	r1, r3
 80048e0:	480e      	ldr	r0, [pc, #56]	; (800491c <xTaskRemoveFromEventList+0xb8>)
 80048e2:	f7fe fe05 	bl	80034f0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <xTaskRemoveFromEventList+0xbc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d905      	bls.n	8004900 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048f4:	2301      	movs	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <xTaskRemoveFromEventList+0xc0>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e001      	b.n	8004904 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004904:	697b      	ldr	r3, [r7, #20]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200003a8 	.word	0x200003a8
 8004914:	20000388 	.word	0x20000388
 8004918:	20000284 	.word	0x20000284
 800491c:	20000340 	.word	0x20000340
 8004920:	20000280 	.word	0x20000280
 8004924:	20000394 	.word	0x20000394

08004928 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <vTaskInternalSetTimeOutState+0x24>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <vTaskInternalSetTimeOutState+0x28>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	605a      	str	r2, [r3, #4]
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	20000398 	.word	0x20000398
 8004950:	20000384 	.word	0x20000384

08004954 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <xTaskCheckForTimeOut+0x24>
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	e7fe      	b.n	8004976 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <xTaskCheckForTimeOut+0x3e>
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e7fe      	b.n	8004990 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004992:	f000 fb4b 	bl	800502c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <xTaskCheckForTimeOut+0xb8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ae:	d102      	bne.n	80049b6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	e023      	b.n	80049fe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <xTaskCheckForTimeOut+0xbc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d007      	beq.n	80049d2 <xTaskCheckForTimeOut+0x7e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d302      	bcc.n	80049d2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	e015      	b.n	80049fe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d20b      	bcs.n	80049f4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad2      	subs	r2, r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff9d 	bl	8004928 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	e004      	b.n	80049fe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049fe:	f000 fb43 	bl	8005088 <vPortExitCritical>

	return xReturn;
 8004a02:	69fb      	ldr	r3, [r7, #28]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000384 	.word	0x20000384
 8004a10:	20000398 	.word	0x20000398

08004a14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <vTaskMissedYield+0x14>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000394 	.word	0x20000394

08004a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a34:	f000 f852 	bl	8004adc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <prvIdleTask+0x28>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d9f9      	bls.n	8004a34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <prvIdleTask+0x2c>)
 8004a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a50:	e7f0      	b.n	8004a34 <prvIdleTask+0x8>
 8004a52:	bf00      	nop
 8004a54:	20000284 	.word	0x20000284
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	e00c      	b.n	8004a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4a12      	ldr	r2, [pc, #72]	; (8004abc <prvInitialiseTaskLists+0x60>)
 8004a74:	4413      	add	r3, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fd0d 	bl	8003496 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b06      	cmp	r3, #6
 8004a86:	d9ef      	bls.n	8004a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a88:	480d      	ldr	r0, [pc, #52]	; (8004ac0 <prvInitialiseTaskLists+0x64>)
 8004a8a:	f7fe fd04 	bl	8003496 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a8e:	480d      	ldr	r0, [pc, #52]	; (8004ac4 <prvInitialiseTaskLists+0x68>)
 8004a90:	f7fe fd01 	bl	8003496 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a94:	480c      	ldr	r0, [pc, #48]	; (8004ac8 <prvInitialiseTaskLists+0x6c>)
 8004a96:	f7fe fcfe 	bl	8003496 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a9a:	480c      	ldr	r0, [pc, #48]	; (8004acc <prvInitialiseTaskLists+0x70>)
 8004a9c:	f7fe fcfb 	bl	8003496 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004aa0:	480b      	ldr	r0, [pc, #44]	; (8004ad0 <prvInitialiseTaskLists+0x74>)
 8004aa2:	f7fe fcf8 	bl	8003496 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <prvInitialiseTaskLists+0x78>)
 8004aa8:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <prvInitialiseTaskLists+0x64>)
 8004aaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <prvInitialiseTaskLists+0x7c>)
 8004aae:	4a05      	ldr	r2, [pc, #20]	; (8004ac4 <prvInitialiseTaskLists+0x68>)
 8004ab0:	601a      	str	r2, [r3, #0]
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000284 	.word	0x20000284
 8004ac0:	20000310 	.word	0x20000310
 8004ac4:	20000324 	.word	0x20000324
 8004ac8:	20000340 	.word	0x20000340
 8004acc:	20000354 	.word	0x20000354
 8004ad0:	2000036c 	.word	0x2000036c
 8004ad4:	20000338 	.word	0x20000338
 8004ad8:	2000033c 	.word	0x2000033c

08004adc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ae2:	e019      	b.n	8004b18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ae4:	f000 faa2 	bl	800502c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <prvCheckTasksWaitingTermination+0x4c>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe fd58 	bl	80035aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004afa:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <prvCheckTasksWaitingTermination+0x50>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <prvCheckTasksWaitingTermination+0x50>)
 8004b02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b04:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <prvCheckTasksWaitingTermination+0x54>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <prvCheckTasksWaitingTermination+0x54>)
 8004b0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b0e:	f000 fabb 	bl	8005088 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f80e 	bl	8004b34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b18:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <prvCheckTasksWaitingTermination+0x54>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e1      	bne.n	8004ae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000354 	.word	0x20000354
 8004b2c:	20000380 	.word	0x20000380
 8004b30:	20000368 	.word	0x20000368

08004b34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fc4a 	bl	80053e4 <vPortFree>
				vPortFree( pxTCB );
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fc47 	bl	80053e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b56:	e017      	b.n	8004b88 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d103      	bne.n	8004b6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fc3e 	bl	80053e4 <vPortFree>
	}
 8004b68:	e00e      	b.n	8004b88 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d009      	beq.n	8004b88 <prvDeleteTCB+0x54>
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	e7fe      	b.n	8004b86 <prvDeleteTCB+0x52>
	}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <prvResetNextTaskUnblockTime+0x38>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <prvResetNextTaskUnblockTime+0x3c>)
 8004ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ba8:	e008      	b.n	8004bbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <prvResetNextTaskUnblockTime+0x38>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a04      	ldr	r2, [pc, #16]	; (8004bcc <prvResetNextTaskUnblockTime+0x3c>)
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	20000338 	.word	0x20000338
 8004bcc:	200003a0 	.word	0x200003a0

08004bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <xTaskGetSchedulerState+0x34>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bde:	2301      	movs	r3, #1
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	e008      	b.n	8004bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be4:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <xTaskGetSchedulerState+0x38>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bec:	2302      	movs	r3, #2
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	e001      	b.n	8004bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bf6:	687b      	ldr	r3, [r7, #4]
	}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	2000038c 	.word	0x2000038c
 8004c08:	200003a8 	.word	0x200003a8

08004c0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d06c      	beq.n	8004cfc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c22:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <xTaskPriorityDisinherit+0xfc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d009      	beq.n	8004c40 <xTaskPriorityDisinherit+0x34>
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e7fe      	b.n	8004c3e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <xTaskPriorityDisinherit+0x50>
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	e7fe      	b.n	8004c5a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c60:	1e5a      	subs	r2, r3, #1
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d044      	beq.n	8004cfc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d140      	bne.n	8004cfc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe fc93 	bl	80035aa <uxListRemove>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d115      	bne.n	8004cb6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8e:	491f      	ldr	r1, [pc, #124]	; (8004d0c <xTaskPriorityDisinherit+0x100>)
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <xTaskPriorityDisinherit+0xaa>
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43da      	mvns	r2, r3
 8004cac:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <xTaskPriorityDisinherit+0x104>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <xTaskPriorityDisinherit+0x104>)
 8004cb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	f1c3 0207 	rsb	r2, r3, #7
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	2201      	movs	r2, #1
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <xTaskPriorityDisinherit+0x104>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	4a0d      	ldr	r2, [pc, #52]	; (8004d10 <xTaskPriorityDisinherit+0x104>)
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <xTaskPriorityDisinherit+0x100>)
 8004cea:	441a      	add	r2, r3
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f7fe fbfc 	bl	80034f0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cfc:	697b      	ldr	r3, [r7, #20]
	}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000280 	.word	0x20000280
 8004d0c:	20000284 	.word	0x20000284
 8004d10:	20000388 	.word	0x20000388

08004d14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d1e:	4b29      	ldr	r3, [pc, #164]	; (8004dc4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d24:	4b28      	ldr	r3, [pc, #160]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fc3d 	bl	80035aa <uxListRemove>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10b      	bne.n	8004d4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43da      	mvns	r2, r3
 8004d44:	4b21      	ldr	r3, [pc, #132]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d54:	d10a      	bne.n	8004d6c <prvAddCurrentTaskToDelayedList+0x58>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	481a      	ldr	r0, [pc, #104]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d66:	f7fe fbc3 	bl	80034f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d6a:	e026      	b.n	8004dba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d74:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d209      	bcs.n	8004d98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d84:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fe fbd1 	bl	8003538 <vListInsert>
}
 8004d96:	e010      	b.n	8004dba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d98:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3304      	adds	r3, #4
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f7fe fbc7 	bl	8003538 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004daa:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d202      	bcs.n	8004dba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004db4:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6013      	str	r3, [r2, #0]
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000384 	.word	0x20000384
 8004dc8:	20000280 	.word	0x20000280
 8004dcc:	20000388 	.word	0x20000388
 8004dd0:	2000036c 	.word	0x2000036c
 8004dd4:	2000033c 	.word	0x2000033c
 8004dd8:	20000338 	.word	0x20000338
 8004ddc:	200003a0 	.word	0x200003a0

08004de0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3b04      	subs	r3, #4
 8004df0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3b04      	subs	r3, #4
 8004dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f023 0201 	bic.w	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3b04      	subs	r3, #4
 8004e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e10:	4a0c      	ldr	r2, [pc, #48]	; (8004e44 <pxPortInitialiseStack+0x64>)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3b14      	subs	r3, #20
 8004e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3b04      	subs	r3, #4
 8004e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f06f 0202 	mvn.w	r2, #2
 8004e2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3b20      	subs	r3, #32
 8004e34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e36:	68fb      	ldr	r3, [r7, #12]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	08004e49 	.word	0x08004e49

08004e48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <prvTaskExitError+0x50>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e5a:	d009      	beq.n	8004e70 <prvTaskExitError+0x28>
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	e7fe      	b.n	8004e6e <prvTaskExitError+0x26>
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e82:	bf00      	nop
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0fc      	beq.n	8004e84 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	2000000c 	.word	0x2000000c
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <pxCurrentTCBConst2>)
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	6808      	ldr	r0, [r1, #0]
 8004ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	f380 8809 	msr	PSP, r0
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	4770      	bx	lr
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst2>:
 8004ec0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ec8:	4808      	ldr	r0, [pc, #32]	; (8004eec <prvPortStartFirstTask+0x24>)
 8004eca:	6800      	ldr	r0, [r0, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f380 8808 	msr	MSP, r0
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8814 	msr	CONTROL, r0
 8004eda:	b662      	cpsie	i
 8004edc:	b661      	cpsie	f
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	df00      	svc	0
 8004ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eea:	bf00      	nop
 8004eec:	e000ed08 	.word	0xe000ed08

08004ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ef6:	4b44      	ldr	r3, [pc, #272]	; (8005008 <xPortStartScheduler+0x118>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a44      	ldr	r2, [pc, #272]	; (800500c <xPortStartScheduler+0x11c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d109      	bne.n	8004f14 <xPortStartScheduler+0x24>
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	e7fe      	b.n	8004f12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f14:	4b3c      	ldr	r3, [pc, #240]	; (8005008 <xPortStartScheduler+0x118>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a3d      	ldr	r2, [pc, #244]	; (8005010 <xPortStartScheduler+0x120>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d109      	bne.n	8004f32 <xPortStartScheduler+0x42>
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e7fe      	b.n	8004f30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f32:	4b38      	ldr	r3, [pc, #224]	; (8005014 <xPortStartScheduler+0x124>)
 8004f34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	22ff      	movs	r2, #255	; 0xff
 8004f42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	4b30      	ldr	r3, [pc, #192]	; (8005018 <xPortStartScheduler+0x128>)
 8004f58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f5a:	4b30      	ldr	r3, [pc, #192]	; (800501c <xPortStartScheduler+0x12c>)
 8004f5c:	2207      	movs	r2, #7
 8004f5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f60:	e009      	b.n	8004f76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004f62:	4b2e      	ldr	r3, [pc, #184]	; (800501c <xPortStartScheduler+0x12c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	4a2c      	ldr	r2, [pc, #176]	; (800501c <xPortStartScheduler+0x12c>)
 8004f6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b80      	cmp	r3, #128	; 0x80
 8004f80:	d0ef      	beq.n	8004f62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f82:	4b26      	ldr	r3, [pc, #152]	; (800501c <xPortStartScheduler+0x12c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f1c3 0307 	rsb	r3, r3, #7
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d009      	beq.n	8004fa2 <xPortStartScheduler+0xb2>
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	e7fe      	b.n	8004fa0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fa2:	4b1e      	ldr	r3, [pc, #120]	; (800501c <xPortStartScheduler+0x12c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	4a1c      	ldr	r2, [pc, #112]	; (800501c <xPortStartScheduler+0x12c>)
 8004faa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fac:	4b1b      	ldr	r3, [pc, #108]	; (800501c <xPortStartScheduler+0x12c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fb4:	4a19      	ldr	r2, [pc, #100]	; (800501c <xPortStartScheduler+0x12c>)
 8004fb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fc0:	4b17      	ldr	r3, [pc, #92]	; (8005020 <xPortStartScheduler+0x130>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a16      	ldr	r2, [pc, #88]	; (8005020 <xPortStartScheduler+0x130>)
 8004fc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fcc:	4b14      	ldr	r3, [pc, #80]	; (8005020 <xPortStartScheduler+0x130>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <xPortStartScheduler+0x130>)
 8004fd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fd8:	f000 f8d6 	bl	8005188 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fdc:	4b11      	ldr	r3, [pc, #68]	; (8005024 <xPortStartScheduler+0x134>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fe2:	f000 f8f5 	bl	80051d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fe6:	4b10      	ldr	r3, [pc, #64]	; (8005028 <xPortStartScheduler+0x138>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a0f      	ldr	r2, [pc, #60]	; (8005028 <xPortStartScheduler+0x138>)
 8004fec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ff0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ff2:	f7ff ff69 	bl	8004ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ff6:	f7ff fbb7 	bl	8004768 <vTaskSwitchContext>
	prvTaskExitError();
 8004ffa:	f7ff ff25 	bl	8004e48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	e000ed00 	.word	0xe000ed00
 800500c:	410fc271 	.word	0x410fc271
 8005010:	410fc270 	.word	0x410fc270
 8005014:	e000e400 	.word	0xe000e400
 8005018:	200003ac 	.word	0x200003ac
 800501c:	200003b0 	.word	0x200003b0
 8005020:	e000ed20 	.word	0xe000ed20
 8005024:	2000000c 	.word	0x2000000c
 8005028:	e000ef34 	.word	0xe000ef34

0800502c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005044:	4b0e      	ldr	r3, [pc, #56]	; (8005080 <vPortEnterCritical+0x54>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3301      	adds	r3, #1
 800504a:	4a0d      	ldr	r2, [pc, #52]	; (8005080 <vPortEnterCritical+0x54>)
 800504c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <vPortEnterCritical+0x54>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d10e      	bne.n	8005074 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <vPortEnterCritical+0x58>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d009      	beq.n	8005074 <vPortEnterCritical+0x48>
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	e7fe      	b.n	8005072 <vPortEnterCritical+0x46>
	}
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	2000000c 	.word	0x2000000c
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800508e:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <vPortExitCritical+0x4c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <vPortExitCritical+0x22>
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	607b      	str	r3, [r7, #4]
 80050a8:	e7fe      	b.n	80050a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <vPortExitCritical+0x4c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <vPortExitCritical+0x4c>)
 80050b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050b4:	4b07      	ldr	r3, [pc, #28]	; (80050d4 <vPortExitCritical+0x4c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <vPortExitCritical+0x3e>
 80050bc:	2300      	movs	r3, #0
 80050be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000000c 	.word	0x2000000c
	...

080050e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050e0:	f3ef 8009 	mrs	r0, PSP
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <pxCurrentTCBConst>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	f01e 0f10 	tst.w	lr, #16
 80050f0:	bf08      	it	eq
 80050f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	6010      	str	r0, [r2, #0]
 80050fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005104:	f380 8811 	msr	BASEPRI, r0
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f7ff fb2a 	bl	8004768 <vTaskSwitchContext>
 8005114:	f04f 0000 	mov.w	r0, #0
 8005118:	f380 8811 	msr	BASEPRI, r0
 800511c:	bc09      	pop	{r0, r3}
 800511e:	6819      	ldr	r1, [r3, #0]
 8005120:	6808      	ldr	r0, [r1, #0]
 8005122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005126:	f01e 0f10 	tst.w	lr, #16
 800512a:	bf08      	it	eq
 800512c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005130:	f380 8809 	msr	PSP, r0
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	f3af 8000 	nop.w

08005140 <pxCurrentTCBConst>:
 8005140:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop

08005148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005160:	f7ff fa4a 	bl	80045f8 <xTaskIncrementTick>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <SysTick_Handler+0x3c>)
 800516c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	2300      	movs	r3, #0
 8005174:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <vPortSetupTimerInterrupt+0x34>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <vPortSetupTimerInterrupt+0x38>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <vPortSetupTimerInterrupt+0x3c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a0a      	ldr	r2, [pc, #40]	; (80051c8 <vPortSetupTimerInterrupt+0x40>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	099b      	lsrs	r3, r3, #6
 80051a4:	4a09      	ldr	r2, [pc, #36]	; (80051cc <vPortSetupTimerInterrupt+0x44>)
 80051a6:	3b01      	subs	r3, #1
 80051a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051aa:	4b04      	ldr	r3, [pc, #16]	; (80051bc <vPortSetupTimerInterrupt+0x34>)
 80051ac:	2207      	movs	r2, #7
 80051ae:	601a      	str	r2, [r3, #0]
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	e000e010 	.word	0xe000e010
 80051c0:	e000e018 	.word	0xe000e018
 80051c4:	20000000 	.word	0x20000000
 80051c8:	10624dd3 	.word	0x10624dd3
 80051cc:	e000e014 	.word	0xe000e014

080051d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051e0 <vPortEnableVFP+0x10>
 80051d4:	6801      	ldr	r1, [r0, #0]
 80051d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051da:	6001      	str	r1, [r0, #0]
 80051dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051de:	bf00      	nop
 80051e0:	e000ed88 	.word	0xe000ed88

080051e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051ea:	f3ef 8305 	mrs	r3, IPSR
 80051ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b0f      	cmp	r3, #15
 80051f4:	d913      	bls.n	800521e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051f6:	4a16      	ldr	r2, [pc, #88]	; (8005250 <vPortValidateInterruptPriority+0x6c>)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005200:	4b14      	ldr	r3, [pc, #80]	; (8005254 <vPortValidateInterruptPriority+0x70>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	7afa      	ldrb	r2, [r7, #11]
 8005206:	429a      	cmp	r2, r3
 8005208:	d209      	bcs.n	800521e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	e7fe      	b.n	800521c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800521e:	4b0e      	ldr	r3, [pc, #56]	; (8005258 <vPortValidateInterruptPriority+0x74>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005226:	4b0d      	ldr	r3, [pc, #52]	; (800525c <vPortValidateInterruptPriority+0x78>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d909      	bls.n	8005242 <vPortValidateInterruptPriority+0x5e>
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	e7fe      	b.n	8005240 <vPortValidateInterruptPriority+0x5c>
	}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	e000e3f0 	.word	0xe000e3f0
 8005254:	200003ac 	.word	0x200003ac
 8005258:	e000ed0c 	.word	0xe000ed0c
 800525c:	200003b0 	.word	0x200003b0

08005260 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	; 0x28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800526c:	f7ff f91a 	bl	80044a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005270:	4b57      	ldr	r3, [pc, #348]	; (80053d0 <pvPortMalloc+0x170>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005278:	f000 f90c 	bl	8005494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800527c:	4b55      	ldr	r3, [pc, #340]	; (80053d4 <pvPortMalloc+0x174>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4013      	ands	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	f040 808c 	bne.w	80053a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01c      	beq.n	80052ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005290:	2208      	movs	r2, #8
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4413      	add	r3, r2
 8005296:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d013      	beq.n	80052ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f023 0307 	bic.w	r3, r3, #7
 80052a8:	3308      	adds	r3, #8
 80052aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <pvPortMalloc+0x6a>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	e7fe      	b.n	80052c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d068      	beq.n	80053a2 <pvPortMalloc+0x142>
 80052d0:	4b41      	ldr	r3, [pc, #260]	; (80053d8 <pvPortMalloc+0x178>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d863      	bhi.n	80053a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052da:	4b40      	ldr	r3, [pc, #256]	; (80053dc <pvPortMalloc+0x17c>)
 80052dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052de:	4b3f      	ldr	r3, [pc, #252]	; (80053dc <pvPortMalloc+0x17c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052e4:	e004      	b.n	80052f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d903      	bls.n	8005302 <pvPortMalloc+0xa2>
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f1      	bne.n	80052e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005302:	4b33      	ldr	r3, [pc, #204]	; (80053d0 <pvPortMalloc+0x170>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005308:	429a      	cmp	r2, r3
 800530a:	d04a      	beq.n	80053a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2208      	movs	r2, #8
 8005312:	4413      	add	r3, r2
 8005314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	1ad2      	subs	r2, r2, r3
 8005326:	2308      	movs	r3, #8
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	429a      	cmp	r2, r3
 800532c:	d91e      	bls.n	800536c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800532e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4413      	add	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	2b00      	cmp	r3, #0
 800533e:	d009      	beq.n	8005354 <pvPortMalloc+0xf4>
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	e7fe      	b.n	8005352 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	1ad2      	subs	r2, r2, r3
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005366:	69b8      	ldr	r0, [r7, #24]
 8005368:	f000 f8f6 	bl	8005558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800536c:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <pvPortMalloc+0x178>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <pvPortMalloc+0x178>)
 8005378:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800537a:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <pvPortMalloc+0x178>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <pvPortMalloc+0x180>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d203      	bcs.n	800538e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <pvPortMalloc+0x178>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <pvPortMalloc+0x180>)
 800538c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <pvPortMalloc+0x174>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	431a      	orrs	r2, r3
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053a2:	f7ff f88d 	bl	80044c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <pvPortMalloc+0x164>
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e7fe      	b.n	80053c2 <pvPortMalloc+0x162>
	return pvReturn;
 80053c4:	69fb      	ldr	r3, [r7, #28]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3728      	adds	r7, #40	; 0x28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20003fbc 	.word	0x20003fbc
 80053d4:	20003fc8 	.word	0x20003fc8
 80053d8:	20003fc0 	.word	0x20003fc0
 80053dc:	20003fb4 	.word	0x20003fb4
 80053e0:	20003fc4 	.word	0x20003fc4

080053e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d046      	beq.n	8005484 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053f6:	2308      	movs	r3, #8
 80053f8:	425b      	negs	r3, r3
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4413      	add	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	4b20      	ldr	r3, [pc, #128]	; (800548c <vPortFree+0xa8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <vPortFree+0x42>
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	e7fe      	b.n	8005424 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d009      	beq.n	8005442 <vPortFree+0x5e>
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	e7fe      	b.n	8005440 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4b11      	ldr	r3, [pc, #68]	; (800548c <vPortFree+0xa8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d019      	beq.n	8005484 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d115      	bne.n	8005484 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <vPortFree+0xa8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	43db      	mvns	r3, r3
 8005462:	401a      	ands	r2, r3
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005468:	f7ff f81c 	bl	80044a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <vPortFree+0xac>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4413      	add	r3, r2
 8005476:	4a06      	ldr	r2, [pc, #24]	; (8005490 <vPortFree+0xac>)
 8005478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800547a:	6938      	ldr	r0, [r7, #16]
 800547c:	f000 f86c 	bl	8005558 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005480:	f7ff f81e 	bl	80044c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005484:	bf00      	nop
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20003fc8 	.word	0x20003fc8
 8005490:	20003fc0 	.word	0x20003fc0

08005494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800549a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800549e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <prvHeapInit+0xac>)
 80054a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00c      	beq.n	80054c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3307      	adds	r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0307 	bic.w	r3, r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	4a1f      	ldr	r2, [pc, #124]	; (8005540 <prvHeapInit+0xac>)
 80054c4:	4413      	add	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054cc:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <prvHeapInit+0xb0>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <prvHeapInit+0xb0>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4413      	add	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054e0:	2208      	movs	r2, #8
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0307 	bic.w	r3, r3, #7
 80054ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a15      	ldr	r2, [pc, #84]	; (8005548 <prvHeapInit+0xb4>)
 80054f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <prvHeapInit+0xb4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <prvHeapInit+0xb4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005514:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <prvHeapInit+0xb4>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4a0a      	ldr	r2, [pc, #40]	; (800554c <prvHeapInit+0xb8>)
 8005522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a09      	ldr	r2, [pc, #36]	; (8005550 <prvHeapInit+0xbc>)
 800552a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800552c:	4b09      	ldr	r3, [pc, #36]	; (8005554 <prvHeapInit+0xc0>)
 800552e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	200003b4 	.word	0x200003b4
 8005544:	20003fb4 	.word	0x20003fb4
 8005548:	20003fbc 	.word	0x20003fbc
 800554c:	20003fc4 	.word	0x20003fc4
 8005550:	20003fc0 	.word	0x20003fc0
 8005554:	20003fc8 	.word	0x20003fc8

08005558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005560:	4b28      	ldr	r3, [pc, #160]	; (8005604 <prvInsertBlockIntoFreeList+0xac>)
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e002      	b.n	800556c <prvInsertBlockIntoFreeList+0x14>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d8f7      	bhi.n	8005566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	4413      	add	r3, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	429a      	cmp	r2, r3
 8005586:	d108      	bne.n	800559a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	441a      	add	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	441a      	add	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d118      	bne.n	80055e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <prvInsertBlockIntoFreeList+0xb0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d00d      	beq.n	80055d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	441a      	add	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e008      	b.n	80055e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <prvInsertBlockIntoFreeList+0xb0>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e003      	b.n	80055e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d002      	beq.n	80055f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20003fb4 	.word	0x20003fb4
 8005608:	20003fbc 	.word	0x20003fbc

0800560c <__libc_init_array>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4e0d      	ldr	r6, [pc, #52]	; (8005644 <__libc_init_array+0x38>)
 8005610:	4c0d      	ldr	r4, [pc, #52]	; (8005648 <__libc_init_array+0x3c>)
 8005612:	1ba4      	subs	r4, r4, r6
 8005614:	10a4      	asrs	r4, r4, #2
 8005616:	2500      	movs	r5, #0
 8005618:	42a5      	cmp	r5, r4
 800561a:	d109      	bne.n	8005630 <__libc_init_array+0x24>
 800561c:	4e0b      	ldr	r6, [pc, #44]	; (800564c <__libc_init_array+0x40>)
 800561e:	4c0c      	ldr	r4, [pc, #48]	; (8005650 <__libc_init_array+0x44>)
 8005620:	f000 f82c 	bl	800567c <_init>
 8005624:	1ba4      	subs	r4, r4, r6
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	2500      	movs	r5, #0
 800562a:	42a5      	cmp	r5, r4
 800562c:	d105      	bne.n	800563a <__libc_init_array+0x2e>
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005634:	4798      	blx	r3
 8005636:	3501      	adds	r5, #1
 8005638:	e7ee      	b.n	8005618 <__libc_init_array+0xc>
 800563a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800563e:	4798      	blx	r3
 8005640:	3501      	adds	r5, #1
 8005642:	e7f2      	b.n	800562a <__libc_init_array+0x1e>
 8005644:	0800576c 	.word	0x0800576c
 8005648:	0800576c 	.word	0x0800576c
 800564c:	0800576c 	.word	0x0800576c
 8005650:	08005770 	.word	0x08005770

08005654 <memcpy>:
 8005654:	b510      	push	{r4, lr}
 8005656:	1e43      	subs	r3, r0, #1
 8005658:	440a      	add	r2, r1
 800565a:	4291      	cmp	r1, r2
 800565c:	d100      	bne.n	8005660 <memcpy+0xc>
 800565e:	bd10      	pop	{r4, pc}
 8005660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005668:	e7f7      	b.n	800565a <memcpy+0x6>

0800566a <memset>:
 800566a:	4402      	add	r2, r0
 800566c:	4603      	mov	r3, r0
 800566e:	4293      	cmp	r3, r2
 8005670:	d100      	bne.n	8005674 <memset+0xa>
 8005672:	4770      	bx	lr
 8005674:	f803 1b01 	strb.w	r1, [r3], #1
 8005678:	e7f9      	b.n	800566e <memset+0x4>
	...

0800567c <_init>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr

08005688 <_fini>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	bf00      	nop
 800568c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568e:	bc08      	pop	{r3}
 8005690:	469e      	mov	lr, r3
 8005692:	4770      	bx	lr
