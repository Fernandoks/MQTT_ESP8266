
MQTT_ESP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003060  08003060  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003068  08003068  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000000c  0800307c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800307c  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffc2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024a8  00000000  00000000  0002fffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  000324a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  00033370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000223ba  00000000  00000000  00034128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba4d  00000000  00000000  000564e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5c91  00000000  00000000  00061f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd0  00000000  00000000  00137c3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003030 	.word	0x08003030

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08003030 	.word	0x08003030

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <Ringbuf_init+0x68>)
 8000516:	4a19      	ldr	r2, [pc, #100]	; (800057c <Ringbuf_init+0x6c>)
 8000518:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <Ringbuf_init+0x70>)
 800051c:	4a19      	ldr	r2, [pc, #100]	; (8000584 <Ringbuf_init+0x74>)
 800051e:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <Ringbuf_init+0x78>)
 8000522:	4a1a      	ldr	r2, [pc, #104]	; (800058c <Ringbuf_init+0x7c>)
 8000524:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <Ringbuf_init+0x80>)
 8000528:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <Ringbuf_init+0x84>)
 800052a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <Ringbuf_init+0x88>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <Ringbuf_init+0x88>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f042 0201 	orr.w	r2, r2, #1
 800053a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <Ringbuf_init+0x8c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	695a      	ldr	r2, [r3, #20]
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <Ringbuf_init+0x8c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f042 0201 	orr.w	r2, r2, #1
 800054a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <Ringbuf_init+0x88>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	68da      	ldr	r2, [r3, #12]
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <Ringbuf_init+0x88>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f042 0220 	orr.w	r2, r2, #32
 800055a:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <Ringbuf_init+0x8c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	68da      	ldr	r2, [r3, #12]
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <Ringbuf_init+0x8c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f042 0220 	orr.w	r2, r2, #32
 800056a:	60da      	str	r2, [r3, #12]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000200 	.word	0x20000200
 800057c:	20000028 	.word	0x20000028
 8000580:	20000204 	.word	0x20000204
 8000584:	20000070 	.word	0x20000070
 8000588:	20000208 	.word	0x20000208
 800058c:	200000b8 	.word	0x200000b8
 8000590:	200001fc 	.word	0x200001fc
 8000594:	20000100 	.word	0x20000100
 8000598:	20000210 	.word	0x20000210
 800059c:	20000250 	.word	0x20000250

080005a0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	3301      	adds	r3, #1
 80005b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005b6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d007      	beq.n	80005d2 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	79f9      	ldrb	r1, [r7, #7]
 80005ca:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a24      	ldr	r2, [pc, #144]	; (800067c <Uart_read+0x9c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d11c      	bne.n	800062a <Uart_read+0x4a>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <Uart_read+0xa0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <Uart_read+0xa0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d102      	bne.n	8000606 <Uart_read+0x26>
		  {
		    return -1;
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000604:	e034      	b.n	8000670 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000606:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <Uart_read+0xa0>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <Uart_read+0xa0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000610:	5cd3      	ldrb	r3, [r2, r3]
 8000612:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <Uart_read+0xa0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <Uart_read+0xa0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000624:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	e022      	b.n	8000670 <Uart_read+0x90>
		  }
	}

	else if (uart == pc_uart)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a15      	ldr	r2, [pc, #84]	; (8000684 <Uart_read+0xa4>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d11c      	bne.n	800066c <Uart_read+0x8c>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <Uart_read+0xa8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <Uart_read+0xa8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063e:	429a      	cmp	r2, r3
 8000640:	d102      	bne.n	8000648 <Uart_read+0x68>
		  {
		    return -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000646:	e013      	b.n	8000670 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <Uart_read+0xa8>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <Uart_read+0xa8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000652:	5cd3      	ldrb	r3, [r2, r3]
 8000654:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <Uart_read+0xa8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065c:	1c5a      	adds	r2, r3, #1
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <Uart_read+0xa8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000666:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	e001      	b.n	8000670 <Uart_read+0x90>
		  }
	}

	else return -1;
 800066c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000670:	4618      	mov	r0, r3
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	20000210 	.word	0x20000210
 8000680:	20000200 	.word	0x20000200
 8000684:	20000250 	.word	0x20000250
 8000688:	20000208 	.word	0x20000208

0800068c <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	if (c>0)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	dd4c      	ble.n	8000736 <Uart_write+0xaa>
	{
		if (uart == device_uart){
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	4a29      	ldr	r2, [pc, #164]	; (8000744 <Uart_write+0xb8>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d122      	bne.n	80006ea <Uart_write+0x5e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <Uart_write+0xbc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	3301      	adds	r3, #1
 80006ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006b0:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 80006b2:	bf00      	nop
 80006b4:	4b24      	ldr	r3, [pc, #144]	; (8000748 <Uart_write+0xbc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d0f9      	beq.n	80006b4 <Uart_write+0x28>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <Uart_write+0xbc>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <Uart_write+0xbc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	b2c9      	uxtb	r1, r1
 80006ce:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <Uart_write+0xbc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <Uart_write+0xb8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	68da      	ldr	r2, [r3, #12]
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <Uart_write+0xb8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006e6:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 80006e8:	e025      	b.n	8000736 <Uart_write+0xaa>
		else if (uart == pc_uart){
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	4a17      	ldr	r2, [pc, #92]	; (800074c <Uart_write+0xc0>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d121      	bne.n	8000736 <Uart_write+0xaa>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <Uart_write+0xc4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	3301      	adds	r3, #1
 80006fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006fe:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000700:	bf00      	nop
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <Uart_write+0xc4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	429a      	cmp	r2, r3
 800070c:	d0f9      	beq.n	8000702 <Uart_write+0x76>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <Uart_write+0xc4>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <Uart_write+0xc4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	b2c9      	uxtb	r1, r1
 800071c:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <Uart_write+0xc4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <Uart_write+0xc0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68da      	ldr	r2, [r3, #12]
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <Uart_write+0xc0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000734:	60da      	str	r2, [r3, #12]
}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000210 	.word	0x20000210
 8000748:	20000204 	.word	0x20000204
 800074c:	20000250 	.word	0x20000250
 8000750:	200001fc 	.word	0x200001fc

08000754 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <IsDataAvailable+0x5c>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d10c      	bne.n	800077e <IsDataAvailable+0x2a>
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <IsDataAvailable+0x60>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <IsDataAvailable+0x60>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	b29b      	uxth	r3, r3
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	b29b      	uxth	r3, r3
 8000778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800077c:	e012      	b.n	80007a4 <IsDataAvailable+0x50>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <IsDataAvailable+0x64>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d10c      	bne.n	80007a0 <IsDataAvailable+0x4c>
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <IsDataAvailable+0x68>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <IsDataAvailable+0x68>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000794:	b29b      	uxth	r3, r3
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	b29b      	uxth	r3, r3
 800079a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800079e:	e001      	b.n	80007a4 <IsDataAvailable+0x50>
	return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	20000210 	.word	0x20000210
 80007b4:	20000200 	.word	0x20000200
 80007b8:	20000250 	.word	0x20000250
 80007bc:	20000208 	.word	0x20000208

080007c0 <Uart_isr>:
	}
}


void Uart_isr (UART_HandleTypeDef *huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	f003 0320 	and.w	r3, r3, #32
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d023      	beq.n	800082a <Uart_isr+0x6a>
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	f003 0320 	and.w	r3, r3, #32
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d01e      	beq.n	800082a <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a3a      	ldr	r2, [pc, #232]	; (80008e8 <Uart_isr+0x128>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d107      	bne.n	8000812 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8000802:	4b3a      	ldr	r3, [pc, #232]	; (80008ec <Uart_isr+0x12c>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fec8 	bl	80005a0 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8000810:	e064      	b.n	80008dc <Uart_isr+0x11c>
        else if (huart == pc_uart)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a36      	ldr	r2, [pc, #216]	; (80008f0 <Uart_isr+0x130>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d160      	bne.n	80008dc <Uart_isr+0x11c>
           	store_char (c, _rx_buffer2);  // store data in buffer
 800081a:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <Uart_isr+0x134>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff febc 	bl	80005a0 <store_char>
        return;
 8000828:	e058      	b.n	80008dc <Uart_isr+0x11c>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000830:	2b00      	cmp	r3, #0
 8000832:	d056      	beq.n	80008e2 <Uart_isr+0x122>
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083a:	2b00      	cmp	r3, #0
 800083c:	d051      	beq.n	80008e2 <Uart_isr+0x122>
    {
    	if (huart == device_uart){
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a29      	ldr	r2, [pc, #164]	; (80008e8 <Uart_isr+0x128>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d122      	bne.n	800088c <Uart_isr+0xcc>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <Uart_isr+0x138>)
 8000848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <Uart_isr+0x138>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	429a      	cmp	r2, r3
 8000850:	d108      	bne.n	8000864 <Uart_isr+0xa4>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000860:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8000862:	e03d      	b.n	80008e0 <Uart_isr+0x120>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <Uart_isr+0x138>)
 8000866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000868:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <Uart_isr+0x138>)
 800086a:	5cd3      	ldrb	r3, [r2, r3]
 800086c:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <Uart_isr+0x138>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	3301      	adds	r3, #1
 8000874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000878:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <Uart_isr+0x138>)
 800087a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	7b7a      	ldrb	r2, [r7, #13]
 8000888:	605a      	str	r2, [r3, #4]
    	return;
 800088a:	e029      	b.n	80008e0 <Uart_isr+0x120>
    	else if (huart == pc_uart){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <Uart_isr+0x130>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d125      	bne.n	80008e0 <Uart_isr+0x120>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <Uart_isr+0x13c>)
 8000896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <Uart_isr+0x13c>)
 800089a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089c:	429a      	cmp	r2, r3
 800089e:	d108      	bne.n	80008b2 <Uart_isr+0xf2>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	68da      	ldr	r2, [r3, #12]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008ae:	60da      	str	r2, [r3, #12]
    	return;
 80008b0:	e016      	b.n	80008e0 <Uart_isr+0x120>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <Uart_isr+0x13c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <Uart_isr+0x13c>)
 80008b8:	5cd3      	ldrb	r3, [r2, r3]
 80008ba:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <Uart_isr+0x13c>)
 80008be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c0:	3301      	adds	r3, #1
 80008c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008c6:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <Uart_isr+0x13c>)
 80008c8:	6453      	str	r3, [r2, #68]	; 0x44
        	      huart->Instance->SR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	7bba      	ldrb	r2, [r7, #14]
 80008d6:	605a      	str	r2, [r3, #4]
    	return;
 80008d8:	bf00      	nop
 80008da:	e001      	b.n	80008e0 <Uart_isr+0x120>
        return;
 80008dc:	bf00      	nop
 80008de:	e000      	b.n	80008e2 <Uart_isr+0x122>
    	return;
 80008e0:	bf00      	nop
    }
}
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000210 	.word	0x20000210
 80008ec:	20000200 	.word	0x20000200
 80008f0:	20000250 	.word	0x20000250
 80008f4:	20000208 	.word	0x20000208
 80008f8:	20000070 	.word	0x20000070
 80008fc:	20000100 	.word	0x20000100

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f000 fb09 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f82d 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f000 f8f1 	bl	8000af4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000912:	f000 f8c5 	bl	8000aa0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000916:	f000 f899 	bl	8000a4c <MX_USART1_UART_Init>
#endif
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Ringbuf_init();
 800091a:	f7ff fdf9 	bl	8000510 <Ringbuf_init>

  while (1)
  {
    /* USER CODE END WHILE */

	  if (IsDataAvailable(pc_uart))
 800091e:	4810      	ldr	r0, [pc, #64]	; (8000960 <main+0x60>)
 8000920:	f7ff ff18 	bl	8000754 <IsDataAvailable>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d009      	beq.n	800093e <main+0x3e>
	  {
		  uint32_t data = Uart_read(pc_uart);
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <main+0x60>)
 800092c:	f7ff fe58 	bl	80005e0 <Uart_read>
 8000930:	4603      	mov	r3, r0
 8000932:	607b      	str	r3, [r7, #4]
		  Uart_write(data, wifi_uart);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	490b      	ldr	r1, [pc, #44]	; (8000964 <main+0x64>)
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fea7 	bl	800068c <Uart_write>
	  }

	  if (IsDataAvailable(wifi_uart))
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <main+0x64>)
 8000940:	f7ff ff08 	bl	8000754 <IsDataAvailable>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0e9      	beq.n	800091e <main+0x1e>
	  {
		  uint32_t data = Uart_read(wifi_uart);
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <main+0x64>)
 800094c:	f7ff fe48 	bl	80005e0 <Uart_read>
 8000950:	4603      	mov	r3, r0
 8000952:	603b      	str	r3, [r7, #0]
		  Uart_write(data, pc_uart);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	4902      	ldr	r1, [pc, #8]	; (8000960 <main+0x60>)
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe97 	bl	800068c <Uart_write>
	  if (IsDataAvailable(pc_uart))
 800095e:	e7de      	b.n	800091e <main+0x1e>
 8000960:	20000250 	.word	0x20000250
 8000964:	20000210 	.word	0x20000210

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2234      	movs	r2, #52	; 0x34
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fb52 	bl	8003020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <SystemClock_Config+0xdc>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a2b      	ldr	r2, [pc, #172]	; (8000a44 <SystemClock_Config+0xdc>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <SystemClock_Config+0xdc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <SystemClock_Config+0xe0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a25      	ldr	r2, [pc, #148]	; (8000a48 <SystemClock_Config+0xe0>)
 80009b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <SystemClock_Config+0xe0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009dc:	23b4      	movs	r3, #180	; 0xb4
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 f89f 	bl	8001b34 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009fc:	f000 f8fc 	bl	8000bf8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a00:	f000 fd5c 	bl	80014bc <HAL_PWREx_EnableOverDrive>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a0a:	f000 f8f5 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	230f      	movs	r3, #15
 8000a10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	2302      	movs	r3, #2
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fd95 	bl	800155c <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a38:	f000 f8de 	bl	8000bf8 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3750      	adds	r7, #80	; 0x50
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_USART1_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a84:	f001 fcee 	bl	8002464 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f8b3 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000210 	.word	0x20000210
 8000a9c:	40011000 	.word	0x40011000

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART2_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f001 fcc4 	bl	8002464 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f889 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000250 	.word	0x20000250
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a2c      	ldr	r2, [pc, #176]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a25      	ldr	r2, [pc, #148]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <MX_GPIO_Init+0xd4>)
 8000b80:	f000 fc82 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_GPIO_Init+0xd8>)
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_GPIO_Init+0xdc>)
 8000b9a:	f000 fae3 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b9e:	2320      	movs	r3, #32
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_GPIO_Init+0xd4>)
 8000bb6:	f000 fad5 	bl	8001164 <HAL_GPIO_Init>

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	10210000 	.word	0x10210000
 8000bd0:	40020800 	.word	0x40020800

08000bd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d101      	bne.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be6:	f000 f9bb 	bl	8000f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40001000 	.word	0x40001000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_MspInit+0x54>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <HAL_MspInit+0x54>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_MspInit+0x54>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_MspInit+0x54>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_MspInit+0x54>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_MspInit+0x54>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	210f      	movs	r1, #15
 8000c4a:	f06f 0001 	mvn.w	r0, #1
 8000c4e:	f000 fa5f 	bl	8001110 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	; 0x30
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a3a      	ldr	r2, [pc, #232]	; (8000d68 <HAL_UART_MspInit+0x108>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d135      	bne.n	8000cee <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	4b39      	ldr	r3, [pc, #228]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a38      	ldr	r2, [pc, #224]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a31      	ldr	r2, [pc, #196]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4826      	ldr	r0, [pc, #152]	; (8000d70 <HAL_UART_MspInit+0x110>)
 8000cd8:	f000 fa44 	bl	8001164 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2105      	movs	r1, #5
 8000ce0:	2025      	movs	r0, #37	; 0x25
 8000ce2:	f000 fa15 	bl	8001110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ce6:	2025      	movs	r0, #37	; 0x25
 8000ce8:	f000 fa2e 	bl	8001148 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cec:	e038      	b.n	8000d60 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a20      	ldr	r2, [pc, #128]	; (8000d74 <HAL_UART_MspInit+0x114>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d133      	bne.n	8000d60 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d06:	6413      	str	r3, [r2, #64]	; 0x40
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_UART_MspInit+0x10c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d30:	230c      	movs	r3, #12
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d40:	2307      	movs	r3, #7
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4809      	ldr	r0, [pc, #36]	; (8000d70 <HAL_UART_MspInit+0x110>)
 8000d4c:	f000 fa0a 	bl	8001164 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2105      	movs	r1, #5
 8000d54:	2026      	movs	r0, #38	; 0x26
 8000d56:	f000 f9db 	bl	8001110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d5a:	2026      	movs	r0, #38	; 0x26
 8000d5c:	f000 f9f4 	bl	8001148 <HAL_NVIC_EnableIRQ>
}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	; 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40011000 	.word	0x40011000
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40004400 	.word	0x40004400

08000d78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	2036      	movs	r0, #54	; 0x36
 8000d8e:	f000 f9bf 	bl	8001110 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000d92:	2036      	movs	r0, #54	; 0x36
 8000d94:	f000 f9d8 	bl	8001148 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <HAL_InitTick+0xa4>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <HAL_InitTick+0xa4>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6413      	str	r3, [r2, #64]	; 0x40
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <HAL_InitTick+0xa4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db4:	f107 0210 	add.w	r2, r7, #16
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fce6 	bl	8001790 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000dc4:	f000 fcbc 	bl	8001740 <HAL_RCC_GetPCLK1Freq>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd0:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <HAL_InitTick+0xa8>)
 8000dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd6:	0c9b      	lsrs	r3, r3, #18
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_InitTick+0xac>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_InitTick+0xb0>)
 8000de0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <HAL_InitTick+0xac>)
 8000de4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_InitTick+0xac>)
 8000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_InitTick+0xac>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_InitTick+0xac>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <HAL_InitTick+0xac>)
 8000dfe:	f001 f8f3 	bl	8001fe8 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d104      	bne.n	8000e12 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <HAL_InitTick+0xac>)
 8000e0a:	f001 f922 	bl	8002052 <HAL_TIM_Base_Start_IT>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3730      	adds	r7, #48	; 0x30
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	431bde83 	.word	0x431bde83
 8000e24:	20000290 	.word	0x20000290
 8000e28:	40001000 	.word	0x40001000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <USART1_IRQHandler+0x10>)
 8000e66:	f7ff fcab 	bl	80007c0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000210 	.word	0x20000210

08000e74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <USART2_IRQHandler+0x10>)
 8000e7a:	f7ff fca1 	bl	80007c0 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000250 	.word	0x20000250

08000e88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <TIM6_DAC_IRQHandler+0x10>)
 8000e8e:	f001 f904 	bl	800209a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000290 	.word	0x20000290

08000e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <SystemInit+0x28>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <SystemInit+0x28>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SystemInit+0x28>)
 8000eb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ffd3 	bl	8000e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f002 f86f 	bl	8002fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fd01 	bl	8000900 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f04:	08003070 	.word	0x08003070
  ldr  r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f0c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000f10:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000f14:	200002d4 	.word	0x200002d4

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f8d8 	bl	80010fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff ff14 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fe5a 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200002d0 	.word	0x200002d0

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200002d0 	.word	0x200002d0

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff4c 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001122:	f7ff ff61 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001126:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f7ff ffb1 	bl	8001094 <NVIC_EncodePriority>
 8001132:	4602      	mov	r2, r0
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff80 	bl	8001040 <__NVIC_SetPriority>
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff54 	bl	8001004 <__NVIC_EnableIRQ>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	e165      	b.n	800144c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 8154 	bne.w	8001446 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d00b      	beq.n	80011be <HAL_GPIO_Init+0x5a>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b2:	2b11      	cmp	r3, #17
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0xfc>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b12      	cmp	r3, #18
 800125e:	d123      	bne.n	80012a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	220f      	movs	r2, #15
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	08da      	lsrs	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3208      	adds	r2, #8
 80012a2:	69b9      	ldr	r1, [r7, #24]
 80012a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0203 	and.w	r2, r3, #3
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80ae 	beq.w	8001446 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b5c      	ldr	r3, [pc, #368]	; (8001460 <HAL_GPIO_Init+0x2fc>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <HAL_GPIO_Init+0x2fc>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b59      	ldr	r3, [pc, #356]	; (8001460 <HAL_GPIO_Init+0x2fc>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001306:	4a57      	ldr	r2, [pc, #348]	; (8001464 <HAL_GPIO_Init+0x300>)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4e      	ldr	r2, [pc, #312]	; (8001468 <HAL_GPIO_Init+0x304>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d025      	beq.n	800137e <HAL_GPIO_Init+0x21a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4d      	ldr	r2, [pc, #308]	; (800146c <HAL_GPIO_Init+0x308>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d01f      	beq.n	800137a <HAL_GPIO_Init+0x216>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <HAL_GPIO_Init+0x30c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0x212>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <HAL_GPIO_Init+0x310>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x20e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4a      	ldr	r2, [pc, #296]	; (8001478 <HAL_GPIO_Init+0x314>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x20a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a49      	ldr	r2, [pc, #292]	; (800147c <HAL_GPIO_Init+0x318>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x206>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <HAL_GPIO_Init+0x31c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x202>
 8001362:	2306      	movs	r3, #6
 8001364:	e00c      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 8001366:	2307      	movs	r3, #7
 8001368:	e00a      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 800136a:	2305      	movs	r3, #5
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 800136e:	2304      	movs	r3, #4
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x21c>
 800137e:	2300      	movs	r3, #0
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001390:	4934      	ldr	r1, [pc, #208]	; (8001464 <HAL_GPIO_Init+0x300>)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_GPIO_Init+0x320>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c2:	4a30      	ldr	r2, [pc, #192]	; (8001484 <HAL_GPIO_Init+0x320>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c8:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <HAL_GPIO_Init+0x320>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_GPIO_Init+0x320>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_GPIO_Init+0x320>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001416:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <HAL_GPIO_Init+0x320>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_GPIO_Init+0x320>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001440:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_GPIO_Init+0x320>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	f67f ae96 	bls.w	8001180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001454:	bf00      	nop
 8001456:	3724      	adds	r7, #36	; 0x24
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40021400 	.word	0x40021400
 8001480:	40021800 	.word	0x40021800
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_PWREx_EnableOverDrive+0x94>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e8:	f7ff fd4e 	bl	8000f88 <HAL_GetTick>
 80014ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ee:	e009      	b.n	8001504 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014f0:	f7ff fd4a 	bl	8000f88 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fe:	d901      	bls.n	8001504 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e01f      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_PWREx_EnableOverDrive+0x98>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001510:	d1ee      	bne.n	80014f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff fd36 	bl	8000f88 <HAL_GetTick>
 800151c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800151e:	e009      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001520:	f7ff fd32 	bl	8000f88 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800152e:	d901      	bls.n	8001534 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e007      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_PWREx_EnableOverDrive+0x98>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001540:	d1ee      	bne.n	8001520 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	420e0040 	.word	0x420e0040
 8001554:	40007000 	.word	0x40007000
 8001558:	420e0044 	.word	0x420e0044

0800155c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0cc      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001570:	4b68      	ldr	r3, [pc, #416]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d90c      	bls.n	8001598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b65      	ldr	r3, [pc, #404]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b63      	ldr	r3, [pc, #396]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0b8      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b0:	4b59      	ldr	r3, [pc, #356]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a58      	ldr	r2, [pc, #352]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c8:	4b53      	ldr	r3, [pc, #332]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a52      	ldr	r2, [pc, #328]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	494d      	ldr	r1, [pc, #308]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d044      	beq.n	800167c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d119      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e07f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d003      	beq.n	800161a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	2b03      	cmp	r3, #3
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e067      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163a:	4b37      	ldr	r3, [pc, #220]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 0203 	bic.w	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4934      	ldr	r1, [pc, #208]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff fc9c 	bl	8000f88 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	e00a      	b.n	800166a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7ff fc98 	bl	8000f88 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e04f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 020c 	and.w	r2, r3, #12
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1eb      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d20c      	bcs.n	80016a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e032      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4916      	ldr	r1, [pc, #88]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	490e      	ldr	r1, [pc, #56]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e2:	f000 f887 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80016e6:	4601      	mov	r1, r0
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	fa21 f303 	lsr.w	r3, r1, r3
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fb38 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023c00 	.word	0x40023c00
 8001718:	40023800 	.word	0x40023800
 800171c:	08003048 	.word	0x08003048
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_RCC_GetHCLKFreq+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000000 	.word	0x20000000

08001740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001744:	f7ff fff0 	bl	8001728 <HAL_RCC_GetHCLKFreq>
 8001748:	4601      	mov	r1, r0
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	0a9b      	lsrs	r3, r3, #10
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	08003058 	.word	0x08003058

08001768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800176c:	f7ff ffdc 	bl	8001728 <HAL_RCC_GetHCLKFreq>
 8001770:	4601      	mov	r1, r0
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	0b5b      	lsrs	r3, r3, #13
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <HAL_RCC_GetPCLK2Freq+0x24>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	08003058 	.word	0x08003058

08001790 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	220f      	movs	r2, #15
 800179e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0203 	and.w	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_RCC_GetClockConfig+0x60>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 020f 	and.w	r2, r3, #15
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	601a      	str	r2, [r3, #0]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40023c00 	.word	0x40023c00

080017f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800180e:	4bc6      	ldr	r3, [pc, #792]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b0c      	cmp	r3, #12
 8001818:	f200 817e 	bhi.w	8001b18 <HAL_RCC_GetSysClockFreq+0x324>
 800181c:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <HAL_RCC_GetSysClockFreq+0x30>)
 800181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001822:	bf00      	nop
 8001824:	08001859 	.word	0x08001859
 8001828:	08001b19 	.word	0x08001b19
 800182c:	08001b19 	.word	0x08001b19
 8001830:	08001b19 	.word	0x08001b19
 8001834:	0800185f 	.word	0x0800185f
 8001838:	08001b19 	.word	0x08001b19
 800183c:	08001b19 	.word	0x08001b19
 8001840:	08001b19 	.word	0x08001b19
 8001844:	08001865 	.word	0x08001865
 8001848:	08001b19 	.word	0x08001b19
 800184c:	08001b19 	.word	0x08001b19
 8001850:	08001b19 	.word	0x08001b19
 8001854:	080019c1 	.word	0x080019c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4bb4      	ldr	r3, [pc, #720]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x338>)
 800185a:	613b      	str	r3, [r7, #16]
       break;
 800185c:	e15f      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800185e:	4bb4      	ldr	r3, [pc, #720]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001860:	613b      	str	r3, [r7, #16]
      break;
 8001862:	e15c      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001864:	4bb0      	ldr	r3, [pc, #704]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800186c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186e:	4bae      	ldr	r3, [pc, #696]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d04a      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187a:	4bab      	ldr	r3, [pc, #684]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	f04f 0400 	mov.w	r4, #0
 8001884:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	ea03 0501 	and.w	r5, r3, r1
 8001890:	ea04 0602 	and.w	r6, r4, r2
 8001894:	4629      	mov	r1, r5
 8001896:	4632      	mov	r2, r6
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	f04f 0400 	mov.w	r4, #0
 80018a0:	0154      	lsls	r4, r2, #5
 80018a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018a6:	014b      	lsls	r3, r1, #5
 80018a8:	4619      	mov	r1, r3
 80018aa:	4622      	mov	r2, r4
 80018ac:	1b49      	subs	r1, r1, r5
 80018ae:	eb62 0206 	sbc.w	r2, r2, r6
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	f04f 0400 	mov.w	r4, #0
 80018ba:	0194      	lsls	r4, r2, #6
 80018bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018c0:	018b      	lsls	r3, r1, #6
 80018c2:	1a5b      	subs	r3, r3, r1
 80018c4:	eb64 0402 	sbc.w	r4, r4, r2
 80018c8:	f04f 0100 	mov.w	r1, #0
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	00e2      	lsls	r2, r4, #3
 80018d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018d6:	00d9      	lsls	r1, r3, #3
 80018d8:	460b      	mov	r3, r1
 80018da:	4614      	mov	r4, r2
 80018dc:	195b      	adds	r3, r3, r5
 80018de:	eb44 0406 	adc.w	r4, r4, r6
 80018e2:	f04f 0100 	mov.w	r1, #0
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	0262      	lsls	r2, r4, #9
 80018ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018f0:	0259      	lsls	r1, r3, #9
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	4621      	mov	r1, r4
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f04f 0400 	mov.w	r4, #0
 8001900:	461a      	mov	r2, r3
 8001902:	4623      	mov	r3, r4
 8001904:	f7fe fc84 	bl	8000210 <__aeabi_uldivmod>
 8001908:	4603      	mov	r3, r0
 800190a:	460c      	mov	r4, r1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e049      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001910:	4b85      	ldr	r3, [pc, #532]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	f04f 0400 	mov.w	r4, #0
 800191a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	ea03 0501 	and.w	r5, r3, r1
 8001926:	ea04 0602 	and.w	r6, r4, r2
 800192a:	4629      	mov	r1, r5
 800192c:	4632      	mov	r2, r6
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f04f 0400 	mov.w	r4, #0
 8001936:	0154      	lsls	r4, r2, #5
 8001938:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800193c:	014b      	lsls	r3, r1, #5
 800193e:	4619      	mov	r1, r3
 8001940:	4622      	mov	r2, r4
 8001942:	1b49      	subs	r1, r1, r5
 8001944:	eb62 0206 	sbc.w	r2, r2, r6
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f04f 0400 	mov.w	r4, #0
 8001950:	0194      	lsls	r4, r2, #6
 8001952:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001956:	018b      	lsls	r3, r1, #6
 8001958:	1a5b      	subs	r3, r3, r1
 800195a:	eb64 0402 	sbc.w	r4, r4, r2
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	00e2      	lsls	r2, r4, #3
 8001968:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800196c:	00d9      	lsls	r1, r3, #3
 800196e:	460b      	mov	r3, r1
 8001970:	4614      	mov	r4, r2
 8001972:	195b      	adds	r3, r3, r5
 8001974:	eb44 0406 	adc.w	r4, r4, r6
 8001978:	f04f 0100 	mov.w	r1, #0
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	02a2      	lsls	r2, r4, #10
 8001982:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001986:	0299      	lsls	r1, r3, #10
 8001988:	460b      	mov	r3, r1
 800198a:	4614      	mov	r4, r2
 800198c:	4618      	mov	r0, r3
 800198e:	4621      	mov	r1, r4
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f04f 0400 	mov.w	r4, #0
 8001996:	461a      	mov	r2, r3
 8001998:	4623      	mov	r3, r4
 800199a:	f7fe fc39 	bl	8000210 <__aeabi_uldivmod>
 800199e:	4603      	mov	r3, r0
 80019a0:	460c      	mov	r4, r1
 80019a2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a4:	4b60      	ldr	r3, [pc, #384]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	613b      	str	r3, [r7, #16]
      break;
 80019be:	e0ae      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b59      	ldr	r3, [pc, #356]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ca:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04a      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b54      	ldr	r3, [pc, #336]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	f04f 0400 	mov.w	r4, #0
 80019e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	ea03 0501 	and.w	r5, r3, r1
 80019ec:	ea04 0602 	and.w	r6, r4, r2
 80019f0:	4629      	mov	r1, r5
 80019f2:	4632      	mov	r2, r6
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	f04f 0400 	mov.w	r4, #0
 80019fc:	0154      	lsls	r4, r2, #5
 80019fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a02:	014b      	lsls	r3, r1, #5
 8001a04:	4619      	mov	r1, r3
 8001a06:	4622      	mov	r2, r4
 8001a08:	1b49      	subs	r1, r1, r5
 8001a0a:	eb62 0206 	sbc.w	r2, r2, r6
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	f04f 0400 	mov.w	r4, #0
 8001a16:	0194      	lsls	r4, r2, #6
 8001a18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a1c:	018b      	lsls	r3, r1, #6
 8001a1e:	1a5b      	subs	r3, r3, r1
 8001a20:	eb64 0402 	sbc.w	r4, r4, r2
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	00e2      	lsls	r2, r4, #3
 8001a2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a32:	00d9      	lsls	r1, r3, #3
 8001a34:	460b      	mov	r3, r1
 8001a36:	4614      	mov	r4, r2
 8001a38:	195b      	adds	r3, r3, r5
 8001a3a:	eb44 0406 	adc.w	r4, r4, r6
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	0262      	lsls	r2, r4, #9
 8001a48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a4c:	0259      	lsls	r1, r3, #9
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4614      	mov	r4, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	4621      	mov	r1, r4
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f04f 0400 	mov.w	r4, #0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	f7fe fbd6 	bl	8000210 <__aeabi_uldivmod>
 8001a64:	4603      	mov	r3, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e049      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	f04f 0400 	mov.w	r4, #0
 8001a76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	ea03 0501 	and.w	r5, r3, r1
 8001a82:	ea04 0602 	and.w	r6, r4, r2
 8001a86:	4629      	mov	r1, r5
 8001a88:	4632      	mov	r2, r6
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	f04f 0400 	mov.w	r4, #0
 8001a92:	0154      	lsls	r4, r2, #5
 8001a94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a98:	014b      	lsls	r3, r1, #5
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4622      	mov	r2, r4
 8001a9e:	1b49      	subs	r1, r1, r5
 8001aa0:	eb62 0206 	sbc.w	r2, r2, r6
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	f04f 0400 	mov.w	r4, #0
 8001aac:	0194      	lsls	r4, r2, #6
 8001aae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ab2:	018b      	lsls	r3, r1, #6
 8001ab4:	1a5b      	subs	r3, r3, r1
 8001ab6:	eb64 0402 	sbc.w	r4, r4, r2
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	00e2      	lsls	r2, r4, #3
 8001ac4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ac8:	00d9      	lsls	r1, r3, #3
 8001aca:	460b      	mov	r3, r1
 8001acc:	4614      	mov	r4, r2
 8001ace:	195b      	adds	r3, r3, r5
 8001ad0:	eb44 0406 	adc.w	r4, r4, r6
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	02a2      	lsls	r2, r4, #10
 8001ade:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ae2:	0299      	lsls	r1, r3, #10
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	4621      	mov	r1, r4
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f04f 0400 	mov.w	r4, #0
 8001af2:	461a      	mov	r2, r3
 8001af4:	4623      	mov	r3, r4
 8001af6:	f7fe fb8b 	bl	8000210 <__aeabi_uldivmod>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0f1b      	lsrs	r3, r3, #28
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	613b      	str	r3, [r7, #16]
      break;
 8001b16:	e002      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x338>)
 8001b1a:	613b      	str	r3, [r7, #16]
      break;
 8001b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1e:	693b      	ldr	r3, [r7, #16]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	00f42400 	.word	0x00f42400
 8001b30:	007a1200 	.word	0x007a1200

08001b34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8083 	beq.w	8001c54 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b4e:	4b95      	ldr	r3, [pc, #596]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d019      	beq.n	8001b8e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b5a:	4b92      	ldr	r3, [pc, #584]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d106      	bne.n	8001b74 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b66:	4b8f      	ldr	r3, [pc, #572]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b72:	d00c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b74:	4b8b      	ldr	r3, [pc, #556]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d112      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b80:	4b88      	ldr	r3, [pc, #544]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8e:	4b85      	ldr	r3, [pc, #532]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d05b      	beq.n	8001c52 <HAL_RCC_OscConfig+0x11e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d157      	bne.n	8001c52 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e216      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x8a>
 8001bb0:	4b7c      	ldr	r3, [pc, #496]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a7b      	ldr	r2, [pc, #492]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e01d      	b.n	8001bfa <HAL_RCC_OscConfig+0xc6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0xae>
 8001bc8:	4b76      	ldr	r3, [pc, #472]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a75      	ldr	r2, [pc, #468]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b73      	ldr	r3, [pc, #460]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a72      	ldr	r2, [pc, #456]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0xc6>
 8001be2:	4b70      	ldr	r3, [pc, #448]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6f      	ldr	r2, [pc, #444]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b6d      	ldr	r3, [pc, #436]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6c      	ldr	r2, [pc, #432]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d013      	beq.n	8001c2a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff f9c1 	bl	8000f88 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0a:	f7ff f9bd 	bl	8000f88 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	; 0x64
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1db      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0xd6>
 8001c28:	e014      	b.n	8001c54 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7ff f9ad 	bl	8000f88 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c32:	f7ff f9a9 	bl	8000f88 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b64      	cmp	r3, #100	; 0x64
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1c7      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c44:	4b57      	ldr	r3, [pc, #348]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCC_OscConfig+0xfe>
 8001c50:	e000      	b.n	8001c54 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d06f      	beq.n	8001d40 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c60:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d017      	beq.n	8001c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d105      	bne.n	8001c84 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c78:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00b      	beq.n	8001c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c84:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d11c      	bne.n	8001cca <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c90:	4b44      	ldr	r3, [pc, #272]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d116      	bne.n	8001cca <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9c:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x180>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e18f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4938      	ldr	r1, [pc, #224]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc8:	e03a      	b.n	8001d40 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d020      	beq.n	8001d14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd2:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f956 	bl	8000f88 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff f952 	bl	8000f88 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e170      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4925      	ldr	r1, [pc, #148]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
 8001d12:	e015      	b.n	8001d40 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d14:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1a:	f7ff f935 	bl	8000f88 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d22:	f7ff f931 	bl	8000f88 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e14f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d037      	beq.n	8001dbc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d016      	beq.n	8001d82 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_RCC_OscConfig+0x278>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f915 	bl	8000f88 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d62:	f7ff f911 	bl	8000f88 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e12f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x22e>
 8001d80:	e01c      	b.n	8001dbc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_RCC_OscConfig+0x278>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f8fe 	bl	8000f88 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8e:	e00f      	b.n	8001db0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff f8fa 	bl	8000f88 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d908      	bls.n	8001db0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e118      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	42470000 	.word	0x42470000
 8001dac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	4b8a      	ldr	r3, [pc, #552]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e9      	bne.n	8001d90 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 8097 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dce:	4b83      	ldr	r3, [pc, #524]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b7f      	ldr	r3, [pc, #508]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a7e      	ldr	r2, [pc, #504]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b7c      	ldr	r3, [pc, #496]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d118      	bne.n	8001e38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a75      	ldr	r2, [pc, #468]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7ff f8b9 	bl	8000f88 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7ff f8b5 	bl	8000f88 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0d3      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b6c      	ldr	r3, [pc, #432]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x31a>
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a65      	ldr	r2, [pc, #404]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	e01c      	b.n	8001e88 <HAL_RCC_OscConfig+0x354>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x33c>
 8001e56:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	4a60      	ldr	r2, [pc, #384]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6713      	str	r3, [r2, #112]	; 0x70
 8001e62:	4b5e      	ldr	r3, [pc, #376]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	4a5d      	ldr	r2, [pc, #372]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0x354>
 8001e70:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	4a59      	ldr	r2, [pc, #356]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	4a56      	ldr	r2, [pc, #344]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e82:	f023 0304 	bic.w	r3, r3, #4
 8001e86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d015      	beq.n	8001ebc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7ff f87a 	bl	8000f88 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e98:	f7ff f876 	bl	8000f88 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e092      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eae:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0ee      	beq.n	8001e98 <HAL_RCC_OscConfig+0x364>
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f864 	bl	8000f88 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7ff f860 	bl	8000f88 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e07c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eda:	4b40      	ldr	r3, [pc, #256]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ee      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eec:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	4a3a      	ldr	r2, [pc, #232]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d068      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d060      	beq.n	8001fce <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d145      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <HAL_RCC_OscConfig+0x4b0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f835 	bl	8000f88 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff f831 	bl	8000f88 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e04f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	019b      	lsls	r3, r3, #6
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	085b      	lsrs	r3, r3, #1
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	041b      	lsls	r3, r3, #16
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	061b      	lsls	r3, r3, #24
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	071b      	lsls	r3, r3, #28
 8001f6c:	491b      	ldr	r1, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_RCC_OscConfig+0x4b0>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff f806 	bl	8000f88 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff f802 	bl	8000f88 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e020      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x44c>
 8001f9e:	e018      	b.n	8001fd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_RCC_OscConfig+0x4b0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7fe ffef 	bl	8000f88 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fae:	f7fe ffeb 	bl	8000f88 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e009      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x47a>
 8001fcc:	e001      	b.n	8001fd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	42470060 	.word	0x42470060

08001fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e01d      	b.n	8002036 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f815 	bl	800203e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3304      	adds	r3, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f000 f968 	bl	80022fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b06      	cmp	r3, #6
 800207a:	d007      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d122      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d11b      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f06f 0202 	mvn.w	r2, #2
 80020c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8ee 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 80020e2:	e005      	b.n	80020f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8e0 	bl	80022aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8f1 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d122      	bne.n	800214a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b04      	cmp	r3, #4
 8002110:	d11b      	bne.n	800214a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0204 	mvn.w	r2, #4
 800211a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8c4 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 8002136:	e005      	b.n	8002144 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8b6 	bl	80022aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f8c7 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b08      	cmp	r3, #8
 8002156:	d122      	bne.n	800219e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b08      	cmp	r3, #8
 8002164:	d11b      	bne.n	800219e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f06f 0208 	mvn.w	r2, #8
 800216e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2204      	movs	r2, #4
 8002174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f89a 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 800218a:	e005      	b.n	8002198 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f88c 	bl	80022aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f89d 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d122      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d11b      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f06f 0210 	mvn.w	r2, #16
 80021c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2208      	movs	r2, #8
 80021c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f870 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 80021de:	e005      	b.n	80021ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f862 	bl	80022aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f873 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d10e      	bne.n	800221e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b01      	cmp	r3, #1
 800220c:	d107      	bne.n	800221e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f06f 0201 	mvn.w	r2, #1
 8002216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe fcdb 	bl	8000bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	2b80      	cmp	r3, #128	; 0x80
 800222a:	d10e      	bne.n	800224a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002236:	2b80      	cmp	r3, #128	; 0x80
 8002238:	d107      	bne.n	800224a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f903 	bl	8002450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d10e      	bne.n	8002276 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b40      	cmp	r3, #64	; 0x40
 8002264:	d107      	bne.n	8002276 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800226e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f838 	bl	80022e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b20      	cmp	r3, #32
 8002282:	d10e      	bne.n	80022a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b20      	cmp	r3, #32
 8002290:	d107      	bne.n	80022a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f06f 0220 	mvn.w	r2, #32
 800229a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f8cd 	bl	800243c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a40      	ldr	r2, [pc, #256]	; (8002410 <TIM_Base_SetConfig+0x114>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d013      	beq.n	800233c <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231a:	d00f      	beq.n	800233c <TIM_Base_SetConfig+0x40>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3d      	ldr	r2, [pc, #244]	; (8002414 <TIM_Base_SetConfig+0x118>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00b      	beq.n	800233c <TIM_Base_SetConfig+0x40>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a3c      	ldr	r2, [pc, #240]	; (8002418 <TIM_Base_SetConfig+0x11c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d007      	beq.n	800233c <TIM_Base_SetConfig+0x40>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a3b      	ldr	r2, [pc, #236]	; (800241c <TIM_Base_SetConfig+0x120>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d003      	beq.n	800233c <TIM_Base_SetConfig+0x40>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3a      	ldr	r2, [pc, #232]	; (8002420 <TIM_Base_SetConfig+0x124>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d108      	bne.n	800234e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <TIM_Base_SetConfig+0x114>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d02b      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235c:	d027      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2c      	ldr	r2, [pc, #176]	; (8002414 <TIM_Base_SetConfig+0x118>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d023      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2b      	ldr	r2, [pc, #172]	; (8002418 <TIM_Base_SetConfig+0x11c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d01f      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2a      	ldr	r2, [pc, #168]	; (800241c <TIM_Base_SetConfig+0x120>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01b      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a29      	ldr	r2, [pc, #164]	; (8002420 <TIM_Base_SetConfig+0x124>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d017      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a28      	ldr	r2, [pc, #160]	; (8002424 <TIM_Base_SetConfig+0x128>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a27      	ldr	r2, [pc, #156]	; (8002428 <TIM_Base_SetConfig+0x12c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00f      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a26      	ldr	r2, [pc, #152]	; (800242c <TIM_Base_SetConfig+0x130>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00b      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a25      	ldr	r2, [pc, #148]	; (8002430 <TIM_Base_SetConfig+0x134>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a24      	ldr	r2, [pc, #144]	; (8002434 <TIM_Base_SetConfig+0x138>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d003      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <TIM_Base_SetConfig+0x13c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d108      	bne.n	80023c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <TIM_Base_SetConfig+0x114>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d003      	beq.n	80023f4 <TIM_Base_SetConfig+0xf8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <TIM_Base_SetConfig+0x124>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d103      	bne.n	80023fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	615a      	str	r2, [r3, #20]
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000
 8002414:	40000400 	.word	0x40000400
 8002418:	40000800 	.word	0x40000800
 800241c:	40000c00 	.word	0x40000c00
 8002420:	40010400 	.word	0x40010400
 8002424:	40014000 	.word	0x40014000
 8002428:	40014400 	.word	0x40014400
 800242c:	40014800 	.word	0x40014800
 8002430:	40001800 	.word	0x40001800
 8002434:	40001c00 	.word	0x40001c00
 8002438:	40002000 	.word	0x40002000

0800243c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e03f      	b.n	80024f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fbe8 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	; 0x24
 8002494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f829 	bl	8002500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002542:	f023 030c 	bic.w	r3, r3, #12
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	430b      	orrs	r3, r1
 800254e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800256e:	f040 818b 	bne.w	8002888 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4ac1      	ldr	r2, [pc, #772]	; (800287c <UART_SetConfig+0x37c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d005      	beq.n	8002588 <UART_SetConfig+0x88>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4abf      	ldr	r2, [pc, #764]	; (8002880 <UART_SetConfig+0x380>)
 8002582:	4293      	cmp	r3, r2
 8002584:	f040 80bd 	bne.w	8002702 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002588:	f7ff f8ee 	bl	8001768 <HAL_RCC_GetPCLK2Freq>
 800258c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	461d      	mov	r5, r3
 8002592:	f04f 0600 	mov.w	r6, #0
 8002596:	46a8      	mov	r8, r5
 8002598:	46b1      	mov	r9, r6
 800259a:	eb18 0308 	adds.w	r3, r8, r8
 800259e:	eb49 0409 	adc.w	r4, r9, r9
 80025a2:	4698      	mov	r8, r3
 80025a4:	46a1      	mov	r9, r4
 80025a6:	eb18 0805 	adds.w	r8, r8, r5
 80025aa:	eb49 0906 	adc.w	r9, r9, r6
 80025ae:	f04f 0100 	mov.w	r1, #0
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025c2:	4688      	mov	r8, r1
 80025c4:	4691      	mov	r9, r2
 80025c6:	eb18 0005 	adds.w	r0, r8, r5
 80025ca:	eb49 0106 	adc.w	r1, r9, r6
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	461d      	mov	r5, r3
 80025d4:	f04f 0600 	mov.w	r6, #0
 80025d8:	196b      	adds	r3, r5, r5
 80025da:	eb46 0406 	adc.w	r4, r6, r6
 80025de:	461a      	mov	r2, r3
 80025e0:	4623      	mov	r3, r4
 80025e2:	f7fd fe15 	bl	8000210 <__aeabi_uldivmod>
 80025e6:	4603      	mov	r3, r0
 80025e8:	460c      	mov	r4, r1
 80025ea:	461a      	mov	r2, r3
 80025ec:	4ba5      	ldr	r3, [pc, #660]	; (8002884 <UART_SetConfig+0x384>)
 80025ee:	fba3 2302 	umull	r2, r3, r3, r2
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	461d      	mov	r5, r3
 80025fc:	f04f 0600 	mov.w	r6, #0
 8002600:	46a9      	mov	r9, r5
 8002602:	46b2      	mov	sl, r6
 8002604:	eb19 0309 	adds.w	r3, r9, r9
 8002608:	eb4a 040a 	adc.w	r4, sl, sl
 800260c:	4699      	mov	r9, r3
 800260e:	46a2      	mov	sl, r4
 8002610:	eb19 0905 	adds.w	r9, r9, r5
 8002614:	eb4a 0a06 	adc.w	sl, sl, r6
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002624:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002628:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800262c:	4689      	mov	r9, r1
 800262e:	4692      	mov	sl, r2
 8002630:	eb19 0005 	adds.w	r0, r9, r5
 8002634:	eb4a 0106 	adc.w	r1, sl, r6
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	461d      	mov	r5, r3
 800263e:	f04f 0600 	mov.w	r6, #0
 8002642:	196b      	adds	r3, r5, r5
 8002644:	eb46 0406 	adc.w	r4, r6, r6
 8002648:	461a      	mov	r2, r3
 800264a:	4623      	mov	r3, r4
 800264c:	f7fd fde0 	bl	8000210 <__aeabi_uldivmod>
 8002650:	4603      	mov	r3, r0
 8002652:	460c      	mov	r4, r1
 8002654:	461a      	mov	r2, r3
 8002656:	4b8b      	ldr	r3, [pc, #556]	; (8002884 <UART_SetConfig+0x384>)
 8002658:	fba3 1302 	umull	r1, r3, r3, r2
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	2164      	movs	r1, #100	; 0x64
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	3332      	adds	r3, #50	; 0x32
 800266a:	4a86      	ldr	r2, [pc, #536]	; (8002884 <UART_SetConfig+0x384>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002678:	4498      	add	r8, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	461d      	mov	r5, r3
 800267e:	f04f 0600 	mov.w	r6, #0
 8002682:	46a9      	mov	r9, r5
 8002684:	46b2      	mov	sl, r6
 8002686:	eb19 0309 	adds.w	r3, r9, r9
 800268a:	eb4a 040a 	adc.w	r4, sl, sl
 800268e:	4699      	mov	r9, r3
 8002690:	46a2      	mov	sl, r4
 8002692:	eb19 0905 	adds.w	r9, r9, r5
 8002696:	eb4a 0a06 	adc.w	sl, sl, r6
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026ae:	4689      	mov	r9, r1
 80026b0:	4692      	mov	sl, r2
 80026b2:	eb19 0005 	adds.w	r0, r9, r5
 80026b6:	eb4a 0106 	adc.w	r1, sl, r6
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	461d      	mov	r5, r3
 80026c0:	f04f 0600 	mov.w	r6, #0
 80026c4:	196b      	adds	r3, r5, r5
 80026c6:	eb46 0406 	adc.w	r4, r6, r6
 80026ca:	461a      	mov	r2, r3
 80026cc:	4623      	mov	r3, r4
 80026ce:	f7fd fd9f 	bl	8000210 <__aeabi_uldivmod>
 80026d2:	4603      	mov	r3, r0
 80026d4:	460c      	mov	r4, r1
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <UART_SetConfig+0x384>)
 80026da:	fba3 1302 	umull	r1, r3, r3, r2
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	2164      	movs	r1, #100	; 0x64
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	3332      	adds	r3, #50	; 0x32
 80026ec:	4a65      	ldr	r2, [pc, #404]	; (8002884 <UART_SetConfig+0x384>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	f003 0207 	and.w	r2, r3, #7
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4442      	add	r2, r8
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	e26f      	b.n	8002be2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002702:	f7ff f81d 	bl	8001740 <HAL_RCC_GetPCLK1Freq>
 8002706:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	461d      	mov	r5, r3
 800270c:	f04f 0600 	mov.w	r6, #0
 8002710:	46a8      	mov	r8, r5
 8002712:	46b1      	mov	r9, r6
 8002714:	eb18 0308 	adds.w	r3, r8, r8
 8002718:	eb49 0409 	adc.w	r4, r9, r9
 800271c:	4698      	mov	r8, r3
 800271e:	46a1      	mov	r9, r4
 8002720:	eb18 0805 	adds.w	r8, r8, r5
 8002724:	eb49 0906 	adc.w	r9, r9, r6
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002734:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002738:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800273c:	4688      	mov	r8, r1
 800273e:	4691      	mov	r9, r2
 8002740:	eb18 0005 	adds.w	r0, r8, r5
 8002744:	eb49 0106 	adc.w	r1, r9, r6
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	461d      	mov	r5, r3
 800274e:	f04f 0600 	mov.w	r6, #0
 8002752:	196b      	adds	r3, r5, r5
 8002754:	eb46 0406 	adc.w	r4, r6, r6
 8002758:	461a      	mov	r2, r3
 800275a:	4623      	mov	r3, r4
 800275c:	f7fd fd58 	bl	8000210 <__aeabi_uldivmod>
 8002760:	4603      	mov	r3, r0
 8002762:	460c      	mov	r4, r1
 8002764:	461a      	mov	r2, r3
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <UART_SetConfig+0x384>)
 8002768:	fba3 2302 	umull	r2, r3, r3, r2
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	461d      	mov	r5, r3
 8002776:	f04f 0600 	mov.w	r6, #0
 800277a:	46a9      	mov	r9, r5
 800277c:	46b2      	mov	sl, r6
 800277e:	eb19 0309 	adds.w	r3, r9, r9
 8002782:	eb4a 040a 	adc.w	r4, sl, sl
 8002786:	4699      	mov	r9, r3
 8002788:	46a2      	mov	sl, r4
 800278a:	eb19 0905 	adds.w	r9, r9, r5
 800278e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800279e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027a6:	4689      	mov	r9, r1
 80027a8:	4692      	mov	sl, r2
 80027aa:	eb19 0005 	adds.w	r0, r9, r5
 80027ae:	eb4a 0106 	adc.w	r1, sl, r6
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	461d      	mov	r5, r3
 80027b8:	f04f 0600 	mov.w	r6, #0
 80027bc:	196b      	adds	r3, r5, r5
 80027be:	eb46 0406 	adc.w	r4, r6, r6
 80027c2:	461a      	mov	r2, r3
 80027c4:	4623      	mov	r3, r4
 80027c6:	f7fd fd23 	bl	8000210 <__aeabi_uldivmod>
 80027ca:	4603      	mov	r3, r0
 80027cc:	460c      	mov	r4, r1
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <UART_SetConfig+0x384>)
 80027d2:	fba3 1302 	umull	r1, r3, r3, r2
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2164      	movs	r1, #100	; 0x64
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	3332      	adds	r3, #50	; 0x32
 80027e4:	4a27      	ldr	r2, [pc, #156]	; (8002884 <UART_SetConfig+0x384>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027f2:	4498      	add	r8, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	461d      	mov	r5, r3
 80027f8:	f04f 0600 	mov.w	r6, #0
 80027fc:	46a9      	mov	r9, r5
 80027fe:	46b2      	mov	sl, r6
 8002800:	eb19 0309 	adds.w	r3, r9, r9
 8002804:	eb4a 040a 	adc.w	r4, sl, sl
 8002808:	4699      	mov	r9, r3
 800280a:	46a2      	mov	sl, r4
 800280c:	eb19 0905 	adds.w	r9, r9, r5
 8002810:	eb4a 0a06 	adc.w	sl, sl, r6
 8002814:	f04f 0100 	mov.w	r1, #0
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002820:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002824:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002828:	4689      	mov	r9, r1
 800282a:	4692      	mov	sl, r2
 800282c:	eb19 0005 	adds.w	r0, r9, r5
 8002830:	eb4a 0106 	adc.w	r1, sl, r6
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	461d      	mov	r5, r3
 800283a:	f04f 0600 	mov.w	r6, #0
 800283e:	196b      	adds	r3, r5, r5
 8002840:	eb46 0406 	adc.w	r4, r6, r6
 8002844:	461a      	mov	r2, r3
 8002846:	4623      	mov	r3, r4
 8002848:	f7fd fce2 	bl	8000210 <__aeabi_uldivmod>
 800284c:	4603      	mov	r3, r0
 800284e:	460c      	mov	r4, r1
 8002850:	461a      	mov	r2, r3
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <UART_SetConfig+0x384>)
 8002854:	fba3 1302 	umull	r1, r3, r3, r2
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	2164      	movs	r1, #100	; 0x64
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	3332      	adds	r3, #50	; 0x32
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <UART_SetConfig+0x384>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	f003 0207 	and.w	r2, r3, #7
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4442      	add	r2, r8
 8002878:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800287a:	e1b2      	b.n	8002be2 <UART_SetConfig+0x6e2>
 800287c:	40011000 	.word	0x40011000
 8002880:	40011400 	.word	0x40011400
 8002884:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4ad7      	ldr	r2, [pc, #860]	; (8002bec <UART_SetConfig+0x6ec>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d005      	beq.n	800289e <UART_SetConfig+0x39e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4ad6      	ldr	r2, [pc, #856]	; (8002bf0 <UART_SetConfig+0x6f0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	f040 80d1 	bne.w	8002a40 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800289e:	f7fe ff63 	bl	8001768 <HAL_RCC_GetPCLK2Freq>
 80028a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	469a      	mov	sl, r3
 80028a8:	f04f 0b00 	mov.w	fp, #0
 80028ac:	46d0      	mov	r8, sl
 80028ae:	46d9      	mov	r9, fp
 80028b0:	eb18 0308 	adds.w	r3, r8, r8
 80028b4:	eb49 0409 	adc.w	r4, r9, r9
 80028b8:	4698      	mov	r8, r3
 80028ba:	46a1      	mov	r9, r4
 80028bc:	eb18 080a 	adds.w	r8, r8, sl
 80028c0:	eb49 090b 	adc.w	r9, r9, fp
 80028c4:	f04f 0100 	mov.w	r1, #0
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028d8:	4688      	mov	r8, r1
 80028da:	4691      	mov	r9, r2
 80028dc:	eb1a 0508 	adds.w	r5, sl, r8
 80028e0:	eb4b 0609 	adc.w	r6, fp, r9
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	f04f 0400 	mov.w	r4, #0
 80028f6:	0094      	lsls	r4, r2, #2
 80028f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028fc:	008b      	lsls	r3, r1, #2
 80028fe:	461a      	mov	r2, r3
 8002900:	4623      	mov	r3, r4
 8002902:	4628      	mov	r0, r5
 8002904:	4631      	mov	r1, r6
 8002906:	f7fd fc83 	bl	8000210 <__aeabi_uldivmod>
 800290a:	4603      	mov	r3, r0
 800290c:	460c      	mov	r4, r1
 800290e:	461a      	mov	r2, r3
 8002910:	4bb8      	ldr	r3, [pc, #736]	; (8002bf4 <UART_SetConfig+0x6f4>)
 8002912:	fba3 2302 	umull	r2, r3, r3, r2
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	469b      	mov	fp, r3
 8002920:	f04f 0c00 	mov.w	ip, #0
 8002924:	46d9      	mov	r9, fp
 8002926:	46e2      	mov	sl, ip
 8002928:	eb19 0309 	adds.w	r3, r9, r9
 800292c:	eb4a 040a 	adc.w	r4, sl, sl
 8002930:	4699      	mov	r9, r3
 8002932:	46a2      	mov	sl, r4
 8002934:	eb19 090b 	adds.w	r9, r9, fp
 8002938:	eb4a 0a0c 	adc.w	sl, sl, ip
 800293c:	f04f 0100 	mov.w	r1, #0
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002948:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800294c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002950:	4689      	mov	r9, r1
 8002952:	4692      	mov	sl, r2
 8002954:	eb1b 0509 	adds.w	r5, fp, r9
 8002958:	eb4c 060a 	adc.w	r6, ip, sl
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4619      	mov	r1, r3
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	f04f 0400 	mov.w	r4, #0
 800296e:	0094      	lsls	r4, r2, #2
 8002970:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002974:	008b      	lsls	r3, r1, #2
 8002976:	461a      	mov	r2, r3
 8002978:	4623      	mov	r3, r4
 800297a:	4628      	mov	r0, r5
 800297c:	4631      	mov	r1, r6
 800297e:	f7fd fc47 	bl	8000210 <__aeabi_uldivmod>
 8002982:	4603      	mov	r3, r0
 8002984:	460c      	mov	r4, r1
 8002986:	461a      	mov	r2, r3
 8002988:	4b9a      	ldr	r3, [pc, #616]	; (8002bf4 <UART_SetConfig+0x6f4>)
 800298a:	fba3 1302 	umull	r1, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2164      	movs	r1, #100	; 0x64
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	3332      	adds	r3, #50	; 0x32
 800299c:	4a95      	ldr	r2, [pc, #596]	; (8002bf4 <UART_SetConfig+0x6f4>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a8:	4498      	add	r8, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	469b      	mov	fp, r3
 80029ae:	f04f 0c00 	mov.w	ip, #0
 80029b2:	46d9      	mov	r9, fp
 80029b4:	46e2      	mov	sl, ip
 80029b6:	eb19 0309 	adds.w	r3, r9, r9
 80029ba:	eb4a 040a 	adc.w	r4, sl, sl
 80029be:	4699      	mov	r9, r3
 80029c0:	46a2      	mov	sl, r4
 80029c2:	eb19 090b 	adds.w	r9, r9, fp
 80029c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029ca:	f04f 0100 	mov.w	r1, #0
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029de:	4689      	mov	r9, r1
 80029e0:	4692      	mov	sl, r2
 80029e2:	eb1b 0509 	adds.w	r5, fp, r9
 80029e6:	eb4c 060a 	adc.w	r6, ip, sl
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	f04f 0400 	mov.w	r4, #0
 80029fc:	0094      	lsls	r4, r2, #2
 80029fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a02:	008b      	lsls	r3, r1, #2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4623      	mov	r3, r4
 8002a08:	4628      	mov	r0, r5
 8002a0a:	4631      	mov	r1, r6
 8002a0c:	f7fd fc00 	bl	8000210 <__aeabi_uldivmod>
 8002a10:	4603      	mov	r3, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b77      	ldr	r3, [pc, #476]	; (8002bf4 <UART_SetConfig+0x6f4>)
 8002a18:	fba3 1302 	umull	r1, r3, r3, r2
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	2164      	movs	r1, #100	; 0x64
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	3332      	adds	r3, #50	; 0x32
 8002a2a:	4a72      	ldr	r2, [pc, #456]	; (8002bf4 <UART_SetConfig+0x6f4>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4442      	add	r2, r8
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	e0d0      	b.n	8002be2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a40:	f7fe fe7e 	bl	8001740 <HAL_RCC_GetPCLK1Freq>
 8002a44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	469a      	mov	sl, r3
 8002a4a:	f04f 0b00 	mov.w	fp, #0
 8002a4e:	46d0      	mov	r8, sl
 8002a50:	46d9      	mov	r9, fp
 8002a52:	eb18 0308 	adds.w	r3, r8, r8
 8002a56:	eb49 0409 	adc.w	r4, r9, r9
 8002a5a:	4698      	mov	r8, r3
 8002a5c:	46a1      	mov	r9, r4
 8002a5e:	eb18 080a 	adds.w	r8, r8, sl
 8002a62:	eb49 090b 	adc.w	r9, r9, fp
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a7a:	4688      	mov	r8, r1
 8002a7c:	4691      	mov	r9, r2
 8002a7e:	eb1a 0508 	adds.w	r5, sl, r8
 8002a82:	eb4b 0609 	adc.w	r6, fp, r9
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	f04f 0400 	mov.w	r4, #0
 8002a98:	0094      	lsls	r4, r2, #2
 8002a9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a9e:	008b      	lsls	r3, r1, #2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	4631      	mov	r1, r6
 8002aa8:	f7fd fbb2 	bl	8000210 <__aeabi_uldivmod>
 8002aac:	4603      	mov	r3, r0
 8002aae:	460c      	mov	r4, r1
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <UART_SetConfig+0x6f4>)
 8002ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	469b      	mov	fp, r3
 8002ac2:	f04f 0c00 	mov.w	ip, #0
 8002ac6:	46d9      	mov	r9, fp
 8002ac8:	46e2      	mov	sl, ip
 8002aca:	eb19 0309 	adds.w	r3, r9, r9
 8002ace:	eb4a 040a 	adc.w	r4, sl, sl
 8002ad2:	4699      	mov	r9, r3
 8002ad4:	46a2      	mov	sl, r4
 8002ad6:	eb19 090b 	adds.w	r9, r9, fp
 8002ada:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ade:	f04f 0100 	mov.w	r1, #0
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002aee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002af2:	4689      	mov	r9, r1
 8002af4:	4692      	mov	sl, r2
 8002af6:	eb1b 0509 	adds.w	r5, fp, r9
 8002afa:	eb4c 060a 	adc.w	r6, ip, sl
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4619      	mov	r1, r3
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	f04f 0400 	mov.w	r4, #0
 8002b10:	0094      	lsls	r4, r2, #2
 8002b12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b16:	008b      	lsls	r3, r1, #2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4623      	mov	r3, r4
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	4631      	mov	r1, r6
 8002b20:	f7fd fb76 	bl	8000210 <__aeabi_uldivmod>
 8002b24:	4603      	mov	r3, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b32      	ldr	r3, [pc, #200]	; (8002bf4 <UART_SetConfig+0x6f4>)
 8002b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	2164      	movs	r1, #100	; 0x64
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	3332      	adds	r3, #50	; 0x32
 8002b3e:	4a2d      	ldr	r2, [pc, #180]	; (8002bf4 <UART_SetConfig+0x6f4>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4a:	4498      	add	r8, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	469b      	mov	fp, r3
 8002b50:	f04f 0c00 	mov.w	ip, #0
 8002b54:	46d9      	mov	r9, fp
 8002b56:	46e2      	mov	sl, ip
 8002b58:	eb19 0309 	adds.w	r3, r9, r9
 8002b5c:	eb4a 040a 	adc.w	r4, sl, sl
 8002b60:	4699      	mov	r9, r3
 8002b62:	46a2      	mov	sl, r4
 8002b64:	eb19 090b 	adds.w	r9, r9, fp
 8002b68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b6c:	f04f 0100 	mov.w	r1, #0
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b80:	4689      	mov	r9, r1
 8002b82:	4692      	mov	sl, r2
 8002b84:	eb1b 0509 	adds.w	r5, fp, r9
 8002b88:	eb4c 060a 	adc.w	r6, ip, sl
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f04f 0400 	mov.w	r4, #0
 8002b9e:	0094      	lsls	r4, r2, #2
 8002ba0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ba4:	008b      	lsls	r3, r1, #2
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4623      	mov	r3, r4
 8002baa:	4628      	mov	r0, r5
 8002bac:	4631      	mov	r1, r6
 8002bae:	f7fd fb2f 	bl	8000210 <__aeabi_uldivmod>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <UART_SetConfig+0x6f4>)
 8002bba:	fba3 1302 	umull	r1, r3, r3, r2
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	2164      	movs	r1, #100	; 0x64
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	3332      	adds	r3, #50	; 0x32
 8002bcc:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <UART_SetConfig+0x6f4>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	f003 020f 	and.w	r2, r3, #15
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4442      	add	r2, r8
 8002bde:	609a      	str	r2, [r3, #8]
}
 8002be0:	e7ff      	b.n	8002be2 <UART_SetConfig+0x6e2>
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bec:	40011000 	.word	0x40011000
 8002bf0:	40011400 	.word	0x40011400
 8002bf4:	51eb851f 	.word	0x51eb851f

08002bf8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6892      	ldr	r2, [r2, #8]
 8002c56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6852      	ldr	r2, [r2, #4]
 8002c60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d103      	bne.n	8002c74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	1e5a      	subs	r2, r3, #1
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c9e:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <xTaskIncrementTick+0x144>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f040 8087 	bne.w	8002db6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ca8:	4b4c      	ldr	r3, [pc, #304]	; (8002ddc <xTaskIncrementTick+0x148>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cb0:	4a4a      	ldr	r2, [pc, #296]	; (8002ddc <xTaskIncrementTick+0x148>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d11f      	bne.n	8002cfc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cbc:	4b48      	ldr	r3, [pc, #288]	; (8002de0 <xTaskIncrementTick+0x14c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	e7fe      	b.n	8002cd8 <xTaskIncrementTick+0x44>
 8002cda:	4b41      	ldr	r3, [pc, #260]	; (8002de0 <xTaskIncrementTick+0x14c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	4b40      	ldr	r3, [pc, #256]	; (8002de4 <xTaskIncrementTick+0x150>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a3e      	ldr	r2, [pc, #248]	; (8002de0 <xTaskIncrementTick+0x14c>)
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4a3e      	ldr	r2, [pc, #248]	; (8002de4 <xTaskIncrementTick+0x150>)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b3e      	ldr	r3, [pc, #248]	; (8002de8 <xTaskIncrementTick+0x154>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	4a3c      	ldr	r2, [pc, #240]	; (8002de8 <xTaskIncrementTick+0x154>)
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	f000 f8de 	bl	8002eb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002cfc:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <xTaskIncrementTick+0x158>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d348      	bcc.n	8002d98 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d06:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <xTaskIncrementTick+0x14c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d10:	4b36      	ldr	r3, [pc, #216]	; (8002dec <xTaskIncrementTick+0x158>)
 8002d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d16:	601a      	str	r2, [r3, #0]
					break;
 8002d18:	e03e      	b.n	8002d98 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d1a:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <xTaskIncrementTick+0x14c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d203      	bcs.n	8002d3a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d32:	4a2e      	ldr	r2, [pc, #184]	; (8002dec <xTaskIncrementTick+0x158>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d38:	e02e      	b.n	8002d98 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff7e 	bl	8002c40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d004      	beq.n	8002d56 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	3318      	adds	r3, #24
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff75 	bl	8002c40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <xTaskIncrementTick+0x15c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	4a22      	ldr	r2, [pc, #136]	; (8002df0 <xTaskIncrementTick+0x15c>)
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <xTaskIncrementTick+0x160>)
 8002d76:	441a      	add	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f7ff ff3a 	bl	8002bf8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <xTaskIncrementTick+0x164>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d3b9      	bcc.n	8002d06 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002d92:	2301      	movs	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d96:	e7b6      	b.n	8002d06 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d98:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <xTaskIncrementTick+0x164>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9e:	4915      	ldr	r1, [pc, #84]	; (8002df4 <xTaskIncrementTick+0x160>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d907      	bls.n	8002dc0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002db0:	2301      	movs	r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e004      	b.n	8002dc0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <xTaskIncrementTick+0x168>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a0f      	ldr	r2, [pc, #60]	; (8002dfc <xTaskIncrementTick+0x168>)
 8002dbe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <xTaskIncrementTick+0x16c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002dcc:	697b      	ldr	r3, [r7, #20]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200001f8 	.word	0x200001f8
 8002ddc:	200001e0 	.word	0x200001e0
 8002de0:	200001d8 	.word	0x200001d8
 8002de4:	200001dc 	.word	0x200001dc
 8002de8:	200001f0 	.word	0x200001f0
 8002dec:	200001f4 	.word	0x200001f4
 8002df0:	200001e4 	.word	0x200001e4
 8002df4:	2000014c 	.word	0x2000014c
 8002df8:	20000148 	.word	0x20000148
 8002dfc:	200001e8 	.word	0x200001e8
 8002e00:	200001ec 	.word	0x200001ec

08002e04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e0a:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <vTaskSwitchContext+0xa0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e12:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <vTaskSwitchContext+0xa4>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e18:	e03e      	b.n	8002e98 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002e1a:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <vTaskSwitchContext+0xa4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <vTaskSwitchContext+0xa8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e2e:	7afb      	ldrb	r3, [r7, #11]
 8002e30:	f1c3 031f 	rsb	r3, r3, #31
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	491e      	ldr	r1, [pc, #120]	; (8002eb0 <vTaskSwitchContext+0xac>)
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <vTaskSwitchContext+0x5a>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	e7fe      	b.n	8002e5c <vTaskSwitchContext+0x58>
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <vTaskSwitchContext+0xac>)
 8002e6a:	4413      	add	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d104      	bne.n	8002e8e <vTaskSwitchContext+0x8a>
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <vTaskSwitchContext+0xb0>)
 8002e96:	6013      	str	r3, [r2, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	200001f8 	.word	0x200001f8
 8002ea8:	200001ec 	.word	0x200001ec
 8002eac:	200001e4 	.word	0x200001e4
 8002eb0:	2000014c 	.word	0x2000014c
 8002eb4:	20000148 	.word	0x20000148

08002eb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <prvResetNextTaskUnblockTime+0x38>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d104      	bne.n	8002ed2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <prvResetNextTaskUnblockTime+0x3c>)
 8002eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ece:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ed0:	e008      	b.n	8002ee4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ed2:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <prvResetNextTaskUnblockTime+0x38>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <prvResetNextTaskUnblockTime+0x3c>)
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	200001d8 	.word	0x200001d8
 8002ef4:	200001f4 	.word	0x200001f4
	...

08002f00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <pxCurrentTCBConst2>)
 8002f02:	6819      	ldr	r1, [r3, #0]
 8002f04:	6808      	ldr	r0, [r1, #0]
 8002f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f0a:	f380 8809 	msr	PSP, r0
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f04f 0000 	mov.w	r0, #0
 8002f16:	f380 8811 	msr	BASEPRI, r0
 8002f1a:	4770      	bx	lr
 8002f1c:	f3af 8000 	nop.w

08002f20 <pxCurrentTCBConst2>:
 8002f20:	20000148 	.word	0x20000148
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
	...

08002f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f30:	f3ef 8009 	mrs	r0, PSP
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <pxCurrentTCBConst>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	f01e 0f10 	tst.w	lr, #16
 8002f40:	bf08      	it	eq
 8002f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f54:	f380 8811 	msr	BASEPRI, r0
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f7ff ff50 	bl	8002e04 <vTaskSwitchContext>
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f380 8811 	msr	BASEPRI, r0
 8002f6c:	bc09      	pop	{r0, r3}
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	6808      	ldr	r0, [r1, #0]
 8002f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f76:	f01e 0f10 	tst.w	lr, #16
 8002f7a:	bf08      	it	eq
 8002f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f80:	f380 8809 	msr	PSP, r0
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	f3af 8000 	nop.w

08002f90 <pxCurrentTCBConst>:
 8002f90:	20000148 	.word	0x20000148
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop

08002f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002fb0:	f7ff fe70 	bl	8002c94 <xTaskIncrementTick>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <SysTick_Handler+0x3c>)
 8002fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <__libc_init_array>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	4e0d      	ldr	r6, [pc, #52]	; (8003010 <__libc_init_array+0x38>)
 8002fdc:	4c0d      	ldr	r4, [pc, #52]	; (8003014 <__libc_init_array+0x3c>)
 8002fde:	1ba4      	subs	r4, r4, r6
 8002fe0:	10a4      	asrs	r4, r4, #2
 8002fe2:	2500      	movs	r5, #0
 8002fe4:	42a5      	cmp	r5, r4
 8002fe6:	d109      	bne.n	8002ffc <__libc_init_array+0x24>
 8002fe8:	4e0b      	ldr	r6, [pc, #44]	; (8003018 <__libc_init_array+0x40>)
 8002fea:	4c0c      	ldr	r4, [pc, #48]	; (800301c <__libc_init_array+0x44>)
 8002fec:	f000 f820 	bl	8003030 <_init>
 8002ff0:	1ba4      	subs	r4, r4, r6
 8002ff2:	10a4      	asrs	r4, r4, #2
 8002ff4:	2500      	movs	r5, #0
 8002ff6:	42a5      	cmp	r5, r4
 8002ff8:	d105      	bne.n	8003006 <__libc_init_array+0x2e>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003000:	4798      	blx	r3
 8003002:	3501      	adds	r5, #1
 8003004:	e7ee      	b.n	8002fe4 <__libc_init_array+0xc>
 8003006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800300a:	4798      	blx	r3
 800300c:	3501      	adds	r5, #1
 800300e:	e7f2      	b.n	8002ff6 <__libc_init_array+0x1e>
 8003010:	08003068 	.word	0x08003068
 8003014:	08003068 	.word	0x08003068
 8003018:	08003068 	.word	0x08003068
 800301c:	0800306c 	.word	0x0800306c

08003020 <memset>:
 8003020:	4402      	add	r2, r0
 8003022:	4603      	mov	r3, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <_init>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr

0800303c <_fini>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr
