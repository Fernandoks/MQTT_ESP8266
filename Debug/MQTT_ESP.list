
MQTT_ESP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005264  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b4  080054b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054bc  080054bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080054c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004098  20000010  080054d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040a8  080054d4  000240a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fc8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000305b  00000000  00000000  00035008  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001268  00000000  00000000  00038068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  000392d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023219  00000000  00000000  0003a3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec77  00000000  00000000  0005d5d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7236  00000000  00000000  0006c250  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd8  00000000  00000000  00143504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800541c 	.word	0x0800541c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800541c 	.word	0x0800541c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	2000002c 	.word	0x2000002c
 8000540:	20000080 	.word	0x20000080

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b096      	sub	sp, #88	; 0x58
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fbfb 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f895 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f959 	bl	8000808 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000556:	f000 f92d 	bl	80007b4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800055a:	f000 f901 	bl	8000760 <MX_USART1_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMessageQDef(uart1queue, 64, uint32_t);
 800055e:	4b3a      	ldr	r3, [pc, #232]	; (8000648 <main+0x104>)
 8000560:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART1_Queue = osMessageCreate (osMessageQ(uart1queue), NULL);
 800056a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f002 fdba 	bl	80030ea <osMessageCreate>
 8000576:	4602      	mov	r2, r0
 8000578:	4b34      	ldr	r3, [pc, #208]	; (800064c <main+0x108>)
 800057a:	601a      	str	r2, [r3, #0]

  osMessageQDef(uart2queue, 64, uint32_t);
 800057c:	4b32      	ldr	r3, [pc, #200]	; (8000648 <main+0x104>)
 800057e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UART2_Queue = osMessageCreate (osMessageQ(uart2queue), NULL);
 8000588:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fdab 	bl	80030ea <osMessageCreate>
 8000594:	4602      	mov	r2, r0
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <main+0x10c>)
 8000598:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(UART1task, StartUART1task, osPriorityNormal, 0, 128);
 800059a:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <main+0x110>)
 800059c:	f107 041c 	add.w	r4, r7, #28
 80005a0:	461d      	mov	r5, r3
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART1_TaskHandler = osThreadCreate(osThread(UART1task), NULL);
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fd4c 	bl	8003052 <osThreadCreate>
 80005ba:	4602      	mov	r2, r0
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <main+0x114>)
 80005be:	601a      	str	r2, [r3, #0]

  osThreadDef(UART2task, StartUART2task, osPriorityNormal, 0, 128);
 80005c0:	4b26      	ldr	r3, [pc, #152]	; (800065c <main+0x118>)
 80005c2:	463c      	mov	r4, r7
 80005c4:	461d      	mov	r5, r3
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART2_TaskHandler = osThreadCreate(osThread(UART2task), NULL);
 80005d2:	463b      	mov	r3, r7
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fd3b 	bl	8003052 <osThreadCreate>
 80005dc:	4602      	mov	r2, r0
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <main+0x11c>)
 80005e0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e2:	f002 fd2f 	bl	8003044 <osKernelStart>
  /*
   * Starting TX and RX form UART1 and UART2
   */


  if(HAL_UART_Transmit_IT(&huart1, (uint8_t*)UART1_TX_Buffer, sizeof(UART1_TX_Buffer))!= HAL_OK)
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <main+0x120>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4619      	mov	r1, r3
 80005ee:	481e      	ldr	r0, [pc, #120]	; (8000668 <main+0x124>)
 80005f0:	f001 febb 	bl	800236a <HAL_UART_Transmit_IT>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <main+0xba>
  {
    Error_Handler();
 80005fa:	f000 f9d9 	bl	80009b0 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart1, (uint8_t *)UART1_RX_Buffer, sizeof(UART1_RX_Buffer)) != HAL_OK)
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <main+0x128>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	4818      	ldr	r0, [pc, #96]	; (8000668 <main+0x124>)
 8000608:	f001 fef4 	bl	80023f4 <HAL_UART_Receive_IT>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <main+0xd2>
  {
    Error_Handler();
 8000612:	f000 f9cd 	bl	80009b0 <Error_Handler>
  }

  if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)UART2_TX_Buffer, sizeof(UART1_TX_Buffer))!= HAL_OK)
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <main+0x12c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	4815      	ldr	r0, [pc, #84]	; (8000674 <main+0x130>)
 8000620:	f001 fea3 	bl	800236a <HAL_UART_Transmit_IT>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <main+0xea>
  {
    Error_Handler();
 800062a:	f000 f9c1 	bl	80009b0 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2_RX_Buffer, sizeof(UART1_RX_Buffer)) != HAL_OK)
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <main+0x134>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	480f      	ldr	r0, [pc, #60]	; (8000674 <main+0x130>)
 8000638:	f001 fedc 	bl	80023f4 <HAL_UART_Receive_IT>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <main+0x102>
  {
    Error_Handler();
 8000642:	f000 f9b5 	bl	80009b0 <Error_Handler>
  }



  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x102>
 8000648:	08005434 	.word	0x08005434
 800064c:	20004060 	.word	0x20004060
 8000650:	2000405c 	.word	0x2000405c
 8000654:	08005450 	.word	0x08005450
 8000658:	20003fd4 	.word	0x20003fd4
 800065c:	08005478 	.word	0x08005478
 8000660:	20003fcc 	.word	0x20003fcc
 8000664:	20003fd0 	.word	0x20003fd0
 8000668:	20003fd8 	.word	0x20003fd8
 800066c:	20004018 	.word	0x20004018
 8000670:	20003fd1 	.word	0x20003fd1
 8000674:	2000401c 	.word	0x2000401c
 8000678:	20004019 	.word	0x20004019

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2234      	movs	r2, #52	; 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 febd 	bl	800540a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <SystemClock_Config+0xdc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a2b      	ldr	r2, [pc, #172]	; (8000758 <SystemClock_Config+0xdc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemClock_Config+0xdc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <SystemClock_Config+0xe0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a25      	ldr	r2, [pc, #148]	; (800075c <SystemClock_Config+0xe0>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <SystemClock_Config+0xe0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006f0:	23b4      	movs	r3, #180	; 0xb4
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4618      	mov	r0, r3
 8000706:	f001 f94b 	bl	80019a0 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000710:	f000 f94e 	bl	80009b0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000714:	f000 fe08 	bl	8001328 <HAL_PWREx_EnableOverDrive>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800071e:	f000 f947 	bl	80009b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	2105      	movs	r1, #5
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fe41 	bl	80013c8 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800074c:	f000 f930 	bl	80009b0 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3750      	adds	r7, #80	; 0x50
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART1_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000798:	f001 fd9a 	bl	80022d0 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f905 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20003fd8 	.word	0x20003fd8
 80007b0:	40011000 	.word	0x40011000

080007b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MX_USART2_UART_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ec:	f001 fd70 	bl	80022d0 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f6:	f000 f8db 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000401c 	.word	0x2000401c
 8000804:	40004400 	.word	0x40004400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a2c      	ldr	r2, [pc, #176]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <MX_GPIO_Init+0xd0>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2120      	movs	r1, #32
 8000892:	4812      	ldr	r0, [pc, #72]	; (80008dc <MX_GPIO_Init+0xd4>)
 8000894:	f000 fd2e 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_GPIO_Init+0xd8>)
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_GPIO_Init+0xdc>)
 80008ae:	f000 fb8f 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b2:	2320      	movs	r3, #32
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0xd4>)
 80008ca:	f000 fb81 	bl	8000fd0 <HAL_GPIO_Init>

}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	10210000 	.word	0x10210000
 80008e4:	40020800 	.word	0x40020800

080008e8 <HAL_UART_RxCpltCallback>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

	if(UartHandle -> Instance == pc_uart.Instance)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <HAL_UART_RxCpltCallback+0x78>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d113      	bne.n	8000922 <HAL_UART_RxCpltCallback+0x3a>
	{
		if(osMessagePut (UART1_Queue, UART2_RX_Buffer, 100) != osOK)
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <HAL_UART_RxCpltCallback+0x7c>)
 80008fc:	6818      	ldr	r0, [r3, #0]
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_UART_RxCpltCallback+0x80>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2264      	movs	r2, #100	; 0x64
 8000904:	4619      	mov	r1, r3
 8000906:	f002 fc19 	bl	800313c <osMessagePut>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <HAL_UART_RxCpltCallback+0x2c>
		{
		  Error_Handler();
 8000910:	f000 f84e 	bl	80009b0 <Error_Handler>
		}
		HAL_UART_Receive_IT(&huart2, UART2_RX_Buffer, sizeof(UART2_RX_Buffer));
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_UART_RxCpltCallback+0x80>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	4619      	mov	r1, r3
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <HAL_UART_RxCpltCallback+0x78>)
 800091e:	f001 fd69 	bl	80023f4 <HAL_UART_Receive_IT>
	}
	if(UartHandle -> Instance == wifi_uart.Instance)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <HAL_UART_RxCpltCallback+0x84>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d114      	bne.n	8000956 <HAL_UART_RxCpltCallback+0x6e>
	{
		if(osMessagePut (UART2_RX_Buffer, UART1_RX_Buffer, 100) != osOK)
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_UART_RxCpltCallback+0x80>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <HAL_UART_RxCpltCallback+0x88>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2264      	movs	r2, #100	; 0x64
 8000938:	4619      	mov	r1, r3
 800093a:	f002 fbff 	bl	800313c <osMessagePut>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_UART_RxCpltCallback+0x60>
		{
		  Error_Handler();
 8000944:	f000 f834 	bl	80009b0 <Error_Handler>
		}
		HAL_UART_Receive_IT(&huart1, UART1_RX_Buffer, sizeof(UART1_RX_Buffer));
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_UART_RxCpltCallback+0x88>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2201      	movs	r2, #1
 800094e:	4619      	mov	r1, r3
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <HAL_UART_RxCpltCallback+0x84>)
 8000952:	f001 fd4f 	bl	80023f4 <HAL_UART_Receive_IT>
	}
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000401c 	.word	0x2000401c
 8000964:	20004060 	.word	0x20004060
 8000968:	20004019 	.word	0x20004019
 800096c:	20003fd8 	.word	0x20003fd8
 8000970:	20004018 	.word	0x20004018

08000974 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	__NOP();
 800097c:	bf00      	nop
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d101      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099e:	f000 f9f3 	bl	8000d88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40001000 	.word	0x40001000

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <StartUART1task>:

extern osMessageQId UART1_Queue;
extern osMessageQId UART2_Queue;

void StartUART1task(void const * argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	osEvent event;

	while(1)
	{
		event = osMessageGet(UART1_Queue, 100);
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <StartUART1task+0x30>)
 80009ca:	6819      	ldr	r1, [r3, #0]
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	2264      	movs	r2, #100	; 0x64
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 fbf2 	bl	80031bc <osMessageGet>
		if(event.status == osEventMessage)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2b10      	cmp	r3, #16
 80009dc:	d101      	bne.n	80009e2 <StartUART1task+0x22>
		{
			temp = event.value.v;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	617b      	str	r3, [r7, #20]
		}
		HAL_UART_Transmit_IT(&huart1, temp, sizeof(temp));
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	2204      	movs	r2, #4
 80009e6:	4619      	mov	r1, r3
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <StartUART1task+0x34>)
 80009ea:	f001 fcbe 	bl	800236a <HAL_UART_Transmit_IT>
		event = osMessageGet(UART1_Queue, 100);
 80009ee:	e7eb      	b.n	80009c8 <StartUART1task+0x8>
 80009f0:	20004060 	.word	0x20004060
 80009f4:	20003fd8 	.word	0x20003fd8

080009f8 <StartUART2task>:

}


void StartUART2task(void const * argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	osEvent event;

	while(1)
	{
		event = osMessageGet(UART2_Queue, 100);
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <StartUART2task+0x30>)
 8000a02:	6819      	ldr	r1, [r3, #0]
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	2264      	movs	r2, #100	; 0x64
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 fbd6 	bl	80031bc <osMessageGet>
		if(event.status == osEventMessage)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	2b10      	cmp	r3, #16
 8000a14:	d101      	bne.n	8000a1a <StartUART2task+0x22>
		{
			temp = event.value.v;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	617b      	str	r3, [r7, #20]
		}
		HAL_UART_Transmit_IT(&huart1, temp, sizeof(temp));
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <StartUART2task+0x34>)
 8000a22:	f001 fca2 	bl	800236a <HAL_UART_Transmit_IT>
		event = osMessageGet(UART2_Queue, 100);
 8000a26:	e7eb      	b.n	8000a00 <StartUART2task+0x8>
 8000a28:	2000405c 	.word	0x2000405c
 8000a2c:	20003fd8 	.word	0x20003fd8

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_MspInit+0x54>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <HAL_MspInit+0x54>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_MspInit+0x54>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_MspInit+0x54>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_MspInit+0x54>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_MspInit+0x54>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	210f      	movs	r1, #15
 8000a72:	f06f 0001 	mvn.w	r0, #1
 8000a76:	f000 fa5f 	bl	8000f38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a3a      	ldr	r2, [pc, #232]	; (8000b90 <HAL_UART_MspInit+0x108>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d135      	bne.n	8000b16 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a38      	ldr	r2, [pc, #224]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000ab4:	f043 0310 	orr.w	r3, r3, #16
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a31      	ldr	r2, [pc, #196]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ae2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af4:	2307      	movs	r3, #7
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4826      	ldr	r0, [pc, #152]	; (8000b98 <HAL_UART_MspInit+0x110>)
 8000b00:	f000 fa66 	bl	8000fd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2105      	movs	r1, #5
 8000b08:	2025      	movs	r0, #37	; 0x25
 8000b0a:	f000 fa15 	bl	8000f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b0e:	2025      	movs	r0, #37	; 0x25
 8000b10:	f000 fa2e 	bl	8000f70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b14:	e038      	b.n	8000b88 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <HAL_UART_MspInit+0x114>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d133      	bne.n	8000b88 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b58:	230c      	movs	r3, #12
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <HAL_UART_MspInit+0x110>)
 8000b74:	f000 fa2c 	bl	8000fd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2105      	movs	r1, #5
 8000b7c:	2026      	movs	r0, #38	; 0x26
 8000b7e:	f000 f9db 	bl	8000f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b82:	2026      	movs	r0, #38	; 0x26
 8000b84:	f000 f9f4 	bl	8000f70 <HAL_NVIC_EnableIRQ>
}
 8000b88:	bf00      	nop
 8000b8a:	3730      	adds	r7, #48	; 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40011000 	.word	0x40011000
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40004400 	.word	0x40004400

08000ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	2036      	movs	r0, #54	; 0x36
 8000bb6:	f000 f9bf 	bl	8000f38 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000bba:	2036      	movs	r0, #54	; 0x36
 8000bbc:	f000 f9d8 	bl	8000f70 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <HAL_InitTick+0xa4>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <HAL_InitTick+0xa4>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_InitTick+0xa4>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bdc:	f107 0210 	add.w	r2, r7, #16
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fd08 	bl	80015fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bec:	f000 fcde 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <HAL_InitTick+0xa8>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	0c9b      	lsrs	r3, r3, #18
 8000c00:	3b01      	subs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_InitTick+0xac>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <HAL_InitTick+0xb0>)
 8000c08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <HAL_InitTick+0xac>)
 8000c0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_InitTick+0xac>)
 8000c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_InitTick+0xac>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_InitTick+0xac>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <HAL_InitTick+0xac>)
 8000c26:	f001 f915 	bl	8001e54 <HAL_TIM_Base_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d104      	bne.n	8000c3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c30:	4806      	ldr	r0, [pc, #24]	; (8000c4c <HAL_InitTick+0xac>)
 8000c32:	f001 f944 	bl	8001ebe <HAL_TIM_Base_Start_IT>
 8000c36:	4603      	mov	r3, r0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3730      	adds	r7, #48	; 0x30
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	431bde83 	.word	0x431bde83
 8000c4c:	20004064 	.word	0x20004064
 8000c50:	40001000 	.word	0x40001000

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>

08000c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//Uart_isr(&huart1);
  /* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <USART1_IRQHandler+0x10>)
 8000c8e:	f001 fc07 	bl	80024a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20003fd8 	.word	0x20003fd8

08000c9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	//Uart_isr(&huart2);
  /* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <USART2_IRQHandler+0x10>)
 8000ca2:	f001 fbfd 	bl	80024a0 <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000401c 	.word	0x2000401c

08000cb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <TIM6_DAC_IRQHandler+0x10>)
 8000cb6:	f001 f926 	bl	8001f06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20004064 	.word	0x20004064

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <SystemInit+0x28>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <SystemInit+0x28>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SystemInit+0x28>)
 8000cda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cde:	609a      	str	r2, [r3, #8]
#endif
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cf6:	e003      	b.n	8000d00 <LoopCopyDataInit>

08000cf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cfe:	3104      	adds	r1, #4

08000d00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d08:	d3f6      	bcc.n	8000cf8 <CopyDataInit>
  ldr  r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d0c:	e002      	b.n	8000d14 <LoopFillZerobss>

08000d0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d10:	f842 3b04 	str.w	r3, [r2], #4

08000d14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d18:	d3f9      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d1a:	f7ff ffd3 	bl	8000cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f004 fb45 	bl	80053ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fc0f 	bl	8000544 <main>
  bx  lr    
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d2c:	080054c4 	.word	0x080054c4
  ldr  r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d34:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000d38:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d3c:	200040a8 	.word	0x200040a8

08000d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <HAL_Init+0x40>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_Init+0x40>)
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_Init+0x40>)
 8000d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f8d8 	bl	8000f22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff ff14 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff fe5a 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023c00 	.word	0x40023c00

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	200040a4 	.word	0x200040a4

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	200040a4 	.word	0x200040a4

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <__NVIC_EnableIRQ+0x38>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	; 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff4c 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4a:	f7ff ff61 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	6978      	ldr	r0, [r7, #20]
 8000f56:	f7ff ffb1 	bl	8000ebc <NVIC_EncodePriority>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff80 	bl	8000e68 <__NVIC_SetPriority>
}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff54 	bl	8000e2c <__NVIC_EnableIRQ>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d004      	beq.n	8000faa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00c      	b.n	8000fc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2205      	movs	r2, #5
 8000fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0201 	bic.w	r2, r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e165      	b.n	80012b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 8154 	bne.w	80012b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d00b      	beq.n	800102a <HAL_GPIO_Init+0x5a>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101e:	2b11      	cmp	r3, #17
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b12      	cmp	r3, #18
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0xfc>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b12      	cmp	r3, #18
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80ae 	beq.w	80012b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b5c      	ldr	r3, [pc, #368]	; (80012cc <HAL_GPIO_Init+0x2fc>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a5b      	ldr	r2, [pc, #364]	; (80012cc <HAL_GPIO_Init+0x2fc>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b59      	ldr	r3, [pc, #356]	; (80012cc <HAL_GPIO_Init+0x2fc>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a57      	ldr	r2, [pc, #348]	; (80012d0 <HAL_GPIO_Init+0x300>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4e      	ldr	r2, [pc, #312]	; (80012d4 <HAL_GPIO_Init+0x304>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d025      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4d      	ldr	r2, [pc, #308]	; (80012d8 <HAL_GPIO_Init+0x308>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d01f      	beq.n	80011e6 <HAL_GPIO_Init+0x216>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <HAL_GPIO_Init+0x30c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d019      	beq.n	80011e2 <HAL_GPIO_Init+0x212>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4b      	ldr	r2, [pc, #300]	; (80012e0 <HAL_GPIO_Init+0x310>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x20e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4a      	ldr	r2, [pc, #296]	; (80012e4 <HAL_GPIO_Init+0x314>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x20a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a49      	ldr	r2, [pc, #292]	; (80012e8 <HAL_GPIO_Init+0x318>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x206>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a48      	ldr	r2, [pc, #288]	; (80012ec <HAL_GPIO_Init+0x31c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x202>
 80011ce:	2306      	movs	r3, #6
 80011d0:	e00c      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00a      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011d6:	2305      	movs	r3, #5
 80011d8:	e008      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011da:	2304      	movs	r3, #4
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011de:	2303      	movs	r3, #3
 80011e0:	e004      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x21c>
 80011ea:	2300      	movs	r3, #0
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	f002 0203 	and.w	r2, r2, #3
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	4093      	lsls	r3, r2
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011fc:	4934      	ldr	r1, [pc, #208]	; (80012d0 <HAL_GPIO_Init+0x300>)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120a:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <HAL_GPIO_Init+0x320>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800122e:	4a30      	ldr	r2, [pc, #192]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001258:	4a25      	ldr	r2, [pc, #148]	; (80012f0 <HAL_GPIO_Init+0x320>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <HAL_GPIO_Init+0x320>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_GPIO_Init+0x320>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_GPIO_Init+0x320>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3301      	adds	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	f67f ae96 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c0:	bf00      	nop
 80012c2:	3724      	adds	r7, #36	; 0x24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40021800 	.word	0x40021800
 80012f0:	40013c00 	.word	0x40013c00

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_PWREx_EnableOverDrive+0x94>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001354:	f7ff fd2c 	bl	8000db0 <HAL_GetTick>
 8001358:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800135a:	e009      	b.n	8001370 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800135c:	f7ff fd28 	bl	8000db0 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800136a:	d901      	bls.n	8001370 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e01f      	b.n	80013b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137c:	d1ee      	bne.n	800135c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001384:	f7ff fd14 	bl	8000db0 <HAL_GetTick>
 8001388:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800138a:	e009      	b.n	80013a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800138c:	f7ff fd10 	bl	8000db0 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800139a:	d901      	bls.n	80013a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e007      	b.n	80013b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013ac:	d1ee      	bne.n	800138c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	420e0040 	.word	0x420e0040
 80013c0:	40007000 	.word	0x40007000
 80013c4:	420e0044 	.word	0x420e0044

080013c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0cc      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b68      	ldr	r3, [pc, #416]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d90c      	bls.n	8001404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b65      	ldr	r3, [pc, #404]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b63      	ldr	r3, [pc, #396]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0b8      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800141c:	4b59      	ldr	r3, [pc, #356]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a58      	ldr	r2, [pc, #352]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001434:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800143e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	494d      	ldr	r1, [pc, #308]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	4313      	orrs	r3, r2
 8001450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d044      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d119      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e07f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d003      	beq.n	8001486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	2b03      	cmp	r3, #3
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e06f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e067      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f023 0203 	bic.w	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4934      	ldr	r1, [pc, #208]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff fc7a 	bl	8000db0 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c0:	f7ff fc76 	bl	8000db0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e04f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 020c 	and.w	r2, r3, #12
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d1eb      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014e8:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d20c      	bcs.n	8001510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e032      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4916      	ldr	r1, [pc, #88]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	490e      	ldr	r1, [pc, #56]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800154e:	f000 f887 	bl	8001660 <HAL_RCC_GetSysClockFreq>
 8001552:	4601      	mov	r1, r0
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	fa21 f303 	lsr.w	r3, r1, r3
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_ClockConfig+0x1c8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fb16 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00
 8001584:	40023800 	.word	0x40023800
 8001588:	0800549c 	.word	0x0800549c
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000000 	.word	0x20000000

080015ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015b0:	f7ff fff0 	bl	8001594 <HAL_RCC_GetHCLKFreq>
 80015b4:	4601      	mov	r1, r0
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	0a9b      	lsrs	r3, r3, #10
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015c2:	5cd3      	ldrb	r3, [r2, r3]
 80015c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	080054ac 	.word	0x080054ac

080015d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015d8:	f7ff ffdc 	bl	8001594 <HAL_RCC_GetHCLKFreq>
 80015dc:	4601      	mov	r1, r0
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	0b5b      	lsrs	r3, r3, #13
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ea:	5cd3      	ldrb	r3, [r2, r3]
 80015ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	080054ac 	.word	0x080054ac

080015fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	220f      	movs	r2, #15
 800160a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_RCC_GetClockConfig+0x5c>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0203 	and.w	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_RCC_GetClockConfig+0x5c>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_RCC_GetClockConfig+0x5c>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_RCC_GetClockConfig+0x5c>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	08db      	lsrs	r3, r3, #3
 8001636:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <HAL_RCC_GetClockConfig+0x60>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 020f 	and.w	r2, r3, #15
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	601a      	str	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40023c00 	.word	0x40023c00

08001660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800167a:	4bc6      	ldr	r3, [pc, #792]	; (8001994 <HAL_RCC_GetSysClockFreq+0x334>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b0c      	cmp	r3, #12
 8001684:	f200 817e 	bhi.w	8001984 <HAL_RCC_GetSysClockFreq+0x324>
 8001688:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <HAL_RCC_GetSysClockFreq+0x30>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016c5 	.word	0x080016c5
 8001694:	08001985 	.word	0x08001985
 8001698:	08001985 	.word	0x08001985
 800169c:	08001985 	.word	0x08001985
 80016a0:	080016cb 	.word	0x080016cb
 80016a4:	08001985 	.word	0x08001985
 80016a8:	08001985 	.word	0x08001985
 80016ac:	08001985 	.word	0x08001985
 80016b0:	080016d1 	.word	0x080016d1
 80016b4:	08001985 	.word	0x08001985
 80016b8:	08001985 	.word	0x08001985
 80016bc:	08001985 	.word	0x08001985
 80016c0:	0800182d 	.word	0x0800182d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c4:	4bb4      	ldr	r3, [pc, #720]	; (8001998 <HAL_RCC_GetSysClockFreq+0x338>)
 80016c6:	613b      	str	r3, [r7, #16]
       break;
 80016c8:	e15f      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ca:	4bb4      	ldr	r3, [pc, #720]	; (800199c <HAL_RCC_GetSysClockFreq+0x33c>)
 80016cc:	613b      	str	r3, [r7, #16]
      break;
 80016ce:	e15c      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d0:	4bb0      	ldr	r3, [pc, #704]	; (8001994 <HAL_RCC_GetSysClockFreq+0x334>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016d8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016da:	4bae      	ldr	r3, [pc, #696]	; (8001994 <HAL_RCC_GetSysClockFreq+0x334>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d04a      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e6:	4bab      	ldr	r3, [pc, #684]	; (8001994 <HAL_RCC_GetSysClockFreq+0x334>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	099b      	lsrs	r3, r3, #6
 80016ec:	f04f 0400 	mov.w	r4, #0
 80016f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	ea03 0501 	and.w	r5, r3, r1
 80016fc:	ea04 0602 	and.w	r6, r4, r2
 8001700:	4629      	mov	r1, r5
 8001702:	4632      	mov	r2, r6
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	f04f 0400 	mov.w	r4, #0
 800170c:	0154      	lsls	r4, r2, #5
 800170e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001712:	014b      	lsls	r3, r1, #5
 8001714:	4619      	mov	r1, r3
 8001716:	4622      	mov	r2, r4
 8001718:	1b49      	subs	r1, r1, r5
 800171a:	eb62 0206 	sbc.w	r2, r2, r6
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	f04f 0400 	mov.w	r4, #0
 8001726:	0194      	lsls	r4, r2, #6
 8001728:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800172c:	018b      	lsls	r3, r1, #6
 800172e:	1a5b      	subs	r3, r3, r1
 8001730:	eb64 0402 	sbc.w	r4, r4, r2
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	00e2      	lsls	r2, r4, #3
 800173e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001742:	00d9      	lsls	r1, r3, #3
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	195b      	adds	r3, r3, r5
 800174a:	eb44 0406 	adc.w	r4, r4, r6
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	0262      	lsls	r2, r4, #9
 8001758:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800175c:	0259      	lsls	r1, r3, #9
 800175e:	460b      	mov	r3, r1
 8001760:	4614      	mov	r4, r2
 8001762:	4618      	mov	r0, r3
 8001764:	4621      	mov	r1, r4
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f04f 0400 	mov.w	r4, #0
 800176c:	461a      	mov	r2, r3
 800176e:	4623      	mov	r3, r4
 8001770:	f7fe fd4e 	bl	8000210 <__aeabi_uldivmod>
 8001774:	4603      	mov	r3, r0
 8001776:	460c      	mov	r4, r1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e049      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177c:	4b85      	ldr	r3, [pc, #532]	; (8001994 <HAL_RCC_GetSysClockFreq+0x334>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	f04f 0400 	mov.w	r4, #0
 8001786:	f240 11ff 	movw	r1, #511	; 0x1ff
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	ea03 0501 	and.w	r5, r3, r1
 8001792:	ea04 0602 	and.w	r6, r4, r2
 8001796:	4629      	mov	r1, r5
 8001798:	4632      	mov	r2, r6
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	f04f 0400 	mov.w	r4, #0
 80017a2:	0154      	lsls	r4, r2, #5
 80017a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017a8:	014b      	lsls	r3, r1, #5
 80017aa:	4619      	mov	r1, r3
 80017ac:	4622      	mov	r2, r4
 80017ae:	1b49      	subs	r1, r1, r5
 80017b0:	eb62 0206 	sbc.w	r2, r2, r6
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	f04f 0400 	mov.w	r4, #0
 80017bc:	0194      	lsls	r4, r2, #6
 80017be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017c2:	018b      	lsls	r3, r1, #6
 80017c4:	1a5b      	subs	r3, r3, r1
 80017c6:	eb64 0402 	sbc.w	r4, r4, r2
 80017ca:	f04f 0100 	mov.w	r1, #0
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	00e2      	lsls	r2, r4, #3
 80017d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017d8:	00d9      	lsls	r1, r3, #3
 80017da:	460b      	mov	r3, r1
 80017dc:	4614      	mov	r4, r2
 80017de:	195b      	adds	r3, r3, r5
 80017e0:	eb44 0406 	adc.w	r4, r4, r6
 80017e4:	f04f 0100 	mov.w	r1, #0
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	02a2      	lsls	r2, r4, #10
 80017ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017f2:	0299      	lsls	r1, r3, #10
 80017f4:	460b      	mov	r3, r1
 80017f6:	4614      	mov	r4, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	4621      	mov	r1, r4
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f04f 0400 	mov.w	r4, #0
 8001802:	461a      	mov	r2, r3
 8001804:	4623      	mov	r3, r4
 8001806:	f7fe fd03 	bl	8000210 <__aeabi_uldivmod>
 800180a:	4603      	mov	r3, r0
 800180c:	460c      	mov	r4, r1
 800180e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001810:	4b60      	ldr	r3, [pc, #384]	; (8001994 <HAL_RCC_GetSysClockFreq+0x334>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	0c1b      	lsrs	r3, r3, #16
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	3301      	adds	r3, #1
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	613b      	str	r3, [r7, #16]
      break;
 800182a:	e0ae      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_GetSysClockFreq+0x334>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001834:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001836:	4b57      	ldr	r3, [pc, #348]	; (8001994 <HAL_RCC_GetSysClockFreq+0x334>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d04a      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001842:	4b54      	ldr	r3, [pc, #336]	; (8001994 <HAL_RCC_GetSysClockFreq+0x334>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	099b      	lsrs	r3, r3, #6
 8001848:	f04f 0400 	mov.w	r4, #0
 800184c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	ea03 0501 	and.w	r5, r3, r1
 8001858:	ea04 0602 	and.w	r6, r4, r2
 800185c:	4629      	mov	r1, r5
 800185e:	4632      	mov	r2, r6
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	f04f 0400 	mov.w	r4, #0
 8001868:	0154      	lsls	r4, r2, #5
 800186a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800186e:	014b      	lsls	r3, r1, #5
 8001870:	4619      	mov	r1, r3
 8001872:	4622      	mov	r2, r4
 8001874:	1b49      	subs	r1, r1, r5
 8001876:	eb62 0206 	sbc.w	r2, r2, r6
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	f04f 0400 	mov.w	r4, #0
 8001882:	0194      	lsls	r4, r2, #6
 8001884:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001888:	018b      	lsls	r3, r1, #6
 800188a:	1a5b      	subs	r3, r3, r1
 800188c:	eb64 0402 	sbc.w	r4, r4, r2
 8001890:	f04f 0100 	mov.w	r1, #0
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	00e2      	lsls	r2, r4, #3
 800189a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800189e:	00d9      	lsls	r1, r3, #3
 80018a0:	460b      	mov	r3, r1
 80018a2:	4614      	mov	r4, r2
 80018a4:	195b      	adds	r3, r3, r5
 80018a6:	eb44 0406 	adc.w	r4, r4, r6
 80018aa:	f04f 0100 	mov.w	r1, #0
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	0262      	lsls	r2, r4, #9
 80018b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018b8:	0259      	lsls	r1, r3, #9
 80018ba:	460b      	mov	r3, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	4621      	mov	r1, r4
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f04f 0400 	mov.w	r4, #0
 80018c8:	461a      	mov	r2, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	f7fe fca0 	bl	8000210 <__aeabi_uldivmod>
 80018d0:	4603      	mov	r3, r0
 80018d2:	460c      	mov	r4, r1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	e049      	b.n	800196c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_RCC_GetSysClockFreq+0x334>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	f04f 0400 	mov.w	r4, #0
 80018e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	ea03 0501 	and.w	r5, r3, r1
 80018ee:	ea04 0602 	and.w	r6, r4, r2
 80018f2:	4629      	mov	r1, r5
 80018f4:	4632      	mov	r2, r6
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	f04f 0400 	mov.w	r4, #0
 80018fe:	0154      	lsls	r4, r2, #5
 8001900:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001904:	014b      	lsls	r3, r1, #5
 8001906:	4619      	mov	r1, r3
 8001908:	4622      	mov	r2, r4
 800190a:	1b49      	subs	r1, r1, r5
 800190c:	eb62 0206 	sbc.w	r2, r2, r6
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	f04f 0400 	mov.w	r4, #0
 8001918:	0194      	lsls	r4, r2, #6
 800191a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800191e:	018b      	lsls	r3, r1, #6
 8001920:	1a5b      	subs	r3, r3, r1
 8001922:	eb64 0402 	sbc.w	r4, r4, r2
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	00e2      	lsls	r2, r4, #3
 8001930:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001934:	00d9      	lsls	r1, r3, #3
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	195b      	adds	r3, r3, r5
 800193c:	eb44 0406 	adc.w	r4, r4, r6
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	02a2      	lsls	r2, r4, #10
 800194a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800194e:	0299      	lsls	r1, r3, #10
 8001950:	460b      	mov	r3, r1
 8001952:	4614      	mov	r4, r2
 8001954:	4618      	mov	r0, r3
 8001956:	4621      	mov	r1, r4
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f04f 0400 	mov.w	r4, #0
 800195e:	461a      	mov	r2, r3
 8001960:	4623      	mov	r3, r4
 8001962:	f7fe fc55 	bl	8000210 <__aeabi_uldivmod>
 8001966:	4603      	mov	r3, r0
 8001968:	460c      	mov	r4, r1
 800196a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_RCC_GetSysClockFreq+0x334>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	0f1b      	lsrs	r3, r3, #28
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	613b      	str	r3, [r7, #16]
      break;
 8001982:	e002      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <HAL_RCC_GetSysClockFreq+0x338>)
 8001986:	613b      	str	r3, [r7, #16]
      break;
 8001988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198a:	693b      	ldr	r3, [r7, #16]
}
 800198c:	4618      	mov	r0, r3
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400
 800199c:	007a1200 	.word	0x007a1200

080019a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8083 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019ba:	4b95      	ldr	r3, [pc, #596]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d019      	beq.n	80019fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019c6:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019d2:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019de:	d00c      	beq.n	80019fa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e0:	4b8b      	ldr	r3, [pc, #556]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019e8:	2b0c      	cmp	r3, #12
 80019ea:	d112      	bne.n	8001a12 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ec:	4b88      	ldr	r3, [pc, #544]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019f8:	d10b      	bne.n	8001a12 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fa:	4b85      	ldr	r3, [pc, #532]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d05b      	beq.n	8001abe <HAL_RCC_OscConfig+0x11e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d157      	bne.n	8001abe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e216      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x8a>
 8001a1c:	4b7c      	ldr	r3, [pc, #496]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a7b      	ldr	r2, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	e01d      	b.n	8001a66 <HAL_RCC_OscConfig+0xc6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0xae>
 8001a34:	4b76      	ldr	r3, [pc, #472]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a75      	ldr	r2, [pc, #468]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a72      	ldr	r2, [pc, #456]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e00b      	b.n	8001a66 <HAL_RCC_OscConfig+0xc6>
 8001a4e:	4b70      	ldr	r3, [pc, #448]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6f      	ldr	r2, [pc, #444]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b6d      	ldr	r3, [pc, #436]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6c      	ldr	r2, [pc, #432]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d013      	beq.n	8001a96 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff f99f 	bl	8000db0 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a76:	f7ff f99b 	bl	8000db0 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b64      	cmp	r3, #100	; 0x64
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e1db      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a88:	4b61      	ldr	r3, [pc, #388]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0xd6>
 8001a94:	e014      	b.n	8001ac0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff f98b 	bl	8000db0 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9e:	f7ff f987 	bl	8000db0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1c7      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab0:	4b57      	ldr	r3, [pc, #348]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0xfe>
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d06f      	beq.n	8001bac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d017      	beq.n	8001b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ad8:	4b4d      	ldr	r3, [pc, #308]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af0:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d11c      	bne.n	8001b36 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afc:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d116      	bne.n	8001b36 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b08:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x180>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e18f      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4938      	ldr	r1, [pc, #224]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b34:	e03a      	b.n	8001bac <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d020      	beq.n	8001b80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f934 	bl	8000db0 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7ff f930 	bl	8000db0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e170      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4925      	ldr	r1, [pc, #148]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
 8001b7e:	e015      	b.n	8001bac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff f913 	bl	8000db0 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff f90f 	bl	8000db0 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e14f      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d037      	beq.n	8001c28 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d016      	beq.n	8001bee <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_RCC_OscConfig+0x278>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7ff f8f3 	bl	8000db0 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff f8ef 	bl	8000db0 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e12f      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x22e>
 8001bec:	e01c      	b.n	8001c28 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x278>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f8dc 	bl	8000db0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfa:	e00f      	b.n	8001c1c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff f8d8 	bl	8000db0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d908      	bls.n	8001c1c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e118      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	42470000 	.word	0x42470000
 8001c18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	4b8a      	ldr	r3, [pc, #552]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e9      	bne.n	8001bfc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8097 	beq.w	8001d64 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3a:	4b83      	ldr	r3, [pc, #524]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10f      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b7f      	ldr	r3, [pc, #508]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a7e      	ldr	r2, [pc, #504]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b7c      	ldr	r3, [pc, #496]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c62:	2301      	movs	r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b79      	ldr	r3, [pc, #484]	; (8001e4c <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d118      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c72:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a75      	ldr	r2, [pc, #468]	; (8001e4c <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f897 	bl	8000db0 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7ff f893 	bl	8000db0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0d3      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	4b6c      	ldr	r3, [pc, #432]	; (8001e4c <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x31a>
 8001cac:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	4a65      	ldr	r2, [pc, #404]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb8:	e01c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x354>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x33c>
 8001cc2:	4b61      	ldr	r3, [pc, #388]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	4a60      	ldr	r2, [pc, #384]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cce:	4b5e      	ldr	r3, [pc, #376]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a5d      	ldr	r2, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x354>
 8001cdc:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	4a59      	ldr	r2, [pc, #356]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a56      	ldr	r2, [pc, #344]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001cee:	f023 0304 	bic.w	r3, r3, #4
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d015      	beq.n	8001d28 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfc:	f7ff f858 	bl	8000db0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d04:	f7ff f854 	bl	8000db0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e092      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1a:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0ee      	beq.n	8001d04 <HAL_RCC_OscConfig+0x364>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7ff f842 	bl	8000db0 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7ff f83e 	bl	8000db0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e07c      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d46:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ee      	bne.n	8001d30 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	4a3a      	ldr	r2, [pc, #232]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d068      	beq.n	8001e3e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d060      	beq.n	8001e3a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d145      	bne.n	8001e0c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCC_OscConfig+0x4b0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7ff f813 	bl	8000db0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff f80f 	bl	8000db0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e04f      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69da      	ldr	r2, [r3, #28]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	019b      	lsls	r3, r3, #6
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	061b      	lsls	r3, r3, #24
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	071b      	lsls	r3, r3, #28
 8001dd8:	491b      	ldr	r1, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_RCC_OscConfig+0x4b0>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7fe ffe4 	bl	8000db0 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dec:	f7fe ffe0 	bl	8000db0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e020      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x44c>
 8001e0a:	e018      	b.n	8001e3e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_RCC_OscConfig+0x4b0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe ffcd 	bl	8000db0 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe ffc9 	bl	8000db0 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e009      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_RCC_OscConfig+0x4a8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x47a>
 8001e38:	e001      	b.n	8001e3e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	42470060 	.word	0x42470060

08001e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e01d      	b.n	8001ea2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f815 	bl	8001eaa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f000 f968 	bl	8002168 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b06      	cmp	r3, #6
 8001ee6:	d007      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d122      	bne.n	8001f62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d11b      	bne.n	8001f62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f06f 0202 	mvn.w	r2, #2
 8001f32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f8ee 	bl	800212a <HAL_TIM_IC_CaptureCallback>
 8001f4e:	e005      	b.n	8001f5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8e0 	bl	8002116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8f1 	bl	800213e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d122      	bne.n	8001fb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d11b      	bne.n	8001fb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f06f 0204 	mvn.w	r2, #4
 8001f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8c4 	bl	800212a <HAL_TIM_IC_CaptureCallback>
 8001fa2:	e005      	b.n	8001fb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f8b6 	bl	8002116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8c7 	bl	800213e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d122      	bne.n	800200a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d11b      	bne.n	800200a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f06f 0208 	mvn.w	r2, #8
 8001fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f89a 	bl	800212a <HAL_TIM_IC_CaptureCallback>
 8001ff6:	e005      	b.n	8002004 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f88c 	bl	8002116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f89d 	bl	800213e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b10      	cmp	r3, #16
 8002016:	d122      	bne.n	800205e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b10      	cmp	r3, #16
 8002024:	d11b      	bne.n	800205e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f06f 0210 	mvn.w	r2, #16
 800202e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2208      	movs	r2, #8
 8002034:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f870 	bl	800212a <HAL_TIM_IC_CaptureCallback>
 800204a:	e005      	b.n	8002058 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f862 	bl	8002116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f873 	bl	800213e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d10e      	bne.n	800208a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f06f 0201 	mvn.w	r2, #1
 8002082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7fe fc81 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d10e      	bne.n	80020b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a2:	2b80      	cmp	r3, #128	; 0x80
 80020a4:	d107      	bne.n	80020b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f903 	bl	80022bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b40      	cmp	r3, #64	; 0x40
 80020c2:	d10e      	bne.n	80020e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	2b40      	cmp	r3, #64	; 0x40
 80020d0:	d107      	bne.n	80020e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f838 	bl	8002152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d10e      	bne.n	800210e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d107      	bne.n	800210e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f06f 0220 	mvn.w	r2, #32
 8002106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8cd 	bl	80022a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a40      	ldr	r2, [pc, #256]	; (800227c <TIM_Base_SetConfig+0x114>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002186:	d00f      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3d      	ldr	r2, [pc, #244]	; (8002280 <TIM_Base_SetConfig+0x118>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00b      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3c      	ldr	r2, [pc, #240]	; (8002284 <TIM_Base_SetConfig+0x11c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3b      	ldr	r2, [pc, #236]	; (8002288 <TIM_Base_SetConfig+0x120>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d003      	beq.n	80021a8 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3a      	ldr	r2, [pc, #232]	; (800228c <TIM_Base_SetConfig+0x124>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d108      	bne.n	80021ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2f      	ldr	r2, [pc, #188]	; (800227c <TIM_Base_SetConfig+0x114>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d02b      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c8:	d027      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2c      	ldr	r2, [pc, #176]	; (8002280 <TIM_Base_SetConfig+0x118>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d023      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <TIM_Base_SetConfig+0x11c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <TIM_Base_SetConfig+0x120>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01b      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a29      	ldr	r2, [pc, #164]	; (800228c <TIM_Base_SetConfig+0x124>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d017      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a28      	ldr	r2, [pc, #160]	; (8002290 <TIM_Base_SetConfig+0x128>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a27      	ldr	r2, [pc, #156]	; (8002294 <TIM_Base_SetConfig+0x12c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00f      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a26      	ldr	r2, [pc, #152]	; (8002298 <TIM_Base_SetConfig+0x130>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00b      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a25      	ldr	r2, [pc, #148]	; (800229c <TIM_Base_SetConfig+0x134>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <TIM_Base_SetConfig+0x138>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d003      	beq.n	800221a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <TIM_Base_SetConfig+0x13c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d108      	bne.n	800222c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <TIM_Base_SetConfig+0x114>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <TIM_Base_SetConfig+0xf8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a0c      	ldr	r2, [pc, #48]	; (800228c <TIM_Base_SetConfig+0x124>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d103      	bne.n	8002268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	615a      	str	r2, [r3, #20]
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40010000 	.word	0x40010000
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800
 8002288:	40000c00 	.word	0x40000c00
 800228c:	40010400 	.word	0x40010400
 8002290:	40014000 	.word	0x40014000
 8002294:	40014400 	.word	0x40014400
 8002298:	40014800 	.word	0x40014800
 800229c:	40001800 	.word	0x40001800
 80022a0:	40001c00 	.word	0x40001c00
 80022a4:	40002000 	.word	0x40002000

080022a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e03f      	b.n	8002362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe fbc6 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2224      	movs	r2, #36	; 0x24
 8002300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 faef 	bl	80028f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	4613      	mov	r3, r2
 8002376:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b20      	cmp	r3, #32
 8002382:	d130      	bne.n	80023e6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_UART_Transmit_IT+0x26>
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e029      	b.n	80023e8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Transmit_IT+0x38>
 800239e:	2302      	movs	r3, #2
 80023a0:	e022      	b.n	80023e8 <HAL_UART_Transmit_IT+0x7e>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	88fa      	ldrh	r2, [r7, #6]
 80023b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	88fa      	ldrh	r2, [r7, #6]
 80023ba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2221      	movs	r2, #33	; 0x21
 80023c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
  }
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	4613      	mov	r3, r2
 8002400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	d140      	bne.n	8002490 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_UART_Receive_IT+0x26>
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e039      	b.n	8002492 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_UART_Receive_IT+0x38>
 8002428:	2302      	movs	r3, #2
 800242a:	e032      	b.n	8002492 <HAL_UART_Receive_IT+0x9e>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	88fa      	ldrh	r2, [r7, #6]
 800243e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	88fa      	ldrh	r2, [r7, #6]
 8002444:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2222      	movs	r2, #34	; 0x22
 8002450:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0220 	orr.w	r2, r2, #32
 800248a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_UART_IRQHandler+0x52>
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f982 	bl	80027f4 <UART_Receive_IT>
      return;
 80024f0:	e0d1      	b.n	8002696 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80b0 	beq.w	800265a <HAL_UART_IRQHandler+0x1ba>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <HAL_UART_IRQHandler+0x70>
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80a5 	beq.w	800265a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_UART_IRQHandler+0x90>
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_UART_IRQHandler+0xb0>
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002548:	f043 0202 	orr.w	r2, r3, #2
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_UART_IRQHandler+0xd0>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002568:	f043 0204 	orr.w	r2, r3, #4
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00f      	beq.n	800259a <HAL_UART_IRQHandler+0xfa>
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <HAL_UART_IRQHandler+0xee>
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	f043 0208 	orr.w	r2, r3, #8
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d078      	beq.n	8002694 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <HAL_UART_IRQHandler+0x11c>
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f91c 	bl	80027f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <HAL_UART_IRQHandler+0x144>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d031      	beq.n	8002648 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f865 	bl	80026b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f4:	2b40      	cmp	r3, #64	; 0x40
 80025f6:	d123      	bne.n	8002640 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002606:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	2b00      	cmp	r3, #0
 800260e:	d013      	beq.n	8002638 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002614:	4a21      	ldr	r2, [pc, #132]	; (800269c <HAL_UART_IRQHandler+0x1fc>)
 8002616:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fcb5 	bl	8000f8c <HAL_DMA_Abort_IT>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d016      	beq.n	8002656 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002632:	4610      	mov	r0, r2
 8002634:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002636:	e00e      	b.n	8002656 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f831 	bl	80026a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263e:	e00a      	b.n	8002656 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f82d 	bl	80026a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002646:	e006      	b.n	8002656 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f829 	bl	80026a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002654:	e01e      	b.n	8002694 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002656:	bf00      	nop
    return;
 8002658:	e01c      	b.n	8002694 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_UART_IRQHandler+0x1d6>
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f852 	bl	8002718 <UART_Transmit_IT>
    return;
 8002674:	e00f      	b.n	8002696 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_UART_IRQHandler+0x1f6>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f89a 	bl	80027c4 <UART_EndTransmit_IT>
    return;
 8002690:	bf00      	nop
 8002692:	e000      	b.n	8002696 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002694:	bf00      	nop
  }
}
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	080026f1 	.word	0x080026f1

080026a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff ffc8 	bl	80026a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b21      	cmp	r3, #33	; 0x21
 800272a:	d144      	bne.n	80027b6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002734:	d11a      	bne.n	800276c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800274a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	1c9a      	adds	r2, r3, #2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	621a      	str	r2, [r3, #32]
 800275e:	e00e      	b.n	800277e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	621a      	str	r2, [r3, #32]
 800276a:	e008      	b.n	800277e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	1c59      	adds	r1, r3, #1
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6211      	str	r1, [r2, #32]
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29b      	uxth	r3, r3
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4619      	mov	r1, r3
 800278c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e000      	b.n	80027b8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
  }
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7fe f8c5 	bl	8000974 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b22      	cmp	r3, #34	; 0x22
 8002806:	d171      	bne.n	80028ec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002810:	d123      	bne.n	800285a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10e      	bne.n	800283e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	1c9a      	adds	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28
 800283c:	e029      	b.n	8002892 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	b29b      	uxth	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
 8002858:	e01b      	b.n	8002892 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10a      	bne.n	8002878 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6858      	ldr	r0, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	1c59      	adds	r1, r3, #1
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6291      	str	r1, [r2, #40]	; 0x28
 8002872:	b2c2      	uxtb	r2, r0
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e00c      	b.n	8002892 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	1c58      	adds	r0, r3, #1
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	6288      	str	r0, [r1, #40]	; 0x28
 800288a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29b      	uxth	r3, r3
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4619      	mov	r1, r3
 80028a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d120      	bne.n	80028e8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0220 	bic.w	r2, r2, #32
 80028b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe f802 	bl	80008e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e002      	b.n	80028ee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	e000      	b.n	80028ee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80028ec:	2302      	movs	r3, #2
  }
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800293a:	f023 030c 	bic.w	r3, r3, #12
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	68f9      	ldr	r1, [r7, #12]
 8002944:	430b      	orrs	r3, r1
 8002946:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002966:	f040 818b 	bne.w	8002c80 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4ac1      	ldr	r2, [pc, #772]	; (8002c74 <UART_SetConfig+0x37c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d005      	beq.n	8002980 <UART_SetConfig+0x88>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4abf      	ldr	r2, [pc, #764]	; (8002c78 <UART_SetConfig+0x380>)
 800297a:	4293      	cmp	r3, r2
 800297c:	f040 80bd 	bne.w	8002afa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002980:	f7fe fe28 	bl	80015d4 <HAL_RCC_GetPCLK2Freq>
 8002984:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	461d      	mov	r5, r3
 800298a:	f04f 0600 	mov.w	r6, #0
 800298e:	46a8      	mov	r8, r5
 8002990:	46b1      	mov	r9, r6
 8002992:	eb18 0308 	adds.w	r3, r8, r8
 8002996:	eb49 0409 	adc.w	r4, r9, r9
 800299a:	4698      	mov	r8, r3
 800299c:	46a1      	mov	r9, r4
 800299e:	eb18 0805 	adds.w	r8, r8, r5
 80029a2:	eb49 0906 	adc.w	r9, r9, r6
 80029a6:	f04f 0100 	mov.w	r1, #0
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029ba:	4688      	mov	r8, r1
 80029bc:	4691      	mov	r9, r2
 80029be:	eb18 0005 	adds.w	r0, r8, r5
 80029c2:	eb49 0106 	adc.w	r1, r9, r6
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	461d      	mov	r5, r3
 80029cc:	f04f 0600 	mov.w	r6, #0
 80029d0:	196b      	adds	r3, r5, r5
 80029d2:	eb46 0406 	adc.w	r4, r6, r6
 80029d6:	461a      	mov	r2, r3
 80029d8:	4623      	mov	r3, r4
 80029da:	f7fd fc19 	bl	8000210 <__aeabi_uldivmod>
 80029de:	4603      	mov	r3, r0
 80029e0:	460c      	mov	r4, r1
 80029e2:	461a      	mov	r2, r3
 80029e4:	4ba5      	ldr	r3, [pc, #660]	; (8002c7c <UART_SetConfig+0x384>)
 80029e6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	461d      	mov	r5, r3
 80029f4:	f04f 0600 	mov.w	r6, #0
 80029f8:	46a9      	mov	r9, r5
 80029fa:	46b2      	mov	sl, r6
 80029fc:	eb19 0309 	adds.w	r3, r9, r9
 8002a00:	eb4a 040a 	adc.w	r4, sl, sl
 8002a04:	4699      	mov	r9, r3
 8002a06:	46a2      	mov	sl, r4
 8002a08:	eb19 0905 	adds.w	r9, r9, r5
 8002a0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a10:	f04f 0100 	mov.w	r1, #0
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a24:	4689      	mov	r9, r1
 8002a26:	4692      	mov	sl, r2
 8002a28:	eb19 0005 	adds.w	r0, r9, r5
 8002a2c:	eb4a 0106 	adc.w	r1, sl, r6
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	461d      	mov	r5, r3
 8002a36:	f04f 0600 	mov.w	r6, #0
 8002a3a:	196b      	adds	r3, r5, r5
 8002a3c:	eb46 0406 	adc.w	r4, r6, r6
 8002a40:	461a      	mov	r2, r3
 8002a42:	4623      	mov	r3, r4
 8002a44:	f7fd fbe4 	bl	8000210 <__aeabi_uldivmod>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b8b      	ldr	r3, [pc, #556]	; (8002c7c <UART_SetConfig+0x384>)
 8002a50:	fba3 1302 	umull	r1, r3, r3, r2
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	2164      	movs	r1, #100	; 0x64
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	3332      	adds	r3, #50	; 0x32
 8002a62:	4a86      	ldr	r2, [pc, #536]	; (8002c7c <UART_SetConfig+0x384>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a70:	4498      	add	r8, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	461d      	mov	r5, r3
 8002a76:	f04f 0600 	mov.w	r6, #0
 8002a7a:	46a9      	mov	r9, r5
 8002a7c:	46b2      	mov	sl, r6
 8002a7e:	eb19 0309 	adds.w	r3, r9, r9
 8002a82:	eb4a 040a 	adc.w	r4, sl, sl
 8002a86:	4699      	mov	r9, r3
 8002a88:	46a2      	mov	sl, r4
 8002a8a:	eb19 0905 	adds.w	r9, r9, r5
 8002a8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002aa2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002aa6:	4689      	mov	r9, r1
 8002aa8:	4692      	mov	sl, r2
 8002aaa:	eb19 0005 	adds.w	r0, r9, r5
 8002aae:	eb4a 0106 	adc.w	r1, sl, r6
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	f04f 0600 	mov.w	r6, #0
 8002abc:	196b      	adds	r3, r5, r5
 8002abe:	eb46 0406 	adc.w	r4, r6, r6
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	f7fd fba3 	bl	8000210 <__aeabi_uldivmod>
 8002aca:	4603      	mov	r3, r0
 8002acc:	460c      	mov	r4, r1
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b6a      	ldr	r3, [pc, #424]	; (8002c7c <UART_SetConfig+0x384>)
 8002ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2164      	movs	r1, #100	; 0x64
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	3332      	adds	r3, #50	; 0x32
 8002ae4:	4a65      	ldr	r2, [pc, #404]	; (8002c7c <UART_SetConfig+0x384>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	f003 0207 	and.w	r2, r3, #7
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4442      	add	r2, r8
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	e26f      	b.n	8002fda <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002afa:	f7fe fd57 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 8002afe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	461d      	mov	r5, r3
 8002b04:	f04f 0600 	mov.w	r6, #0
 8002b08:	46a8      	mov	r8, r5
 8002b0a:	46b1      	mov	r9, r6
 8002b0c:	eb18 0308 	adds.w	r3, r8, r8
 8002b10:	eb49 0409 	adc.w	r4, r9, r9
 8002b14:	4698      	mov	r8, r3
 8002b16:	46a1      	mov	r9, r4
 8002b18:	eb18 0805 	adds.w	r8, r8, r5
 8002b1c:	eb49 0906 	adc.w	r9, r9, r6
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b34:	4688      	mov	r8, r1
 8002b36:	4691      	mov	r9, r2
 8002b38:	eb18 0005 	adds.w	r0, r8, r5
 8002b3c:	eb49 0106 	adc.w	r1, r9, r6
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	461d      	mov	r5, r3
 8002b46:	f04f 0600 	mov.w	r6, #0
 8002b4a:	196b      	adds	r3, r5, r5
 8002b4c:	eb46 0406 	adc.w	r4, r6, r6
 8002b50:	461a      	mov	r2, r3
 8002b52:	4623      	mov	r3, r4
 8002b54:	f7fd fb5c 	bl	8000210 <__aeabi_uldivmod>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <UART_SetConfig+0x384>)
 8002b60:	fba3 2302 	umull	r2, r3, r3, r2
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	461d      	mov	r5, r3
 8002b6e:	f04f 0600 	mov.w	r6, #0
 8002b72:	46a9      	mov	r9, r5
 8002b74:	46b2      	mov	sl, r6
 8002b76:	eb19 0309 	adds.w	r3, r9, r9
 8002b7a:	eb4a 040a 	adc.w	r4, sl, sl
 8002b7e:	4699      	mov	r9, r3
 8002b80:	46a2      	mov	sl, r4
 8002b82:	eb19 0905 	adds.w	r9, r9, r5
 8002b86:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b9e:	4689      	mov	r9, r1
 8002ba0:	4692      	mov	sl, r2
 8002ba2:	eb19 0005 	adds.w	r0, r9, r5
 8002ba6:	eb4a 0106 	adc.w	r1, sl, r6
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	461d      	mov	r5, r3
 8002bb0:	f04f 0600 	mov.w	r6, #0
 8002bb4:	196b      	adds	r3, r5, r5
 8002bb6:	eb46 0406 	adc.w	r4, r6, r6
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4623      	mov	r3, r4
 8002bbe:	f7fd fb27 	bl	8000210 <__aeabi_uldivmod>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	460c      	mov	r4, r1
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <UART_SetConfig+0x384>)
 8002bca:	fba3 1302 	umull	r1, r3, r3, r2
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	2164      	movs	r1, #100	; 0x64
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	3332      	adds	r3, #50	; 0x32
 8002bdc:	4a27      	ldr	r2, [pc, #156]	; (8002c7c <UART_SetConfig+0x384>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bea:	4498      	add	r8, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	461d      	mov	r5, r3
 8002bf0:	f04f 0600 	mov.w	r6, #0
 8002bf4:	46a9      	mov	r9, r5
 8002bf6:	46b2      	mov	sl, r6
 8002bf8:	eb19 0309 	adds.w	r3, r9, r9
 8002bfc:	eb4a 040a 	adc.w	r4, sl, sl
 8002c00:	4699      	mov	r9, r3
 8002c02:	46a2      	mov	sl, r4
 8002c04:	eb19 0905 	adds.w	r9, r9, r5
 8002c08:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c0c:	f04f 0100 	mov.w	r1, #0
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c20:	4689      	mov	r9, r1
 8002c22:	4692      	mov	sl, r2
 8002c24:	eb19 0005 	adds.w	r0, r9, r5
 8002c28:	eb4a 0106 	adc.w	r1, sl, r6
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	461d      	mov	r5, r3
 8002c32:	f04f 0600 	mov.w	r6, #0
 8002c36:	196b      	adds	r3, r5, r5
 8002c38:	eb46 0406 	adc.w	r4, r6, r6
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4623      	mov	r3, r4
 8002c40:	f7fd fae6 	bl	8000210 <__aeabi_uldivmod>
 8002c44:	4603      	mov	r3, r0
 8002c46:	460c      	mov	r4, r1
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <UART_SetConfig+0x384>)
 8002c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	2164      	movs	r1, #100	; 0x64
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	3332      	adds	r3, #50	; 0x32
 8002c5e:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <UART_SetConfig+0x384>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	f003 0207 	and.w	r2, r3, #7
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4442      	add	r2, r8
 8002c70:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002c72:	e1b2      	b.n	8002fda <UART_SetConfig+0x6e2>
 8002c74:	40011000 	.word	0x40011000
 8002c78:	40011400 	.word	0x40011400
 8002c7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4ad7      	ldr	r2, [pc, #860]	; (8002fe4 <UART_SetConfig+0x6ec>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d005      	beq.n	8002c96 <UART_SetConfig+0x39e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4ad6      	ldr	r2, [pc, #856]	; (8002fe8 <UART_SetConfig+0x6f0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	f040 80d1 	bne.w	8002e38 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c96:	f7fe fc9d 	bl	80015d4 <HAL_RCC_GetPCLK2Freq>
 8002c9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	469a      	mov	sl, r3
 8002ca0:	f04f 0b00 	mov.w	fp, #0
 8002ca4:	46d0      	mov	r8, sl
 8002ca6:	46d9      	mov	r9, fp
 8002ca8:	eb18 0308 	adds.w	r3, r8, r8
 8002cac:	eb49 0409 	adc.w	r4, r9, r9
 8002cb0:	4698      	mov	r8, r3
 8002cb2:	46a1      	mov	r9, r4
 8002cb4:	eb18 080a 	adds.w	r8, r8, sl
 8002cb8:	eb49 090b 	adc.w	r9, r9, fp
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cc8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ccc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cd0:	4688      	mov	r8, r1
 8002cd2:	4691      	mov	r9, r2
 8002cd4:	eb1a 0508 	adds.w	r5, sl, r8
 8002cd8:	eb4b 0609 	adc.w	r6, fp, r9
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	f04f 0400 	mov.w	r4, #0
 8002cee:	0094      	lsls	r4, r2, #2
 8002cf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cf4:	008b      	lsls	r3, r1, #2
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4623      	mov	r3, r4
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	4631      	mov	r1, r6
 8002cfe:	f7fd fa87 	bl	8000210 <__aeabi_uldivmod>
 8002d02:	4603      	mov	r3, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	461a      	mov	r2, r3
 8002d08:	4bb8      	ldr	r3, [pc, #736]	; (8002fec <UART_SetConfig+0x6f4>)
 8002d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	469b      	mov	fp, r3
 8002d18:	f04f 0c00 	mov.w	ip, #0
 8002d1c:	46d9      	mov	r9, fp
 8002d1e:	46e2      	mov	sl, ip
 8002d20:	eb19 0309 	adds.w	r3, r9, r9
 8002d24:	eb4a 040a 	adc.w	r4, sl, sl
 8002d28:	4699      	mov	r9, r3
 8002d2a:	46a2      	mov	sl, r4
 8002d2c:	eb19 090b 	adds.w	r9, r9, fp
 8002d30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d34:	f04f 0100 	mov.w	r1, #0
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d48:	4689      	mov	r9, r1
 8002d4a:	4692      	mov	sl, r2
 8002d4c:	eb1b 0509 	adds.w	r5, fp, r9
 8002d50:	eb4c 060a 	adc.w	r6, ip, sl
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	f04f 0400 	mov.w	r4, #0
 8002d66:	0094      	lsls	r4, r2, #2
 8002d68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d6c:	008b      	lsls	r3, r1, #2
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4623      	mov	r3, r4
 8002d72:	4628      	mov	r0, r5
 8002d74:	4631      	mov	r1, r6
 8002d76:	f7fd fa4b 	bl	8000210 <__aeabi_uldivmod>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4b9a      	ldr	r3, [pc, #616]	; (8002fec <UART_SetConfig+0x6f4>)
 8002d82:	fba3 1302 	umull	r1, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2164      	movs	r1, #100	; 0x64
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	3332      	adds	r3, #50	; 0x32
 8002d94:	4a95      	ldr	r2, [pc, #596]	; (8002fec <UART_SetConfig+0x6f4>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da0:	4498      	add	r8, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	469b      	mov	fp, r3
 8002da6:	f04f 0c00 	mov.w	ip, #0
 8002daa:	46d9      	mov	r9, fp
 8002dac:	46e2      	mov	sl, ip
 8002dae:	eb19 0309 	adds.w	r3, r9, r9
 8002db2:	eb4a 040a 	adc.w	r4, sl, sl
 8002db6:	4699      	mov	r9, r3
 8002db8:	46a2      	mov	sl, r4
 8002dba:	eb19 090b 	adds.w	r9, r9, fp
 8002dbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002dc2:	f04f 0100 	mov.w	r1, #0
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dd6:	4689      	mov	r9, r1
 8002dd8:	4692      	mov	sl, r2
 8002dda:	eb1b 0509 	adds.w	r5, fp, r9
 8002dde:	eb4c 060a 	adc.w	r6, ip, sl
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4619      	mov	r1, r3
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	f04f 0400 	mov.w	r4, #0
 8002df4:	0094      	lsls	r4, r2, #2
 8002df6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dfa:	008b      	lsls	r3, r1, #2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4623      	mov	r3, r4
 8002e00:	4628      	mov	r0, r5
 8002e02:	4631      	mov	r1, r6
 8002e04:	f7fd fa04 	bl	8000210 <__aeabi_uldivmod>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b77      	ldr	r3, [pc, #476]	; (8002fec <UART_SetConfig+0x6f4>)
 8002e10:	fba3 1302 	umull	r1, r3, r3, r2
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	2164      	movs	r1, #100	; 0x64
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	3332      	adds	r3, #50	; 0x32
 8002e22:	4a72      	ldr	r2, [pc, #456]	; (8002fec <UART_SetConfig+0x6f4>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	f003 020f 	and.w	r2, r3, #15
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4442      	add	r2, r8
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	e0d0      	b.n	8002fda <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e38:	f7fe fbb8 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 8002e3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	469a      	mov	sl, r3
 8002e42:	f04f 0b00 	mov.w	fp, #0
 8002e46:	46d0      	mov	r8, sl
 8002e48:	46d9      	mov	r9, fp
 8002e4a:	eb18 0308 	adds.w	r3, r8, r8
 8002e4e:	eb49 0409 	adc.w	r4, r9, r9
 8002e52:	4698      	mov	r8, r3
 8002e54:	46a1      	mov	r9, r4
 8002e56:	eb18 080a 	adds.w	r8, r8, sl
 8002e5a:	eb49 090b 	adc.w	r9, r9, fp
 8002e5e:	f04f 0100 	mov.w	r1, #0
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e72:	4688      	mov	r8, r1
 8002e74:	4691      	mov	r9, r2
 8002e76:	eb1a 0508 	adds.w	r5, sl, r8
 8002e7a:	eb4b 0609 	adc.w	r6, fp, r9
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4619      	mov	r1, r3
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	f04f 0400 	mov.w	r4, #0
 8002e90:	0094      	lsls	r4, r2, #2
 8002e92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e96:	008b      	lsls	r3, r1, #2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	4631      	mov	r1, r6
 8002ea0:	f7fd f9b6 	bl	8000210 <__aeabi_uldivmod>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b50      	ldr	r3, [pc, #320]	; (8002fec <UART_SetConfig+0x6f4>)
 8002eac:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	469b      	mov	fp, r3
 8002eba:	f04f 0c00 	mov.w	ip, #0
 8002ebe:	46d9      	mov	r9, fp
 8002ec0:	46e2      	mov	sl, ip
 8002ec2:	eb19 0309 	adds.w	r3, r9, r9
 8002ec6:	eb4a 040a 	adc.w	r4, sl, sl
 8002eca:	4699      	mov	r9, r3
 8002ecc:	46a2      	mov	sl, r4
 8002ece:	eb19 090b 	adds.w	r9, r9, fp
 8002ed2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ee6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eea:	4689      	mov	r9, r1
 8002eec:	4692      	mov	sl, r2
 8002eee:	eb1b 0509 	adds.w	r5, fp, r9
 8002ef2:	eb4c 060a 	adc.w	r6, ip, sl
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4619      	mov	r1, r3
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f04f 0400 	mov.w	r4, #0
 8002f08:	0094      	lsls	r4, r2, #2
 8002f0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f0e:	008b      	lsls	r3, r1, #2
 8002f10:	461a      	mov	r2, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	4628      	mov	r0, r5
 8002f16:	4631      	mov	r1, r6
 8002f18:	f7fd f97a 	bl	8000210 <__aeabi_uldivmod>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	460c      	mov	r4, r1
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b32      	ldr	r3, [pc, #200]	; (8002fec <UART_SetConfig+0x6f4>)
 8002f24:	fba3 1302 	umull	r1, r3, r3, r2
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	2164      	movs	r1, #100	; 0x64
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	3332      	adds	r3, #50	; 0x32
 8002f36:	4a2d      	ldr	r2, [pc, #180]	; (8002fec <UART_SetConfig+0x6f4>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f42:	4498      	add	r8, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	469b      	mov	fp, r3
 8002f48:	f04f 0c00 	mov.w	ip, #0
 8002f4c:	46d9      	mov	r9, fp
 8002f4e:	46e2      	mov	sl, ip
 8002f50:	eb19 0309 	adds.w	r3, r9, r9
 8002f54:	eb4a 040a 	adc.w	r4, sl, sl
 8002f58:	4699      	mov	r9, r3
 8002f5a:	46a2      	mov	sl, r4
 8002f5c:	eb19 090b 	adds.w	r9, r9, fp
 8002f60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f78:	4689      	mov	r9, r1
 8002f7a:	4692      	mov	sl, r2
 8002f7c:	eb1b 0509 	adds.w	r5, fp, r9
 8002f80:	eb4c 060a 	adc.w	r6, ip, sl
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	f04f 0400 	mov.w	r4, #0
 8002f96:	0094      	lsls	r4, r2, #2
 8002f98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f9c:	008b      	lsls	r3, r1, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	f7fd f933 	bl	8000210 <__aeabi_uldivmod>
 8002faa:	4603      	mov	r3, r0
 8002fac:	460c      	mov	r4, r1
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <UART_SetConfig+0x6f4>)
 8002fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2164      	movs	r1, #100	; 0x64
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	3332      	adds	r3, #50	; 0x32
 8002fc4:	4a09      	ldr	r2, [pc, #36]	; (8002fec <UART_SetConfig+0x6f4>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	f003 020f 	and.w	r2, r3, #15
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4442      	add	r2, r8
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	e7ff      	b.n	8002fda <UART_SetConfig+0x6e2>
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe4:	40011000 	.word	0x40011000
 8002fe8:	40011400 	.word	0x40011400
 8002fec:	51eb851f 	.word	0x51eb851f

08002ff0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003002:	2b84      	cmp	r3, #132	; 0x84
 8003004:	d005      	beq.n	8003012 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003006:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4413      	add	r3, r2
 800300e:	3303      	adds	r3, #3
 8003010:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003012:	68fb      	ldr	r3, [r7, #12]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003026:	f3ef 8305 	mrs	r3, IPSR
 800302a:	607b      	str	r3, [r7, #4]
  return(result);
 800302c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf14      	ite	ne
 8003032:	2301      	movne	r3, #1
 8003034:	2300      	moveq	r3, #0
 8003036:	b2db      	uxtb	r3, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003048:	f001 f8a0 	bl	800418c <vTaskStartScheduler>
  
  return osOK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	bd80      	pop	{r7, pc}

08003052 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003054:	b089      	sub	sp, #36	; 0x24
 8003056:	af04      	add	r7, sp, #16
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d020      	beq.n	80030a6 <osThreadCreate+0x54>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01c      	beq.n	80030a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685c      	ldr	r4, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681d      	ldr	r5, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691e      	ldr	r6, [r3, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ffb6 	bl	8002ff0 <makeFreeRtosPriority>
 8003084:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800308e:	9202      	str	r2, [sp, #8]
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	9100      	str	r1, [sp, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4632      	mov	r2, r6
 8003098:	4629      	mov	r1, r5
 800309a:	4620      	mov	r0, r4
 800309c:	f000 fee7 	bl	8003e6e <xTaskCreateStatic>
 80030a0:	4603      	mov	r3, r0
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	e01c      	b.n	80030e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685c      	ldr	r4, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030b2:	b29e      	uxth	r6, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ff98 	bl	8002ff0 <makeFreeRtosPriority>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	9200      	str	r2, [sp, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	4632      	mov	r2, r6
 80030ce:	4629      	mov	r1, r5
 80030d0:	4620      	mov	r0, r4
 80030d2:	f000 ff26 	bl	8003f22 <xTaskCreate>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d001      	beq.n	80030e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	e000      	b.n	80030e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80030e0:	68fb      	ldr	r3, [r7, #12]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030ea <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80030ea:	b590      	push	{r4, r7, lr}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af02      	add	r7, sp, #8
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d012      	beq.n	8003122 <osMessageCreate+0x38>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68dc      	ldr	r4, [r3, #12]
 8003114:	2300      	movs	r3, #0
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4623      	mov	r3, r4
 800311a:	f000 f9df 	bl	80034dc <xQueueGenericCreateStatic>
 800311e:	4603      	mov	r3, r0
 8003120:	e008      	b.n	8003134 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	4619      	mov	r1, r3
 800312e:	f000 fa48 	bl	80035c2 <xQueueGenericCreate>
 8003132:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bd90      	pop	{r4, r7, pc}

0800313c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <osMessagePut+0x1e>
    ticks = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800315a:	f7ff ff61 	bl	8003020 <inHandlerMode>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d018      	beq.n	8003196 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003164:	f107 0210 	add.w	r2, r7, #16
 8003168:	f107 0108 	add.w	r1, r7, #8
 800316c:	2300      	movs	r3, #0
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fb80 	bl	8003874 <xQueueGenericSendFromISR>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d001      	beq.n	800317e <osMessagePut+0x42>
      return osErrorOS;
 800317a:	23ff      	movs	r3, #255	; 0xff
 800317c:	e018      	b.n	80031b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d014      	beq.n	80031ae <osMessagePut+0x72>
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <osMessagePut+0x7c>)
 8003186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	e00b      	b.n	80031ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003196:	f107 0108 	add.w	r1, r7, #8
 800319a:	2300      	movs	r3, #0
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fa6e 	bl	8003680 <xQueueGenericSend>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d001      	beq.n	80031ae <osMessagePut+0x72>
      return osErrorOS;
 80031aa:	23ff      	movs	r3, #255	; 0xff
 80031ac:	e000      	b.n	80031b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b08b      	sub	sp, #44	; 0x2c
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	617b      	str	r3, [r7, #20]
    return event;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	461c      	mov	r4, r3
 80031de:	f107 0314 	add.w	r3, r7, #20
 80031e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031ea:	e054      	b.n	8003296 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031fa:	d103      	bne.n	8003204 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
 8003202:	e009      	b.n	8003218 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d006      	beq.n	8003218 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <osMessageGet+0x5c>
      ticks = 1;
 8003214:	2301      	movs	r3, #1
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003218:	f7ff ff02 	bl	8003020 <inHandlerMode>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01c      	beq.n	800325c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003222:	f107 0220 	add.w	r2, r7, #32
 8003226:	f107 0314 	add.w	r3, r7, #20
 800322a:	3304      	adds	r3, #4
 800322c:	4619      	mov	r1, r3
 800322e:	68b8      	ldr	r0, [r7, #8]
 8003230:	f000 fc90 	bl	8003b54 <xQueueReceiveFromISR>
 8003234:	4603      	mov	r3, r0
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800323a:	2310      	movs	r3, #16
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	e001      	b.n	8003244 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01d      	beq.n	8003286 <osMessageGet+0xca>
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <osMessageGet+0xe4>)
 800324c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	e014      	b.n	8003286 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	3304      	adds	r3, #4
 8003262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003264:	4619      	mov	r1, r3
 8003266:	68b8      	ldr	r0, [r7, #8]
 8003268:	f000 fb98 	bl	800399c <xQueueReceive>
 800326c:	4603      	mov	r3, r0
 800326e:	2b01      	cmp	r3, #1
 8003270:	d102      	bne.n	8003278 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003272:	2310      	movs	r3, #16
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e006      	b.n	8003286 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <osMessageGet+0xc6>
 800327e:	2300      	movs	r3, #0
 8003280:	e000      	b.n	8003284 <osMessageGet+0xc8>
 8003282:	2340      	movs	r3, #64	; 0x40
 8003284:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	461c      	mov	r4, r3
 800328a:	f107 0314 	add.w	r3, r7, #20
 800328e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	372c      	adds	r7, #44	; 0x2c
 800329a:	46bd      	mov	sp, r7
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	bf00      	nop
 80032a0:	e000ed04 	.word	0xe000ed04

080032a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f103 0208 	add.w	r2, r3, #8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f103 0208 	add.w	r2, r3, #8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f103 0208 	add.w	r2, r3, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335c:	d103      	bne.n	8003366 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e00c      	b.n	8003380 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3308      	adds	r3, #8
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e002      	b.n	8003374 <vListInsert+0x2e>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d2f6      	bcs.n	800336e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	601a      	str	r2, [r3, #0]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6892      	ldr	r2, [r2, #8]
 80033ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6852      	ldr	r2, [r2, #4]
 80033d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d103      	bne.n	80033ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	1e5a      	subs	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	e7fe      	b.n	8003432 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003434:	f001 fcca 	bl	8004dcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003440:	68f9      	ldr	r1, [r7, #12]
 8003442:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	441a      	add	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	3b01      	subs	r3, #1
 8003466:	68f9      	ldr	r1, [r7, #12]
 8003468:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	441a      	add	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	22ff      	movs	r2, #255	; 0xff
 8003478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	22ff      	movs	r2, #255	; 0xff
 8003480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d114      	bne.n	80034b4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01a      	beq.n	80034c8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3310      	adds	r3, #16
 8003496:	4618      	mov	r0, r3
 8003498:	f001 f8b6 	bl	8004608 <xTaskRemoveFromEventList>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d012      	beq.n	80034c8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <xQueueGenericReset+0xcc>)
 80034a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	e009      	b.n	80034c8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3310      	adds	r3, #16
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fef3 	bl	80032a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3324      	adds	r3, #36	; 0x24
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff feee 	bl	80032a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034c8:	f001 fcae 	bl	8004e28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034cc:	2301      	movs	r3, #1
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	e000ed04 	.word	0xe000ed04

080034dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08e      	sub	sp, #56	; 0x38
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <xQueueGenericCreateStatic+0x28>
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
 8003502:	e7fe      	b.n	8003502 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <xQueueGenericCreateStatic+0x42>
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
 800351c:	e7fe      	b.n	800351c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <xQueueGenericCreateStatic+0x4e>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <xQueueGenericCreateStatic+0x52>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <xQueueGenericCreateStatic+0x54>
 800352e:	2300      	movs	r3, #0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <xQueueGenericCreateStatic+0x6c>
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	e7fe      	b.n	8003546 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d102      	bne.n	8003554 <xQueueGenericCreateStatic+0x78>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <xQueueGenericCreateStatic+0x7c>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <xQueueGenericCreateStatic+0x7e>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <xQueueGenericCreateStatic+0x96>
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	e7fe      	b.n	8003570 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003572:	2348      	movs	r3, #72	; 0x48
 8003574:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b48      	cmp	r3, #72	; 0x48
 800357a:	d009      	beq.n	8003590 <xQueueGenericCreateStatic+0xb4>
 800357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	e7fe      	b.n	800358e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003590:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00d      	beq.n	80035b8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f844 	bl	8003640 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3730      	adds	r7, #48	; 0x30
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b08a      	sub	sp, #40	; 0x28
 80035c6:	af02      	add	r7, sp, #8
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	4613      	mov	r3, r2
 80035ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <xQueueGenericCreate+0x28>
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	e7fe      	b.n	80035e8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e004      	b.n	8003600 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	3348      	adds	r3, #72	; 0x48
 8003604:	4618      	mov	r0, r3
 8003606:	f001 fcfb 	bl	8005000 <pvPortMalloc>
 800360a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d011      	beq.n	8003636 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3348      	adds	r3, #72	; 0x48
 800361a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003624:	79fa      	ldrb	r2, [r7, #7]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	4613      	mov	r3, r2
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f805 	bl	8003640 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003636:	69bb      	ldr	r3, [r7, #24]
	}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e002      	b.n	8003662 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800366e:	2101      	movs	r1, #1
 8003670:	69b8      	ldr	r0, [r7, #24]
 8003672:	f7ff fecb 	bl	800340c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08e      	sub	sp, #56	; 0x38
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800368e:	2300      	movs	r3, #0
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <xQueueGenericSend+0x30>
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ae:	e7fe      	b.n	80036ae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d103      	bne.n	80036be <xQueueGenericSend+0x3e>
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <xQueueGenericSend+0x42>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <xQueueGenericSend+0x44>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d109      	bne.n	80036dc <xQueueGenericSend+0x5c>
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
 80036da:	e7fe      	b.n	80036da <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d103      	bne.n	80036ea <xQueueGenericSend+0x6a>
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <xQueueGenericSend+0x6e>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <xQueueGenericSend+0x70>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <xQueueGenericSend+0x88>
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	e7fe      	b.n	8003706 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003708:	f001 f934 	bl	8004974 <xTaskGetSchedulerState>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <xQueueGenericSend+0x98>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <xQueueGenericSend+0x9c>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <xQueueGenericSend+0x9e>
 800371c:	2300      	movs	r3, #0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <xQueueGenericSend+0xb6>
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	e7fe      	b.n	8003734 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003736:	f001 fb49 	bl	8004dcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	429a      	cmp	r2, r3
 8003744:	d302      	bcc.n	800374c <xQueueGenericSend+0xcc>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d129      	bne.n	80037a0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003752:	f000 fa7c 	bl	8003c4e <prvCopyDataToQueue>
 8003756:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	3324      	adds	r3, #36	; 0x24
 8003764:	4618      	mov	r0, r3
 8003766:	f000 ff4f 	bl	8004608 <xTaskRemoveFromEventList>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003770:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <xQueueGenericSend+0x1f0>)
 8003772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	e00a      	b.n	8003798 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003788:	4b39      	ldr	r3, [pc, #228]	; (8003870 <xQueueGenericSend+0x1f0>)
 800378a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003798:	f001 fb46 	bl	8004e28 <vPortExitCritical>
				return pdPASS;
 800379c:	2301      	movs	r3, #1
 800379e:	e063      	b.n	8003868 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037a6:	f001 fb3f 	bl	8004e28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e05c      	b.n	8003868 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 ff87 	bl	80046cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037be:	2301      	movs	r3, #1
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037c2:	f001 fb31 	bl	8004e28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037c6:	f000 fd3f 	bl	8004248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037ca:	f001 faff 	bl	8004dcc <vPortEnterCritical>
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037d4:	b25b      	sxtb	r3, r3
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037da:	d103      	bne.n	80037e4 <xQueueGenericSend+0x164>
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ea:	b25b      	sxtb	r3, r3
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f0:	d103      	bne.n	80037fa <xQueueGenericSend+0x17a>
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037fa:	f001 fb15 	bl	8004e28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037fe:	1d3a      	adds	r2, r7, #4
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 ff76 	bl	80046f8 <xTaskCheckForTimeOut>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d124      	bne.n	800385c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003814:	f000 fb13 	bl	8003e3e <prvIsQueueFull>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d018      	beq.n	8003850 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	3310      	adds	r3, #16
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f000 feca 	bl	80045c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800382c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800382e:	f000 fa9e 	bl	8003d6e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003832:	f000 fd17 	bl	8004264 <xTaskResumeAll>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	f47f af7c 	bne.w	8003736 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <xQueueGenericSend+0x1f0>)
 8003840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	e772      	b.n	8003736 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003852:	f000 fa8c 	bl	8003d6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003856:	f000 fd05 	bl	8004264 <xTaskResumeAll>
 800385a:	e76c      	b.n	8003736 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800385c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800385e:	f000 fa86 	bl	8003d6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003862:	f000 fcff 	bl	8004264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003866:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003868:	4618      	mov	r0, r3
 800386a:	3738      	adds	r7, #56	; 0x38
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	e000ed04 	.word	0xe000ed04

08003874 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	2b00      	cmp	r3, #0
 800388a:	d109      	bne.n	80038a0 <xQueueGenericSendFromISR+0x2c>
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
 800389e:	e7fe      	b.n	800389e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d103      	bne.n	80038ae <xQueueGenericSendFromISR+0x3a>
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <xQueueGenericSendFromISR+0x3e>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <xQueueGenericSendFromISR+0x40>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <xQueueGenericSendFromISR+0x58>
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	623b      	str	r3, [r7, #32]
 80038ca:	e7fe      	b.n	80038ca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d103      	bne.n	80038da <xQueueGenericSendFromISR+0x66>
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <xQueueGenericSendFromISR+0x6a>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <xQueueGenericSendFromISR+0x6c>
 80038de:	2300      	movs	r3, #0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <xQueueGenericSendFromISR+0x84>
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	e7fe      	b.n	80038f6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038f8:	f001 fb44 	bl	8004f84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038fc:	f3ef 8211 	mrs	r2, BASEPRI
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	61ba      	str	r2, [r7, #24]
 8003912:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003914:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	429a      	cmp	r2, r3
 8003922:	d302      	bcc.n	800392a <xQueueGenericSendFromISR+0xb6>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d12c      	bne.n	8003984 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800393a:	f000 f988 	bl	8003c4e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800393e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003946:	d112      	bne.n	800396e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	2b00      	cmp	r3, #0
 800394e:	d016      	beq.n	800397e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	3324      	adds	r3, #36	; 0x24
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fe57 	bl	8004608 <xTaskRemoveFromEventList>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00e      	beq.n	800397e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e007      	b.n	800397e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800396e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003972:	3301      	adds	r3, #1
 8003974:	b2db      	uxtb	r3, r3
 8003976:	b25a      	sxtb	r2, r3
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800397e:	2301      	movs	r3, #1
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003982:	e001      	b.n	8003988 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003984:	2300      	movs	r3, #0
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003994:	4618      	mov	r0, r3
 8003996:	3738      	adds	r7, #56	; 0x38
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	; 0x30
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <xQueueReceive+0x2e>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	623b      	str	r3, [r7, #32]
 80039c8:	e7fe      	b.n	80039c8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d103      	bne.n	80039d8 <xQueueReceive+0x3c>
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <xQueueReceive+0x40>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <xQueueReceive+0x42>
 80039dc:	2300      	movs	r3, #0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <xQueueReceive+0x5a>
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	e7fe      	b.n	80039f4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039f6:	f000 ffbd 	bl	8004974 <xTaskGetSchedulerState>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <xQueueReceive+0x6a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <xQueueReceive+0x6e>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <xQueueReceive+0x70>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <xQueueReceive+0x88>
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	e7fe      	b.n	8003a22 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a24:	f001 f9d2 	bl	8004dcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01f      	beq.n	8003a74 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a38:	f000 f973 	bl	8003d22 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	1e5a      	subs	r2, r3, #1
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00f      	beq.n	8003a6c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	3310      	adds	r3, #16
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fdd9 	bl	8004608 <xTaskRemoveFromEventList>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a5c:	4b3c      	ldr	r3, [pc, #240]	; (8003b50 <xQueueReceive+0x1b4>)
 8003a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a6c:	f001 f9dc 	bl	8004e28 <vPortExitCritical>
				return pdPASS;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e069      	b.n	8003b48 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a7a:	f001 f9d5 	bl	8004e28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e062      	b.n	8003b48 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d106      	bne.n	8003a96 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a88:	f107 0310 	add.w	r3, r7, #16
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fe1d 	bl	80046cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a92:	2301      	movs	r3, #1
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a96:	f001 f9c7 	bl	8004e28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a9a:	f000 fbd5 	bl	8004248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a9e:	f001 f995 	bl	8004dcc <vPortEnterCritical>
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aa8:	b25b      	sxtb	r3, r3
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aae:	d103      	bne.n	8003ab8 <xQueueReceive+0x11c>
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003abe:	b25b      	sxtb	r3, r3
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac4:	d103      	bne.n	8003ace <xQueueReceive+0x132>
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ace:	f001 f9ab 	bl	8004e28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ad2:	1d3a      	adds	r2, r7, #4
 8003ad4:	f107 0310 	add.w	r3, r7, #16
 8003ad8:	4611      	mov	r1, r2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fe0c 	bl	80046f8 <xTaskCheckForTimeOut>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d123      	bne.n	8003b2e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae8:	f000 f993 	bl	8003e12 <prvIsQueueEmpty>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d017      	beq.n	8003b22 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	3324      	adds	r3, #36	; 0x24
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fd60 	bl	80045c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b02:	f000 f934 	bl	8003d6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b06:	f000 fbad 	bl	8004264 <xTaskResumeAll>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d189      	bne.n	8003a24 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <xQueueReceive+0x1b4>)
 8003b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	e780      	b.n	8003a24 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b24:	f000 f923 	bl	8003d6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b28:	f000 fb9c 	bl	8004264 <xTaskResumeAll>
 8003b2c:	e77a      	b.n	8003a24 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b30:	f000 f91d 	bl	8003d6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b34:	f000 fb96 	bl	8004264 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b3a:	f000 f96a 	bl	8003e12 <prvIsQueueEmpty>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f43f af6f 	beq.w	8003a24 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3730      	adds	r7, #48	; 0x30
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08e      	sub	sp, #56	; 0x38
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <xQueueReceiveFromISR+0x2a>
 8003b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	623b      	str	r3, [r7, #32]
 8003b7c:	e7fe      	b.n	8003b7c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <xQueueReceiveFromISR+0x38>
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <xQueueReceiveFromISR+0x3c>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <xQueueReceiveFromISR+0x3e>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <xQueueReceiveFromISR+0x56>
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	e7fe      	b.n	8003ba8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003baa:	f001 f9eb 	bl	8004f84 <vPortValidateInterruptPriority>
	__asm volatile
 8003bae:	f3ef 8211 	mrs	r2, BASEPRI
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	61ba      	str	r2, [r7, #24]
 8003bc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003bc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02f      	beq.n	8003c36 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003be4:	f000 f89d 	bl	8003d22 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	1e5a      	subs	r2, r3, #1
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf8:	d112      	bne.n	8003c20 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	3310      	adds	r3, #16
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fcfe 	bl	8004608 <xTaskRemoveFromEventList>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00e      	beq.n	8003c30 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00b      	beq.n	8003c30 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e007      	b.n	8003c30 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c24:	3301      	adds	r3, #1
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	b25a      	sxtb	r2, r3
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003c30:	2301      	movs	r3, #1
 8003c32:	637b      	str	r3, [r7, #52]	; 0x34
 8003c34:	e001      	b.n	8003c3a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3738      	adds	r7, #56	; 0x38
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d14d      	bne.n	8003d10 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fe99 	bl	80049b0 <xTaskPriorityDisinherit>
 8003c7e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	e043      	b.n	8003d10 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d119      	bne.n	8003cc2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6858      	ldr	r0, [r3, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	461a      	mov	r2, r3
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	f001 fbab 	bl	80053f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	441a      	add	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d32b      	bcc.n	8003d10 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	e026      	b.n	8003d10 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	68d8      	ldr	r0, [r3, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	f001 fb91 	bl	80053f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	425b      	negs	r3, r3
 8003cdc:	441a      	add	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d207      	bcs.n	8003cfe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	425b      	negs	r3, r3
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d105      	bne.n	8003d10 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d18:	697b      	ldr	r3, [r7, #20]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d018      	beq.n	8003d66 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	441a      	add	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d303      	bcc.n	8003d56 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68d9      	ldr	r1, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	461a      	mov	r2, r3
 8003d60:	6838      	ldr	r0, [r7, #0]
 8003d62:	f001 fb47 	bl	80053f4 <memcpy>
	}
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d76:	f001 f829 	bl	8004dcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d80:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d82:	e011      	b.n	8003da8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d012      	beq.n	8003db2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3324      	adds	r3, #36	; 0x24
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fc39 	bl	8004608 <xTaskRemoveFromEventList>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d9c:	f000 fd0c 	bl	80047b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	dce9      	bgt.n	8003d84 <prvUnlockQueue+0x16>
 8003db0:	e000      	b.n	8003db4 <prvUnlockQueue+0x46>
					break;
 8003db2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	22ff      	movs	r2, #255	; 0xff
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003dbc:	f001 f834 	bl	8004e28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003dc0:	f001 f804 	bl	8004dcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dcc:	e011      	b.n	8003df2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d012      	beq.n	8003dfc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3310      	adds	r3, #16
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fc14 	bl	8004608 <xTaskRemoveFromEventList>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003de6:	f000 fce7 	bl	80047b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003dea:	7bbb      	ldrb	r3, [r7, #14]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003df2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	dce9      	bgt.n	8003dce <prvUnlockQueue+0x60>
 8003dfa:	e000      	b.n	8003dfe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003dfc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	22ff      	movs	r2, #255	; 0xff
 8003e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e06:	f001 f80f 	bl	8004e28 <vPortExitCritical>
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e1a:	f000 ffd7 	bl	8004dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e26:	2301      	movs	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e001      	b.n	8003e30 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e30:	f000 fffa 	bl	8004e28 <vPortExitCritical>

	return xReturn;
 8003e34:	68fb      	ldr	r3, [r7, #12]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e46:	f000 ffc1 	bl	8004dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d102      	bne.n	8003e5c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e56:	2301      	movs	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e001      	b.n	8003e60 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e60:	f000 ffe2 	bl	8004e28 <vPortExitCritical>

	return xReturn;
 8003e64:	68fb      	ldr	r3, [r7, #12]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b08e      	sub	sp, #56	; 0x38
 8003e72:	af04      	add	r7, sp, #16
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <xTaskCreateStatic+0x28>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	623b      	str	r3, [r7, #32]
 8003e94:	e7fe      	b.n	8003e94 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d109      	bne.n	8003eb0 <xTaskCreateStatic+0x42>
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e7fe      	b.n	8003eae <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003eb0:	2354      	movs	r3, #84	; 0x54
 8003eb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b54      	cmp	r3, #84	; 0x54
 8003eb8:	d009      	beq.n	8003ece <xTaskCreateStatic+0x60>
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	e7fe      	b.n	8003ecc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ece:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01e      	beq.n	8003f14 <xTaskCreateStatic+0xa6>
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01b      	beq.n	8003f14 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003eee:	2300      	movs	r3, #0
 8003ef0:	9303      	str	r3, [sp, #12]
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	9302      	str	r3, [sp, #8]
 8003ef6:	f107 0314 	add.w	r3, r7, #20
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f850 	bl	8003fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f0e:	f000 f8d3 	bl	80040b8 <prvAddNewTaskToReadyList>
 8003f12:	e001      	b.n	8003f18 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f18:	697b      	ldr	r3, [r7, #20]
	}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3728      	adds	r7, #40	; 0x28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b08c      	sub	sp, #48	; 0x30
 8003f26:	af04      	add	r7, sp, #16
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 f862 	bl	8005000 <pvPortMalloc>
 8003f3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00e      	beq.n	8003f62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f44:	2054      	movs	r0, #84	; 0x54
 8003f46:	f001 f85b 	bl	8005000 <pvPortMalloc>
 8003f4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
 8003f58:	e005      	b.n	8003f66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f001 f912 	bl	8005184 <vPortFree>
 8003f60:	e001      	b.n	8003f66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d017      	beq.n	8003f9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f74:	88fa      	ldrh	r2, [r7, #6]
 8003f76:	2300      	movs	r3, #0
 8003f78:	9303      	str	r3, [sp, #12]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	9302      	str	r3, [sp, #8]
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f80e 	bl	8003fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f90:	69f8      	ldr	r0, [r7, #28]
 8003f92:	f000 f891 	bl	80040b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e002      	b.n	8003fa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f023 0307 	bic.w	r3, r3, #7
 8003fd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <prvInitialiseNewTask+0x46>
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e7fe      	b.n	8003ff0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01f      	beq.n	8004038 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	e012      	b.n	8004024 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	7819      	ldrb	r1, [r3, #0]
 8004006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	3334      	adds	r3, #52	; 0x34
 800400e:	460a      	mov	r2, r1
 8004010:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d006      	beq.n	800402c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3301      	adds	r3, #1
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	2b0f      	cmp	r3, #15
 8004028:	d9e9      	bls.n	8003ffe <prvInitialiseNewTask+0x52>
 800402a:	e000      	b.n	800402e <prvInitialiseNewTask+0x82>
			{
				break;
 800402c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004036:	e003      	b.n	8004040 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	2b06      	cmp	r3, #6
 8004044:	d901      	bls.n	800404a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004046:	2306      	movs	r3, #6
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	2200      	movs	r2, #0
 800405a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	3304      	adds	r3, #4
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff f93f 	bl	80032e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	3318      	adds	r3, #24
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff f93a 	bl	80032e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004074:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	f1c3 0207 	rsb	r2, r3, #7
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004084:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	2200      	movs	r2, #0
 800408a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	69b8      	ldr	r0, [r7, #24]
 800409a:	f000 fd73 	bl	8004b84 <pxPortInitialiseStack>
 800409e:	4602      	mov	r2, r0
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040b0:	bf00      	nop
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040c0:	f000 fe84 	bl	8004dcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040c4:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <prvAddNewTaskToReadyList+0xb8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	4a29      	ldr	r2, [pc, #164]	; (8004170 <prvAddNewTaskToReadyList+0xb8>)
 80040cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040ce:	4b29      	ldr	r3, [pc, #164]	; (8004174 <prvAddNewTaskToReadyList+0xbc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040d6:	4a27      	ldr	r2, [pc, #156]	; (8004174 <prvAddNewTaskToReadyList+0xbc>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040dc:	4b24      	ldr	r3, [pc, #144]	; (8004170 <prvAddNewTaskToReadyList+0xb8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d110      	bne.n	8004106 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040e4:	f000 fb8c 	bl	8004800 <prvInitialiseTaskLists>
 80040e8:	e00d      	b.n	8004106 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040ea:	4b23      	ldr	r3, [pc, #140]	; (8004178 <prvAddNewTaskToReadyList+0xc0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <prvAddNewTaskToReadyList+0xbc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d802      	bhi.n	8004106 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004100:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <prvAddNewTaskToReadyList+0xbc>)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <prvAddNewTaskToReadyList+0xc4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3301      	adds	r3, #1
 800410c:	4a1b      	ldr	r2, [pc, #108]	; (800417c <prvAddNewTaskToReadyList+0xc4>)
 800410e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	2201      	movs	r2, #1
 8004116:	409a      	lsls	r2, r3
 8004118:	4b19      	ldr	r3, [pc, #100]	; (8004180 <prvAddNewTaskToReadyList+0xc8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4313      	orrs	r3, r2
 800411e:	4a18      	ldr	r2, [pc, #96]	; (8004180 <prvAddNewTaskToReadyList+0xc8>)
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4a15      	ldr	r2, [pc, #84]	; (8004184 <prvAddNewTaskToReadyList+0xcc>)
 8004130:	441a      	add	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3304      	adds	r3, #4
 8004136:	4619      	mov	r1, r3
 8004138:	4610      	mov	r0, r2
 800413a:	f7ff f8e0 	bl	80032fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800413e:	f000 fe73 	bl	8004e28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <prvAddNewTaskToReadyList+0xc0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00e      	beq.n	8004168 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800414a:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <prvAddNewTaskToReadyList+0xbc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	429a      	cmp	r2, r3
 8004156:	d207      	bcs.n	8004168 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <prvAddNewTaskToReadyList+0xd0>)
 800415a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000380 	.word	0x20000380
 8004174:	20000280 	.word	0x20000280
 8004178:	2000038c 	.word	0x2000038c
 800417c:	2000039c 	.word	0x2000039c
 8004180:	20000388 	.word	0x20000388
 8004184:	20000284 	.word	0x20000284
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800419a:	463a      	mov	r2, r7
 800419c:	1d39      	adds	r1, r7, #4
 800419e:	f107 0308 	add.w	r3, r7, #8
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc f9b4 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	9202      	str	r2, [sp, #8]
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	2300      	movs	r3, #0
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	2300      	movs	r3, #0
 80041b8:	460a      	mov	r2, r1
 80041ba:	491d      	ldr	r1, [pc, #116]	; (8004230 <vTaskStartScheduler+0xa4>)
 80041bc:	481d      	ldr	r0, [pc, #116]	; (8004234 <vTaskStartScheduler+0xa8>)
 80041be:	f7ff fe56 	bl	8003e6e <xTaskCreateStatic>
 80041c2:	4602      	mov	r2, r0
 80041c4:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <vTaskStartScheduler+0xac>)
 80041c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041c8:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <vTaskStartScheduler+0xac>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041d0:	2301      	movs	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e001      	b.n	80041da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d115      	bne.n	800420c <vTaskStartScheduler+0x80>
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <vTaskStartScheduler+0xb0>)
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <vTaskStartScheduler+0xb4>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004200:	4b10      	ldr	r3, [pc, #64]	; (8004244 <vTaskStartScheduler+0xb8>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004206:	f000 fd43 	bl	8004c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800420a:	e00d      	b.n	8004228 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004212:	d109      	bne.n	8004228 <vTaskStartScheduler+0x9c>
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	e7fe      	b.n	8004226 <vTaskStartScheduler+0x9a>
}
 8004228:	bf00      	nop
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	08005494 	.word	0x08005494
 8004234:	080047d1 	.word	0x080047d1
 8004238:	200003a4 	.word	0x200003a4
 800423c:	200003a0 	.word	0x200003a0
 8004240:	2000038c 	.word	0x2000038c
 8004244:	20000384 	.word	0x20000384

08004248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <vTaskSuspendAll+0x18>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	4a03      	ldr	r2, [pc, #12]	; (8004260 <vTaskSuspendAll+0x18>)
 8004254:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	200003a8 	.word	0x200003a8

08004264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004272:	4b41      	ldr	r3, [pc, #260]	; (8004378 <xTaskResumeAll+0x114>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <xTaskResumeAll+0x2a>
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	e7fe      	b.n	800428c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800428e:	f000 fd9d 	bl	8004dcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004292:	4b39      	ldr	r3, [pc, #228]	; (8004378 <xTaskResumeAll+0x114>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3b01      	subs	r3, #1
 8004298:	4a37      	ldr	r2, [pc, #220]	; (8004378 <xTaskResumeAll+0x114>)
 800429a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800429c:	4b36      	ldr	r3, [pc, #216]	; (8004378 <xTaskResumeAll+0x114>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d161      	bne.n	8004368 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042a4:	4b35      	ldr	r3, [pc, #212]	; (800437c <xTaskResumeAll+0x118>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05d      	beq.n	8004368 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042ac:	e02e      	b.n	800430c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ae:	4b34      	ldr	r3, [pc, #208]	; (8004380 <xTaskResumeAll+0x11c>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3318      	adds	r3, #24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff f87c 	bl	80033b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff f877 	bl	80033b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	2201      	movs	r2, #1
 80042d0:	409a      	lsls	r2, r3
 80042d2:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <xTaskResumeAll+0x120>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	4a2a      	ldr	r2, [pc, #168]	; (8004384 <xTaskResumeAll+0x120>)
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4a27      	ldr	r2, [pc, #156]	; (8004388 <xTaskResumeAll+0x124>)
 80042ea:	441a      	add	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f7ff f803 	bl	80032fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fc:	4b23      	ldr	r3, [pc, #140]	; (800438c <xTaskResumeAll+0x128>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	429a      	cmp	r2, r3
 8004304:	d302      	bcc.n	800430c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004306:	4b22      	ldr	r3, [pc, #136]	; (8004390 <xTaskResumeAll+0x12c>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800430c:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <xTaskResumeAll+0x11c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1cc      	bne.n	80042ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800431a:	f000 fb0b 	bl	8004934 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800431e:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <xTaskResumeAll+0x130>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d010      	beq.n	800434c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800432a:	f000 f837 	bl	800439c <xTaskIncrementTick>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004334:	4b16      	ldr	r3, [pc, #88]	; (8004390 <xTaskResumeAll+0x12c>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3b01      	subs	r3, #1
 800433e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f1      	bne.n	800432a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004346:	4b13      	ldr	r3, [pc, #76]	; (8004394 <xTaskResumeAll+0x130>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <xTaskResumeAll+0x12c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004354:	2301      	movs	r3, #1
 8004356:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004358:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <xTaskResumeAll+0x134>)
 800435a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004368:	f000 fd5e 	bl	8004e28 <vPortExitCritical>

	return xAlreadyYielded;
 800436c:	68bb      	ldr	r3, [r7, #8]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	200003a8 	.word	0x200003a8
 800437c:	20000380 	.word	0x20000380
 8004380:	20000340 	.word	0x20000340
 8004384:	20000388 	.word	0x20000388
 8004388:	20000284 	.word	0x20000284
 800438c:	20000280 	.word	0x20000280
 8004390:	20000394 	.word	0x20000394
 8004394:	20000390 	.word	0x20000390
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043a6:	4b4e      	ldr	r3, [pc, #312]	; (80044e0 <xTaskIncrementTick+0x144>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f040 8087 	bne.w	80044be <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043b0:	4b4c      	ldr	r3, [pc, #304]	; (80044e4 <xTaskIncrementTick+0x148>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3301      	adds	r3, #1
 80043b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043b8:	4a4a      	ldr	r2, [pc, #296]	; (80044e4 <xTaskIncrementTick+0x148>)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11f      	bne.n	8004404 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80043c4:	4b48      	ldr	r3, [pc, #288]	; (80044e8 <xTaskIncrementTick+0x14c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <xTaskIncrementTick+0x46>
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	e7fe      	b.n	80043e0 <xTaskIncrementTick+0x44>
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <xTaskIncrementTick+0x14c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	4b40      	ldr	r3, [pc, #256]	; (80044ec <xTaskIncrementTick+0x150>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a3e      	ldr	r2, [pc, #248]	; (80044e8 <xTaskIncrementTick+0x14c>)
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4a3e      	ldr	r2, [pc, #248]	; (80044ec <xTaskIncrementTick+0x150>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <xTaskIncrementTick+0x154>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3301      	adds	r3, #1
 80043fc:	4a3c      	ldr	r2, [pc, #240]	; (80044f0 <xTaskIncrementTick+0x154>)
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	f000 fa98 	bl	8004934 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004404:	4b3b      	ldr	r3, [pc, #236]	; (80044f4 <xTaskIncrementTick+0x158>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	429a      	cmp	r2, r3
 800440c:	d348      	bcc.n	80044a0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800440e:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <xTaskIncrementTick+0x14c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004418:	4b36      	ldr	r3, [pc, #216]	; (80044f4 <xTaskIncrementTick+0x158>)
 800441a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800441e:	601a      	str	r2, [r3, #0]
					break;
 8004420:	e03e      	b.n	80044a0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004422:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <xTaskIncrementTick+0x14c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d203      	bcs.n	8004442 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800443a:	4a2e      	ldr	r2, [pc, #184]	; (80044f4 <xTaskIncrementTick+0x158>)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004440:	e02e      	b.n	80044a0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	3304      	adds	r3, #4
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe ffb6 	bl	80033b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	3318      	adds	r3, #24
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe ffad 	bl	80033b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	2201      	movs	r2, #1
 8004464:	409a      	lsls	r2, r3
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <xTaskIncrementTick+0x15c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4313      	orrs	r3, r2
 800446c:	4a22      	ldr	r2, [pc, #136]	; (80044f8 <xTaskIncrementTick+0x15c>)
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4a1f      	ldr	r2, [pc, #124]	; (80044fc <xTaskIncrementTick+0x160>)
 800447e:	441a      	add	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	3304      	adds	r3, #4
 8004484:	4619      	mov	r1, r3
 8004486:	4610      	mov	r0, r2
 8004488:	f7fe ff39 	bl	80032fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <xTaskIncrementTick+0x164>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	429a      	cmp	r2, r3
 8004498:	d3b9      	bcc.n	800440e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800449a:	2301      	movs	r3, #1
 800449c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800449e:	e7b6      	b.n	800440e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <xTaskIncrementTick+0x164>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a6:	4915      	ldr	r1, [pc, #84]	; (80044fc <xTaskIncrementTick+0x160>)
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d907      	bls.n	80044c8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80044b8:	2301      	movs	r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	e004      	b.n	80044c8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <xTaskIncrementTick+0x168>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	4a0f      	ldr	r2, [pc, #60]	; (8004504 <xTaskIncrementTick+0x168>)
 80044c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044c8:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <xTaskIncrementTick+0x16c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80044d0:	2301      	movs	r3, #1
 80044d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044d4:	697b      	ldr	r3, [r7, #20]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	200003a8 	.word	0x200003a8
 80044e4:	20000384 	.word	0x20000384
 80044e8:	20000338 	.word	0x20000338
 80044ec:	2000033c 	.word	0x2000033c
 80044f0:	20000398 	.word	0x20000398
 80044f4:	200003a0 	.word	0x200003a0
 80044f8:	20000388 	.word	0x20000388
 80044fc:	20000284 	.word	0x20000284
 8004500:	20000280 	.word	0x20000280
 8004504:	20000390 	.word	0x20000390
 8004508:	20000394 	.word	0x20000394

0800450c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004512:	4b26      	ldr	r3, [pc, #152]	; (80045ac <vTaskSwitchContext+0xa0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800451a:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <vTaskSwitchContext+0xa4>)
 800451c:	2201      	movs	r2, #1
 800451e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004520:	e03e      	b.n	80045a0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004522:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <vTaskSwitchContext+0xa4>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004528:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <vTaskSwitchContext+0xa8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	fab3 f383 	clz	r3, r3
 8004534:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004536:	7afb      	ldrb	r3, [r7, #11]
 8004538:	f1c3 031f 	rsb	r3, r3, #31
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	491e      	ldr	r1, [pc, #120]	; (80045b8 <vTaskSwitchContext+0xac>)
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	607b      	str	r3, [r7, #4]
 8004564:	e7fe      	b.n	8004564 <vTaskSwitchContext+0x58>
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4a11      	ldr	r2, [pc, #68]	; (80045b8 <vTaskSwitchContext+0xac>)
 8004572:	4413      	add	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	3308      	adds	r3, #8
 8004588:	429a      	cmp	r2, r3
 800458a:	d104      	bne.n	8004596 <vTaskSwitchContext+0x8a>
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a07      	ldr	r2, [pc, #28]	; (80045bc <vTaskSwitchContext+0xb0>)
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	200003a8 	.word	0x200003a8
 80045b0:	20000394 	.word	0x20000394
 80045b4:	20000388 	.word	0x20000388
 80045b8:	20000284 	.word	0x20000284
 80045bc:	20000280 	.word	0x20000280

080045c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <vTaskPlaceOnEventList+0x24>
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	e7fe      	b.n	80045e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <vTaskPlaceOnEventList+0x44>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3318      	adds	r3, #24
 80045ea:	4619      	mov	r1, r3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fe feaa 	bl	8003346 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045f2:	2101      	movs	r1, #1
 80045f4:	6838      	ldr	r0, [r7, #0]
 80045f6:	f000 fa5f 	bl	8004ab8 <prvAddCurrentTaskToDelayedList>
}
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000280 	.word	0x20000280

08004608 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <xTaskRemoveFromEventList+0x2a>
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e7fe      	b.n	8004630 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	3318      	adds	r3, #24
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe febe 	bl	80033b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463c:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <xTaskRemoveFromEventList+0xac>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d11c      	bne.n	800467e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	3304      	adds	r3, #4
 8004648:	4618      	mov	r0, r3
 800464a:	f7fe feb5 	bl	80033b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	2201      	movs	r2, #1
 8004654:	409a      	lsls	r2, r3
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <xTaskRemoveFromEventList+0xb0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4313      	orrs	r3, r2
 800465c:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <xTaskRemoveFromEventList+0xb0>)
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4a13      	ldr	r2, [pc, #76]	; (80046bc <xTaskRemoveFromEventList+0xb4>)
 800466e:	441a      	add	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f7fe fe41 	bl	80032fe <vListInsertEnd>
 800467c:	e005      	b.n	800468a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	3318      	adds	r3, #24
 8004682:	4619      	mov	r1, r3
 8004684:	480e      	ldr	r0, [pc, #56]	; (80046c0 <xTaskRemoveFromEventList+0xb8>)
 8004686:	f7fe fe3a 	bl	80032fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468e:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <xTaskRemoveFromEventList+0xbc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	429a      	cmp	r2, r3
 8004696:	d905      	bls.n	80046a4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004698:	2301      	movs	r3, #1
 800469a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <xTaskRemoveFromEventList+0xc0>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	e001      	b.n	80046a8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80046a8:	697b      	ldr	r3, [r7, #20]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	200003a8 	.word	0x200003a8
 80046b8:	20000388 	.word	0x20000388
 80046bc:	20000284 	.word	0x20000284
 80046c0:	20000340 	.word	0x20000340
 80046c4:	20000280 	.word	0x20000280
 80046c8:	20000394 	.word	0x20000394

080046cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <vTaskInternalSetTimeOutState+0x24>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <vTaskInternalSetTimeOutState+0x28>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	605a      	str	r2, [r3, #4]
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	20000398 	.word	0x20000398
 80046f4:	20000384 	.word	0x20000384

080046f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d109      	bne.n	800471c <xTaskCheckForTimeOut+0x24>
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	e7fe      	b.n	800471a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <xTaskCheckForTimeOut+0x3e>
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e7fe      	b.n	8004734 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004736:	f000 fb49 	bl	8004dcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800473a:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <xTaskCheckForTimeOut+0xb8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004752:	d102      	bne.n	800475a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004754:	2300      	movs	r3, #0
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	e023      	b.n	80047a2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <xTaskCheckForTimeOut+0xbc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d007      	beq.n	8004776 <xTaskCheckForTimeOut+0x7e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	429a      	cmp	r2, r3
 800476e:	d302      	bcc.n	8004776 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004770:	2301      	movs	r3, #1
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	e015      	b.n	80047a2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	429a      	cmp	r2, r3
 800477e:	d20b      	bcs.n	8004798 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	1ad2      	subs	r2, r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ff9d 	bl	80046cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	e004      	b.n	80047a2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800479e:	2301      	movs	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047a2:	f000 fb41 	bl	8004e28 <vPortExitCritical>

	return xReturn;
 80047a6:	69fb      	ldr	r3, [r7, #28]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3720      	adds	r7, #32
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000384 	.word	0x20000384
 80047b4:	20000398 	.word	0x20000398

080047b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047bc:	4b03      	ldr	r3, [pc, #12]	; (80047cc <vTaskMissedYield+0x14>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
}
 80047c2:	bf00      	nop
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	20000394 	.word	0x20000394

080047d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047d8:	f000 f852 	bl	8004880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047dc:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <prvIdleTask+0x28>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d9f9      	bls.n	80047d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <prvIdleTask+0x2c>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047f4:	e7f0      	b.n	80047d8 <prvIdleTask+0x8>
 80047f6:	bf00      	nop
 80047f8:	20000284 	.word	0x20000284
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004806:	2300      	movs	r3, #0
 8004808:	607b      	str	r3, [r7, #4]
 800480a:	e00c      	b.n	8004826 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <prvInitialiseTaskLists+0x60>)
 8004818:	4413      	add	r3, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fd42 	bl	80032a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3301      	adds	r3, #1
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b06      	cmp	r3, #6
 800482a:	d9ef      	bls.n	800480c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800482c:	480d      	ldr	r0, [pc, #52]	; (8004864 <prvInitialiseTaskLists+0x64>)
 800482e:	f7fe fd39 	bl	80032a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004832:	480d      	ldr	r0, [pc, #52]	; (8004868 <prvInitialiseTaskLists+0x68>)
 8004834:	f7fe fd36 	bl	80032a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004838:	480c      	ldr	r0, [pc, #48]	; (800486c <prvInitialiseTaskLists+0x6c>)
 800483a:	f7fe fd33 	bl	80032a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800483e:	480c      	ldr	r0, [pc, #48]	; (8004870 <prvInitialiseTaskLists+0x70>)
 8004840:	f7fe fd30 	bl	80032a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004844:	480b      	ldr	r0, [pc, #44]	; (8004874 <prvInitialiseTaskLists+0x74>)
 8004846:	f7fe fd2d 	bl	80032a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <prvInitialiseTaskLists+0x78>)
 800484c:	4a05      	ldr	r2, [pc, #20]	; (8004864 <prvInitialiseTaskLists+0x64>)
 800484e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <prvInitialiseTaskLists+0x7c>)
 8004852:	4a05      	ldr	r2, [pc, #20]	; (8004868 <prvInitialiseTaskLists+0x68>)
 8004854:	601a      	str	r2, [r3, #0]
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000284 	.word	0x20000284
 8004864:	20000310 	.word	0x20000310
 8004868:	20000324 	.word	0x20000324
 800486c:	20000340 	.word	0x20000340
 8004870:	20000354 	.word	0x20000354
 8004874:	2000036c 	.word	0x2000036c
 8004878:	20000338 	.word	0x20000338
 800487c:	2000033c 	.word	0x2000033c

08004880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004886:	e019      	b.n	80048bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004888:	f000 faa0 	bl	8004dcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <prvCheckTasksWaitingTermination+0x4c>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3304      	adds	r3, #4
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe fd8d 	bl	80033b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <prvCheckTasksWaitingTermination+0x50>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <prvCheckTasksWaitingTermination+0x50>)
 80048a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <prvCheckTasksWaitingTermination+0x54>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <prvCheckTasksWaitingTermination+0x54>)
 80048b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048b2:	f000 fab9 	bl	8004e28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f80e 	bl	80048d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <prvCheckTasksWaitingTermination+0x54>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e1      	bne.n	8004888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000354 	.word	0x20000354
 80048d0:	20000380 	.word	0x20000380
 80048d4:	20000368 	.word	0x20000368

080048d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d108      	bne.n	80048fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fc48 	bl	8005184 <vPortFree>
				vPortFree( pxTCB );
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fc45 	bl	8005184 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048fa:	e017      	b.n	800492c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004902:	2b01      	cmp	r3, #1
 8004904:	d103      	bne.n	800490e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fc3c 	bl	8005184 <vPortFree>
	}
 800490c:	e00e      	b.n	800492c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004914:	2b02      	cmp	r3, #2
 8004916:	d009      	beq.n	800492c <prvDeleteTCB+0x54>
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	e7fe      	b.n	800492a <prvDeleteTCB+0x52>
	}
 800492c:	bf00      	nop
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800493a:	4b0c      	ldr	r3, [pc, #48]	; (800496c <prvResetNextTaskUnblockTime+0x38>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004944:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <prvResetNextTaskUnblockTime+0x3c>)
 8004946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800494a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800494c:	e008      	b.n	8004960 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <prvResetNextTaskUnblockTime+0x38>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a04      	ldr	r2, [pc, #16]	; (8004970 <prvResetNextTaskUnblockTime+0x3c>)
 800495e:	6013      	str	r3, [r2, #0]
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	20000338 	.word	0x20000338
 8004970:	200003a0 	.word	0x200003a0

08004974 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <xTaskGetSchedulerState+0x34>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004982:	2301      	movs	r3, #1
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	e008      	b.n	800499a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <xTaskGetSchedulerState+0x38>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004990:	2302      	movs	r3, #2
 8004992:	607b      	str	r3, [r7, #4]
 8004994:	e001      	b.n	800499a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004996:	2300      	movs	r3, #0
 8004998:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800499a:	687b      	ldr	r3, [r7, #4]
	}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	2000038c 	.word	0x2000038c
 80049ac:	200003a8 	.word	0x200003a8

080049b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d06c      	beq.n	8004aa0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049c6:	4b39      	ldr	r3, [pc, #228]	; (8004aac <xTaskPriorityDisinherit+0xfc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d009      	beq.n	80049e4 <xTaskPriorityDisinherit+0x34>
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e7fe      	b.n	80049e2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <xTaskPriorityDisinherit+0x50>
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	e7fe      	b.n	80049fe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a04:	1e5a      	subs	r2, r3, #1
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d044      	beq.n	8004aa0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d140      	bne.n	8004aa0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe fcc8 	bl	80033b8 <uxListRemove>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d115      	bne.n	8004a5a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a32:	491f      	ldr	r1, [pc, #124]	; (8004ab0 <xTaskPriorityDisinherit+0x100>)
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <xTaskPriorityDisinherit+0xaa>
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	2201      	movs	r2, #1
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	43da      	mvns	r2, r3
 8004a50:	4b18      	ldr	r3, [pc, #96]	; (8004ab4 <xTaskPriorityDisinherit+0x104>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4013      	ands	r3, r2
 8004a56:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <xTaskPriorityDisinherit+0x104>)
 8004a58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	f1c3 0207 	rsb	r2, r3, #7
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	2201      	movs	r2, #1
 8004a74:	409a      	lsls	r2, r3
 8004a76:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <xTaskPriorityDisinherit+0x104>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	4a0d      	ldr	r2, [pc, #52]	; (8004ab4 <xTaskPriorityDisinherit+0x104>)
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <xTaskPriorityDisinherit+0x100>)
 8004a8e:	441a      	add	r2, r3
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f7fe fc31 	bl	80032fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004aa0:	697b      	ldr	r3, [r7, #20]
	}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000280 	.word	0x20000280
 8004ab0:	20000284 	.word	0x20000284
 8004ab4:	20000388 	.word	0x20000388

08004ab8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ac2:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac8:	4b28      	ldr	r3, [pc, #160]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fc72 	bl	80033b8 <uxListRemove>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ada:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	4b21      	ldr	r3, [pc, #132]	; (8004b70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4013      	ands	r3, r2
 8004aee:	4a20      	ldr	r2, [pc, #128]	; (8004b70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004af0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004af8:	d10a      	bne.n	8004b10 <prvAddCurrentTaskToDelayedList+0x58>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b00:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3304      	adds	r3, #4
 8004b06:	4619      	mov	r1, r3
 8004b08:	481a      	ldr	r0, [pc, #104]	; (8004b74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b0a:	f7fe fbf8 	bl	80032fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b0e:	e026      	b.n	8004b5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4413      	add	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b18:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d209      	bcs.n	8004b3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3304      	adds	r3, #4
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f7fe fc06 	bl	8003346 <vListInsert>
}
 8004b3a:	e010      	b.n	8004b5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f7fe fbfc 	bl	8003346 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d202      	bcs.n	8004b5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b58:	4a09      	ldr	r2, [pc, #36]	; (8004b80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6013      	str	r3, [r2, #0]
}
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000384 	.word	0x20000384
 8004b6c:	20000280 	.word	0x20000280
 8004b70:	20000388 	.word	0x20000388
 8004b74:	2000036c 	.word	0x2000036c
 8004b78:	2000033c 	.word	0x2000033c
 8004b7c:	20000338 	.word	0x20000338
 8004b80:	200003a0 	.word	0x200003a0

08004b84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3b04      	subs	r3, #4
 8004b94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3b04      	subs	r3, #4
 8004ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f023 0201 	bic.w	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3b04      	subs	r3, #4
 8004bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bb4:	4a0c      	ldr	r2, [pc, #48]	; (8004be8 <pxPortInitialiseStack+0x64>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3b14      	subs	r3, #20
 8004bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b04      	subs	r3, #4
 8004bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f06f 0202 	mvn.w	r2, #2
 8004bd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3b20      	subs	r3, #32
 8004bd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	08004bed 	.word	0x08004bed

08004bec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <prvTaskExitError+0x50>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bfe:	d009      	beq.n	8004c14 <prvTaskExitError+0x28>
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e7fe      	b.n	8004c12 <prvTaskExitError+0x26>
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c26:	bf00      	nop
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0fc      	beq.n	8004c28 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	2000000c 	.word	0x2000000c

08004c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <pxCurrentTCBConst2>)
 8004c42:	6819      	ldr	r1, [r3, #0]
 8004c44:	6808      	ldr	r0, [r1, #0]
 8004c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4a:	f380 8809 	msr	PSP, r0
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f380 8811 	msr	BASEPRI, r0
 8004c5a:	4770      	bx	lr
 8004c5c:	f3af 8000 	nop.w

08004c60 <pxCurrentTCBConst2>:
 8004c60:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c68:	4808      	ldr	r0, [pc, #32]	; (8004c8c <prvPortStartFirstTask+0x24>)
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	6800      	ldr	r0, [r0, #0]
 8004c6e:	f380 8808 	msr	MSP, r0
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f380 8814 	msr	CONTROL, r0
 8004c7a:	b662      	cpsie	i
 8004c7c:	b661      	cpsie	f
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	df00      	svc	0
 8004c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c8a:	bf00      	nop
 8004c8c:	e000ed08 	.word	0xe000ed08

08004c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c96:	4b44      	ldr	r3, [pc, #272]	; (8004da8 <xPortStartScheduler+0x118>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a44      	ldr	r2, [pc, #272]	; (8004dac <xPortStartScheduler+0x11c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d109      	bne.n	8004cb4 <xPortStartScheduler+0x24>
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	e7fe      	b.n	8004cb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cb4:	4b3c      	ldr	r3, [pc, #240]	; (8004da8 <xPortStartScheduler+0x118>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a3d      	ldr	r2, [pc, #244]	; (8004db0 <xPortStartScheduler+0x120>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d109      	bne.n	8004cd2 <xPortStartScheduler+0x42>
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	e7fe      	b.n	8004cd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cd2:	4b38      	ldr	r3, [pc, #224]	; (8004db4 <xPortStartScheduler+0x124>)
 8004cd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	22ff      	movs	r2, #255	; 0xff
 8004ce2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <xPortStartScheduler+0x128>)
 8004cf8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cfa:	4b30      	ldr	r3, [pc, #192]	; (8004dbc <xPortStartScheduler+0x12c>)
 8004cfc:	2207      	movs	r2, #7
 8004cfe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d00:	e009      	b.n	8004d16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004d02:	4b2e      	ldr	r3, [pc, #184]	; (8004dbc <xPortStartScheduler+0x12c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	4a2c      	ldr	r2, [pc, #176]	; (8004dbc <xPortStartScheduler+0x12c>)
 8004d0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1e:	2b80      	cmp	r3, #128	; 0x80
 8004d20:	d0ef      	beq.n	8004d02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <xPortStartScheduler+0x12c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f1c3 0307 	rsb	r3, r3, #7
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d009      	beq.n	8004d42 <xPortStartScheduler+0xb2>
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	e7fe      	b.n	8004d40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d42:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <xPortStartScheduler+0x12c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <xPortStartScheduler+0x12c>)
 8004d4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d4c:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <xPortStartScheduler+0x12c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d54:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <xPortStartScheduler+0x12c>)
 8004d56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d60:	4b17      	ldr	r3, [pc, #92]	; (8004dc0 <xPortStartScheduler+0x130>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a16      	ldr	r2, [pc, #88]	; (8004dc0 <xPortStartScheduler+0x130>)
 8004d66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d6c:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <xPortStartScheduler+0x130>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <xPortStartScheduler+0x130>)
 8004d72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d78:	f000 f8d6 	bl	8004f28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d7c:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <xPortStartScheduler+0x134>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d82:	f000 f8f5 	bl	8004f70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <xPortStartScheduler+0x138>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a0f      	ldr	r2, [pc, #60]	; (8004dc8 <xPortStartScheduler+0x138>)
 8004d8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d92:	f7ff ff69 	bl	8004c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d96:	f7ff fbb9 	bl	800450c <vTaskSwitchContext>
	prvTaskExitError();
 8004d9a:	f7ff ff27 	bl	8004bec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	e000ed00 	.word	0xe000ed00
 8004dac:	410fc271 	.word	0x410fc271
 8004db0:	410fc270 	.word	0x410fc270
 8004db4:	e000e400 	.word	0xe000e400
 8004db8:	200003ac 	.word	0x200003ac
 8004dbc:	200003b0 	.word	0x200003b0
 8004dc0:	e000ed20 	.word	0xe000ed20
 8004dc4:	2000000c 	.word	0x2000000c
 8004dc8:	e000ef34 	.word	0xe000ef34

08004dcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004de4:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <vPortEnterCritical+0x54>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	4a0d      	ldr	r2, [pc, #52]	; (8004e20 <vPortEnterCritical+0x54>)
 8004dec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dee:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <vPortEnterCritical+0x54>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d10e      	bne.n	8004e14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <vPortEnterCritical+0x58>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d009      	beq.n	8004e14 <vPortEnterCritical+0x48>
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	e7fe      	b.n	8004e12 <vPortEnterCritical+0x46>
	}
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	2000000c 	.word	0x2000000c
 8004e24:	e000ed04 	.word	0xe000ed04

08004e28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e2e:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <vPortExitCritical+0x4c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <vPortExitCritical+0x22>
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	607b      	str	r3, [r7, #4]
 8004e48:	e7fe      	b.n	8004e48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <vPortExitCritical+0x4c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <vPortExitCritical+0x4c>)
 8004e52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e54:	4b07      	ldr	r3, [pc, #28]	; (8004e74 <vPortExitCritical+0x4c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <vPortExitCritical+0x3e>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	2000000c 	.word	0x2000000c
	...

08004e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e80:	f3ef 8009 	mrs	r0, PSP
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <pxCurrentTCBConst>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	f01e 0f10 	tst.w	lr, #16
 8004e90:	bf08      	it	eq
 8004e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9a:	6010      	str	r0, [r2, #0]
 8004e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ea4:	f380 8811 	msr	BASEPRI, r0
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f7ff fb2c 	bl	800450c <vTaskSwitchContext>
 8004eb4:	f04f 0000 	mov.w	r0, #0
 8004eb8:	f380 8811 	msr	BASEPRI, r0
 8004ebc:	bc09      	pop	{r0, r3}
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	6808      	ldr	r0, [r1, #0]
 8004ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec6:	f01e 0f10 	tst.w	lr, #16
 8004eca:	bf08      	it	eq
 8004ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ed0:	f380 8809 	msr	PSP, r0
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	f3af 8000 	nop.w

08004ee0 <pxCurrentTCBConst>:
 8004ee0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop

08004ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f00:	f7ff fa4c 	bl	800439c <xTaskIncrementTick>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <SysTick_Handler+0x3c>)
 8004f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	e000ed04 	.word	0xe000ed04

08004f28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <vPortSetupTimerInterrupt+0x34>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <vPortSetupTimerInterrupt+0x38>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f38:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <vPortSetupTimerInterrupt+0x3c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <vPortSetupTimerInterrupt+0x40>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	099b      	lsrs	r3, r3, #6
 8004f44:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <vPortSetupTimerInterrupt+0x44>)
 8004f46:	3b01      	subs	r3, #1
 8004f48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f4a:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <vPortSetupTimerInterrupt+0x34>)
 8004f4c:	2207      	movs	r2, #7
 8004f4e:	601a      	str	r2, [r3, #0]
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	e000e010 	.word	0xe000e010
 8004f60:	e000e018 	.word	0xe000e018
 8004f64:	20000000 	.word	0x20000000
 8004f68:	10624dd3 	.word	0x10624dd3
 8004f6c:	e000e014 	.word	0xe000e014

08004f70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f80 <vPortEnableVFP+0x10>
 8004f74:	6801      	ldr	r1, [r0, #0]
 8004f76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f7a:	6001      	str	r1, [r0, #0]
 8004f7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f7e:	bf00      	nop
 8004f80:	e000ed88 	.word	0xe000ed88

08004f84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f8a:	f3ef 8305 	mrs	r3, IPSR
 8004f8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	d913      	bls.n	8004fbe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f96:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <vPortValidateInterruptPriority+0x6c>)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fa0:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <vPortValidateInterruptPriority+0x70>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	7afa      	ldrb	r2, [r7, #11]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d209      	bcs.n	8004fbe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	e7fe      	b.n	8004fbc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <vPortValidateInterruptPriority+0x74>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <vPortValidateInterruptPriority+0x78>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d909      	bls.n	8004fe2 <vPortValidateInterruptPriority+0x5e>
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	e7fe      	b.n	8004fe0 <vPortValidateInterruptPriority+0x5c>
	}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	e000e3f0 	.word	0xe000e3f0
 8004ff4:	200003ac 	.word	0x200003ac
 8004ff8:	e000ed0c 	.word	0xe000ed0c
 8004ffc:	200003b0 	.word	0x200003b0

08005000 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005008:	2300      	movs	r3, #0
 800500a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800500c:	f7ff f91c 	bl	8004248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005010:	4b57      	ldr	r3, [pc, #348]	; (8005170 <pvPortMalloc+0x170>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005018:	f000 f90c 	bl	8005234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800501c:	4b55      	ldr	r3, [pc, #340]	; (8005174 <pvPortMalloc+0x174>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	f040 808c 	bne.w	8005142 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01c      	beq.n	800506a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005030:	2208      	movs	r2, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	2b00      	cmp	r3, #0
 8005040:	d013      	beq.n	800506a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f023 0307 	bic.w	r3, r3, #7
 8005048:	3308      	adds	r3, #8
 800504a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	2b00      	cmp	r3, #0
 8005054:	d009      	beq.n	800506a <pvPortMalloc+0x6a>
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	e7fe      	b.n	8005068 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d068      	beq.n	8005142 <pvPortMalloc+0x142>
 8005070:	4b41      	ldr	r3, [pc, #260]	; (8005178 <pvPortMalloc+0x178>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d863      	bhi.n	8005142 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800507a:	4b40      	ldr	r3, [pc, #256]	; (800517c <pvPortMalloc+0x17c>)
 800507c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800507e:	4b3f      	ldr	r3, [pc, #252]	; (800517c <pvPortMalloc+0x17c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005084:	e004      	b.n	8005090 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d903      	bls.n	80050a2 <pvPortMalloc+0xa2>
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f1      	bne.n	8005086 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050a2:	4b33      	ldr	r3, [pc, #204]	; (8005170 <pvPortMalloc+0x170>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d04a      	beq.n	8005142 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2208      	movs	r2, #8
 80050b2:	4413      	add	r3, r2
 80050b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	1ad2      	subs	r2, r2, r3
 80050c6:	2308      	movs	r3, #8
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d91e      	bls.n	800510c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d009      	beq.n	80050f4 <pvPortMalloc+0xf4>
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	e7fe      	b.n	80050f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	1ad2      	subs	r2, r2, r3
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005106:	69b8      	ldr	r0, [r7, #24]
 8005108:	f000 f8f6 	bl	80052f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800510c:	4b1a      	ldr	r3, [pc, #104]	; (8005178 <pvPortMalloc+0x178>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	4a18      	ldr	r2, [pc, #96]	; (8005178 <pvPortMalloc+0x178>)
 8005118:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800511a:	4b17      	ldr	r3, [pc, #92]	; (8005178 <pvPortMalloc+0x178>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b18      	ldr	r3, [pc, #96]	; (8005180 <pvPortMalloc+0x180>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d203      	bcs.n	800512e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005126:	4b14      	ldr	r3, [pc, #80]	; (8005178 <pvPortMalloc+0x178>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a15      	ldr	r2, [pc, #84]	; (8005180 <pvPortMalloc+0x180>)
 800512c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	4b10      	ldr	r3, [pc, #64]	; (8005174 <pvPortMalloc+0x174>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	431a      	orrs	r2, r3
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005142:	f7ff f88f 	bl	8004264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <pvPortMalloc+0x164>
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e7fe      	b.n	8005162 <pvPortMalloc+0x162>
	return pvReturn;
 8005164:	69fb      	ldr	r3, [r7, #28]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3728      	adds	r7, #40	; 0x28
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20003fbc 	.word	0x20003fbc
 8005174:	20003fc8 	.word	0x20003fc8
 8005178:	20003fc0 	.word	0x20003fc0
 800517c:	20003fb4 	.word	0x20003fb4
 8005180:	20003fc4 	.word	0x20003fc4

08005184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d046      	beq.n	8005224 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005196:	2308      	movs	r3, #8
 8005198:	425b      	negs	r3, r3
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4413      	add	r3, r2
 800519e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	4b20      	ldr	r3, [pc, #128]	; (800522c <vPortFree+0xa8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <vPortFree+0x42>
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e7fe      	b.n	80051c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <vPortFree+0x5e>
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	e7fe      	b.n	80051e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	4b11      	ldr	r3, [pc, #68]	; (800522c <vPortFree+0xa8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d019      	beq.n	8005224 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d115      	bne.n	8005224 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <vPortFree+0xa8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	43db      	mvns	r3, r3
 8005202:	401a      	ands	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005208:	f7ff f81e 	bl	8004248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <vPortFree+0xac>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4413      	add	r3, r2
 8005216:	4a06      	ldr	r2, [pc, #24]	; (8005230 <vPortFree+0xac>)
 8005218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800521a:	6938      	ldr	r0, [r7, #16]
 800521c:	f000 f86c 	bl	80052f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005220:	f7ff f820 	bl	8004264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005224:	bf00      	nop
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20003fc8 	.word	0x20003fc8
 8005230:	20003fc0 	.word	0x20003fc0

08005234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800523a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800523e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005240:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <prvHeapInit+0xac>)
 8005242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00c      	beq.n	8005268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3307      	adds	r3, #7
 8005252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0307 	bic.w	r3, r3, #7
 800525a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <prvHeapInit+0xac>)
 8005264:	4413      	add	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800526c:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <prvHeapInit+0xb0>)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <prvHeapInit+0xb0>)
 8005274:	2200      	movs	r2, #0
 8005276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005280:	2208      	movs	r2, #8
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0307 	bic.w	r3, r3, #7
 800528e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <prvHeapInit+0xb4>)
 8005294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <prvHeapInit+0xb4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <prvHeapInit+0xb4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	1ad2      	subs	r2, r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <prvHeapInit+0xb4>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <prvHeapInit+0xb8>)
 80052c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <prvHeapInit+0xbc>)
 80052ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <prvHeapInit+0xc0>)
 80052ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052d2:	601a      	str	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	200003b4 	.word	0x200003b4
 80052e4:	20003fb4 	.word	0x20003fb4
 80052e8:	20003fbc 	.word	0x20003fbc
 80052ec:	20003fc4 	.word	0x20003fc4
 80052f0:	20003fc0 	.word	0x20003fc0
 80052f4:	20003fc8 	.word	0x20003fc8

080052f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005300:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <prvInsertBlockIntoFreeList+0xac>)
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e002      	b.n	800530c <prvInsertBlockIntoFreeList+0x14>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	429a      	cmp	r2, r3
 8005314:	d8f7      	bhi.n	8005306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	4413      	add	r3, r2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	429a      	cmp	r2, r3
 8005326:	d108      	bne.n	800533a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	441a      	add	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	441a      	add	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d118      	bne.n	8005380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d00d      	beq.n	8005376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	441a      	add	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e008      	b.n	8005388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e003      	b.n	8005388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d002      	beq.n	8005396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20003fb4 	.word	0x20003fb4
 80053a8:	20003fbc 	.word	0x20003fbc

080053ac <__libc_init_array>:
 80053ac:	b570      	push	{r4, r5, r6, lr}
 80053ae:	4e0d      	ldr	r6, [pc, #52]	; (80053e4 <__libc_init_array+0x38>)
 80053b0:	4c0d      	ldr	r4, [pc, #52]	; (80053e8 <__libc_init_array+0x3c>)
 80053b2:	1ba4      	subs	r4, r4, r6
 80053b4:	10a4      	asrs	r4, r4, #2
 80053b6:	2500      	movs	r5, #0
 80053b8:	42a5      	cmp	r5, r4
 80053ba:	d109      	bne.n	80053d0 <__libc_init_array+0x24>
 80053bc:	4e0b      	ldr	r6, [pc, #44]	; (80053ec <__libc_init_array+0x40>)
 80053be:	4c0c      	ldr	r4, [pc, #48]	; (80053f0 <__libc_init_array+0x44>)
 80053c0:	f000 f82c 	bl	800541c <_init>
 80053c4:	1ba4      	subs	r4, r4, r6
 80053c6:	10a4      	asrs	r4, r4, #2
 80053c8:	2500      	movs	r5, #0
 80053ca:	42a5      	cmp	r5, r4
 80053cc:	d105      	bne.n	80053da <__libc_init_array+0x2e>
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053d4:	4798      	blx	r3
 80053d6:	3501      	adds	r5, #1
 80053d8:	e7ee      	b.n	80053b8 <__libc_init_array+0xc>
 80053da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053de:	4798      	blx	r3
 80053e0:	3501      	adds	r5, #1
 80053e2:	e7f2      	b.n	80053ca <__libc_init_array+0x1e>
 80053e4:	080054bc 	.word	0x080054bc
 80053e8:	080054bc 	.word	0x080054bc
 80053ec:	080054bc 	.word	0x080054bc
 80053f0:	080054c0 	.word	0x080054c0

080053f4 <memcpy>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	1e43      	subs	r3, r0, #1
 80053f8:	440a      	add	r2, r1
 80053fa:	4291      	cmp	r1, r2
 80053fc:	d100      	bne.n	8005400 <memcpy+0xc>
 80053fe:	bd10      	pop	{r4, pc}
 8005400:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005404:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005408:	e7f7      	b.n	80053fa <memcpy+0x6>

0800540a <memset>:
 800540a:	4402      	add	r2, r0
 800540c:	4603      	mov	r3, r0
 800540e:	4293      	cmp	r3, r2
 8005410:	d100      	bne.n	8005414 <memset+0xa>
 8005412:	4770      	bx	lr
 8005414:	f803 1b01 	strb.w	r1, [r3], #1
 8005418:	e7f9      	b.n	800540e <memset+0x4>
	...

0800541c <_init>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	bf00      	nop
 8005420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005422:	bc08      	pop	{r3}
 8005424:	469e      	mov	lr, r3
 8005426:	4770      	bx	lr

08005428 <_fini>:
 8005428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542a:	bf00      	nop
 800542c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542e:	bc08      	pop	{r3}
 8005430:	469e      	mov	lr, r3
 8005432:	4770      	bx	lr
