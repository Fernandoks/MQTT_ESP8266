
MQTT_ESP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006028  08006028  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006030  08006030  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040ac  20000010  08006048  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040bc  08006048  000240bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001546b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f5f  00000000  00000000  000354ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  00038410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a8  00000000  00000000  00039608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000338d  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e5c3  00000000  00000000  0003da3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d711a  00000000  00000000  0004c000  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012311a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a14  00000000  00000000  00123198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f1c 	.word	0x08005f1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08005f1c 	.word	0x08005f1c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	2000002c 	.word	0x2000002c
 8000540:	20000080 	.word	0x20000080

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b0a8      	sub	sp, #160	; 0xa0
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800054a:	f000 fded 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f8ad 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f971 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000556:	f000 f945 	bl	80007e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800055a:	f000 f919 	bl	8000790 <MX_USART1_UART_Init>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */


  osMessageQDef(devicequeue, 64, uint32_t);
 800055e:	4b45      	ldr	r3, [pc, #276]	; (8000674 <main+0x130>)
 8000560:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Device_Queue = osMessageCreate (osMessageQ(devicequeue), NULL);
 800056a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f002 fe8a 	bl	800328a <osMessageCreate>
 8000576:	4602      	mov	r2, r0
 8000578:	4b3f      	ldr	r3, [pc, #252]	; (8000678 <main+0x134>)
 800057a:	601a      	str	r2, [r3, #0]

  osMessageQDef(pcqueue, 64, uint32_t);
 800057c:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <main+0x130>)
 800057e:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PC_Queue = osMessageCreate (osMessageQ(pcqueue), NULL);
 8000588:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fe7b 	bl	800328a <osMessageCreate>
 8000594:	4602      	mov	r2, r0
 8000596:	4b39      	ldr	r3, [pc, #228]	; (800067c <main+0x138>)
 8000598:	601a      	str	r2, [r3, #0]

  osMailQDef(command_mail, 16, CommandMail_t);
 800059a:	2310      	movs	r3, #16
 800059c:	673b      	str	r3, [r7, #112]	; 0x70
 800059e:	230c      	movs	r3, #12
 80005a0:	677b      	str	r3, [r7, #116]	; 0x74
 80005a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005a6:	67bb      	str	r3, [r7, #120]	; 0x78
  command_mail = osMailCreate(osMailQ(command_mail), NULL);
 80005a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 ff48 	bl	8003444 <osMailCreate>
 80005b4:	4602      	mov	r2, r0
 80005b6:	4b32      	ldr	r3, [pc, #200]	; (8000680 <main+0x13c>)
 80005b8:	601a      	str	r2, [r3, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */


  osThreadDef(DeviceTask, StartDeviceTask, osPriorityNormal, 0, 128);
 80005ba:	4b32      	ldr	r3, [pc, #200]	; (8000684 <main+0x140>)
 80005bc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Device_TaskHandler = osThreadCreate(osThread(DeviceTask), NULL);
 80005ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fc46 	bl	8002e66 <osThreadCreate>
 80005da:	4602      	mov	r2, r0
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <main+0x144>)
 80005de:	601a      	str	r2, [r3, #0]

  osThreadDef(PCTask, StartPCTask, osPriorityNormal, 0, 128);
 80005e0:	4b2a      	ldr	r3, [pc, #168]	; (800068c <main+0x148>)
 80005e2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_TaskHandler = osThreadCreate(osThread(PCTask), NULL);
 80005f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fc33 	bl	8002e66 <osThreadCreate>
 8000600:	4602      	mov	r2, r0
 8000602:	4b23      	ldr	r3, [pc, #140]	; (8000690 <main+0x14c>)
 8000604:	601a      	str	r2, [r3, #0]

  osThreadDef(Commandtask, StartCommandtask, osPriorityAboveNormal, 0, 128);
 8000606:	4b23      	ldr	r3, [pc, #140]	; (8000694 <main+0x150>)
 8000608:	f107 041c 	add.w	r4, r7, #28
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Command_TaskHandler = osThreadCreate(osThread(Commandtask), NULL);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fc20 	bl	8002e66 <osThreadCreate>
 8000626:	4602      	mov	r2, r0
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <main+0x154>)
 800062a:	601a      	str	r2, [r3, #0]

  osThreadDef(Defaulttask, StartDefaulttask, osPriorityNormal, 0, 128);
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <main+0x158>)
 800062e:	463c      	mov	r4, r7
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Default_TaskHandler = osThreadCreate(osThread(Defaulttask), NULL);
 800063e:	463b      	mov	r3, r7
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fc0f 	bl	8002e66 <osThreadCreate>
 8000648:	4602      	mov	r2, r0
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <main+0x15c>)
 800064c:	601a      	str	r2, [r3, #0]

  /*
   * Starting TX and RX form UART1 and UART2
   */

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <main+0x160>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <main+0x160>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f042 0220 	orr.w	r2, r2, #32
 800065c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <main+0x164>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	68da      	ldr	r2, [r3, #12]
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <main+0x164>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f042 0220 	orr.w	r2, r2, #32
 800066c:	60da      	str	r2, [r3, #12]

  /* Start scheduler */
  osKernelStart();
 800066e:	f002 fbf3 	bl	8002e58 <osKernelStart>
  //Ringbuf_init();




  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0x12e>
 8000674:	08005f34 	.word	0x08005f34
 8000678:	20004018 	.word	0x20004018
 800067c:	2000401c 	.word	0x2000401c
 8000680:	20003fd4 	.word	0x20003fd4
 8000684:	08005f50 	.word	0x08005f50
 8000688:	20003fcc 	.word	0x20003fcc
 800068c:	08005f74 	.word	0x08005f74
 8000690:	20003fd0 	.word	0x20003fd0
 8000694:	08005f9c 	.word	0x08005f9c
 8000698:	20004064 	.word	0x20004064
 800069c:	08005fc4 	.word	0x08005fc4
 80006a0:	20004020 	.word	0x20004020
 80006a4:	20004024 	.word	0x20004024
 80006a8:	20003fd8 	.word	0x20003fd8

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2234      	movs	r2, #52	; 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 fc25 	bl	8005f0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <SystemClock_Config+0xdc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a2b      	ldr	r2, [pc, #172]	; (8000788 <SystemClock_Config+0xdc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b29      	ldr	r3, [pc, #164]	; (8000788 <SystemClock_Config+0xdc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemClock_Config+0xe0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a25      	ldr	r2, [pc, #148]	; (800078c <SystemClock_Config+0xe0>)
 80006f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0xe0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000720:	23b4      	movs	r3, #180	; 0xb4
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fb03 	bl	8001d40 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000740:	f000 f8fc 	bl	800093c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000744:	f000 ffc0 	bl	80016c8 <HAL_PWREx_EnableOverDrive>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800074e:	f000 f8f5 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2105      	movs	r1, #5
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fff9 	bl	8001768 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800077c:	f000 f8de 	bl	800093c <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_USART1_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART1_UART_Init+0x4c>)
 80007c8:	f001 ff52 	bl	8002670 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f8b3 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20003fd8 	.word	0x20003fd8
 80007e0:	40011000 	.word	0x40011000

080007e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART2_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x4c>)
 800081c:	f001 ff28 	bl	8002670 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f889 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20004024 	.word	0x20004024
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a2c      	ldr	r2, [pc, #176]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a25      	ldr	r2, [pc, #148]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <MX_GPIO_Init+0xd0>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2120      	movs	r1, #32
 80008c2:	4812      	ldr	r0, [pc, #72]	; (800090c <MX_GPIO_Init+0xd4>)
 80008c4:	f000 fee6 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_GPIO_Init+0xd8>)
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_GPIO_Init+0xdc>)
 80008de:	f000 fd47 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008e2:	2320      	movs	r3, #32
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0xd4>)
 80008fa:	f000 fd39 	bl	8001370 <HAL_GPIO_Init>

}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000
 8000910:	10210000 	.word	0x10210000
 8000914:	40020800 	.word	0x40020800

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 fc1f 	bl	800116c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40001000 	.word	0x40001000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <StartDefaulttask>:


const char *c = "AT";

void StartDefaulttask(void const * argument)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]

	while(1)
	{

		osDelay(100);
 8000952:	2064      	movs	r0, #100	; 0x64
 8000954:	f002 fad3 	bl	8002efe <osDelay>
 8000958:	e7fb      	b.n	8000952 <StartDefaulttask+0x8>
	...

0800095c <StartDeviceTask>:
	}
}

void StartDeviceTask(void const * argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	 * assembly the package, and post to Commander Task via Mail
	 */
	osEvent event;
	CommandMail_t *mptr_device;

	command_mail_mutex_id = osMutexCreate  (osMutex (command_mail_mutex));
 8000964:	4837      	ldr	r0, [pc, #220]	; (8000a44 <StartDeviceTask+0xe8>)
 8000966:	f002 fade 	bl	8002f26 <osMutexCreate>
 800096a:	4602      	mov	r2, r0
 800096c:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <StartDeviceTask+0xec>)
 800096e:	601a      	str	r2, [r3, #0]

    DeviceMemPool_Id = osPoolCreate (osPool (DeviceMemPool));
 8000970:	4836      	ldr	r0, [pc, #216]	; (8000a4c <StartDeviceTask+0xf0>)
 8000972:	f002 fb75 	bl	8003060 <osPoolCreate>
 8000976:	4602      	mov	r2, r0
 8000978:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <StartDeviceTask+0xf4>)
 800097a:	601a      	str	r2, [r3, #0]

	mptr_device = osMailCAlloc(command_mail, 10);
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <StartDeviceTask+0xf8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	210a      	movs	r1, #10
 8000982:	4618      	mov	r0, r3
 8000984:	f002 fdcb 	bl	800351e <osMailCAlloc>
 8000988:	61b8      	str	r0, [r7, #24]
	mptr_device->size = 0;
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]

	uint32_t temp = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t buffer_size = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
	uint8_t* buffer = NULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]


	while(1)
	{
		 if ( (DeviceMemPool_Id != NULL) && (buffer == NULL))
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <StartDeviceTask+0xf4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d008      	beq.n	80009b6 <StartDeviceTask+0x5a>
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d105      	bne.n	80009b6 <StartDeviceTask+0x5a>
		 {
			 buffer = (uint8_t *)osPoolCAlloc (DeviceMemPool_Id);
 80009aa:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <StartDeviceTask+0xf4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 fc15 	bl	80031de <osPoolCAlloc>
 80009b4:	61f8      	str	r0, [r7, #28]
		 }


		event = osMessageGet(Device_Queue, osWaitForever);
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <StartDeviceTask+0xfc>)
 80009b8:	6819      	ldr	r1, [r3, #0]
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 fcca 	bl	800335c <osMessageGet>
		if(event.status == osEventMessage)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b10      	cmp	r3, #16
 80009cc:	d101      	bne.n	80009d2 <StartDeviceTask+0x76>
		{
			temp = event.value.v;
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (temp == '\n')
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	2b0a      	cmp	r3, #10
 80009d6:	d12b      	bne.n	8000a30 <StartDeviceTask+0xd4>
		{
			buffer[buffer_size] = temp;
 80009d8:	69fa      	ldr	r2, [r7, #28]
 80009da:	6a3b      	ldr	r3, [r7, #32]
 80009dc:	4413      	add	r3, r2
 80009de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	701a      	strb	r2, [r3, #0]
			buffer_size++;
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	3301      	adds	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]

			mptr_device->Direction = 1;  //Send = 0, Received = 1;
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	2201      	movs	r2, #1
 80009ee:	711a      	strb	r2, [r3, #4]
			mptr_device->senderID = Deviceid;  //PC = 0x01, Device 0X02
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	2202      	movs	r2, #2
 80009f4:	715a      	strb	r2, [r3, #5]
			mptr_device->size = buffer_size;
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	6a3a      	ldr	r2, [r7, #32]
 80009fa:	609a      	str	r2, [r3, #8]
			mptr_device->commandstring = buffer;
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	601a      	str	r2, [r3, #0]
			osMutexWait(command_mail_mutex_id, osWaitForever);
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <StartDeviceTask+0xec>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 faa4 	bl	8002f58 <osMutexWait>
			{
				osMailPut(command_mail, mptr_device);
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <StartDeviceTask+0xf8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	69b9      	ldr	r1, [r7, #24]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fda4 	bl	8003564 <osMailPut>
			}
			osMutexRelease(command_mail_mutex_id);
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <StartDeviceTask+0xec>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 fae7 	bl	8002ff4 <osMutexRelease>

			//HAL_UART_Transmit(&pc_uart,buffer, buffer_size, 100);

			buffer_size = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
			buffer = NULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	e7b5      	b.n	800099c <StartDeviceTask+0x40>
		}
		else
		{
			buffer[buffer_size] = temp;
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	4413      	add	r3, r2
 8000a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	701a      	strb	r2, [r3, #0]
			buffer_size++;
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
		 if ( (DeviceMemPool_Id != NULL) && (buffer == NULL))
 8000a42:	e7ab      	b.n	800099c <StartDeviceTask+0x40>
 8000a44:	08006000 	.word	0x08006000
 8000a48:	20004074 	.word	0x20004074
 8000a4c:	08005fe8 	.word	0x08005fe8
 8000a50:	20004068 	.word	0x20004068
 8000a54:	20003fd4 	.word	0x20003fd4
 8000a58:	20004018 	.word	0x20004018

08000a5c <StartPCTask>:

}


void StartPCTask(void const * argument)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	 */

	osEvent event;
	CommandMail_t *mptr;

	command_mail_mutex_id = osMutexCreate  (osMutex (command_mail_mutex));
 8000a64:	4837      	ldr	r0, [pc, #220]	; (8000b44 <StartPCTask+0xe8>)
 8000a66:	f002 fa5e 	bl	8002f26 <osMutexCreate>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	4b36      	ldr	r3, [pc, #216]	; (8000b48 <StartPCTask+0xec>)
 8000a6e:	601a      	str	r2, [r3, #0]

    PCMemPool_Id = osPoolCreate (osPool (PCMemPool));
 8000a70:	4836      	ldr	r0, [pc, #216]	; (8000b4c <StartPCTask+0xf0>)
 8000a72:	f002 faf5 	bl	8003060 <osPoolCreate>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <StartPCTask+0xf4>)
 8000a7a:	601a      	str	r2, [r3, #0]

	mptr = osMailCAlloc(command_mail, 10);
 8000a7c:	4b35      	ldr	r3, [pc, #212]	; (8000b54 <StartPCTask+0xf8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	210a      	movs	r1, #10
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fd4b 	bl	800351e <osMailCAlloc>
 8000a88:	61b8      	str	r0, [r7, #24]
	mptr->size = 0;
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]

	uint32_t temp = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pcbuffer_size = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
	uint8_t* pcbuffer = {0};
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]

	while(1)
	{
		 if ( (PCMemPool_Id != NULL) && (pcbuffer == NULL))
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <StartPCTask+0xf4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d008      	beq.n	8000ab6 <StartPCTask+0x5a>
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d105      	bne.n	8000ab6 <StartPCTask+0x5a>
		{
			pcbuffer = (uint8_t *)osPoolCAlloc (PCMemPool_Id);
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <StartPCTask+0xf4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fb95 	bl	80031de <osPoolCAlloc>
 8000ab4:	61f8      	str	r0, [r7, #28]
		}

		event = osMessageGet(PC_Queue, osWaitForever);
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <StartPCTask+0xfc>)
 8000ab8:	6819      	ldr	r1, [r3, #0]
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fc4a 	bl	800335c <osMessageGet>
		if(event.status == osEventMessage)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b10      	cmp	r3, #16
 8000acc:	d101      	bne.n	8000ad2 <StartPCTask+0x76>
		{
			temp = event.value.v;
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (temp == '\n')
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	2b0a      	cmp	r3, #10
 8000ad6:	d12b      	bne.n	8000b30 <StartPCTask+0xd4>
		{
			pcbuffer[pcbuffer_size] = temp;
 8000ad8:	69fa      	ldr	r2, [r7, #28]
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	4413      	add	r3, r2
 8000ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	701a      	strb	r2, [r3, #0]
			pcbuffer_size++;
 8000ae4:	6a3b      	ldr	r3, [r7, #32]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	623b      	str	r3, [r7, #32]

			mptr->Direction = 1;  //Send = 0, Received = 1;
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	2201      	movs	r2, #1
 8000aee:	711a      	strb	r2, [r3, #4]
			mptr->senderID = PCid;  //PC = 0x01, Device 0X02
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	2201      	movs	r2, #1
 8000af4:	715a      	strb	r2, [r3, #5]
			mptr->size = pcbuffer_size;
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	6a3a      	ldr	r2, [r7, #32]
 8000afa:	609a      	str	r2, [r3, #8]
			mptr->commandstring = pcbuffer;
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	69fa      	ldr	r2, [r7, #28]
 8000b00:	601a      	str	r2, [r3, #0]
			osMutexWait(command_mail_mutex_id, osWaitForever);
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <StartPCTask+0xec>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fa24 	bl	8002f58 <osMutexWait>
			{
				osMailPut(command_mail, mptr);
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <StartPCTask+0xf8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	69b9      	ldr	r1, [r7, #24]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 fd24 	bl	8003564 <osMailPut>
			}
			osMutexRelease(command_mail_mutex_id);
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <StartPCTask+0xec>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 fa67 	bl	8002ff4 <osMutexRelease>

			//HAL_UART_Transmit(&device_uart,mptr->commandstring, pcbuffer_size, 100);

			pcbuffer_size = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
			pcbuffer = NULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	e7b5      	b.n	8000a9c <StartPCTask+0x40>
		}
		else
		{
			pcbuffer[pcbuffer_size] = temp;
 8000b30:	69fa      	ldr	r2, [r7, #28]
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	4413      	add	r3, r2
 8000b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
			pcbuffer_size++;
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
		 if ( (PCMemPool_Id != NULL) && (pcbuffer == NULL))
 8000b42:	e7ab      	b.n	8000a9c <StartPCTask+0x40>
 8000b44:	08006000 	.word	0x08006000
 8000b48:	20004074 	.word	0x20004074
 8000b4c:	08005ff4 	.word	0x08005ff4
 8000b50:	20004070 	.word	0x20004070
 8000b54:	20003fd4 	.word	0x20003fd4
 8000b58:	2000401c 	.word	0x2000401c

08000b5c <StartCommandtask>:

}


void StartCommandtask(void const * argument)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	CommandMail_t *rptr;

	static uint8_t actualcommand[10];
	static uint8_t actualresponse[10];

	usart_mutex_id = osMutexCreate  (osMutex (usart_mutex));
 8000b64:	4826      	ldr	r0, [pc, #152]	; (8000c00 <StartCommandtask+0xa4>)
 8000b66:	f002 f9de 	bl	8002f26 <osMutexCreate>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <StartCommandtask+0xa8>)
 8000b6e:	601a      	str	r2, [r3, #0]

	while(1)
	{
		event = osMailGet(command_mail, osWaitForever);        // wait for mail
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <StartCommandtask+0xac>)
 8000b72:	6819      	ldr	r1, [r3, #0]
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 fd2f 	bl	80035e0 <osMailGet>
	    if (event.status == osEventMail)
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	2b20      	cmp	r3, #32
 8000b86:	d1f3      	bne.n	8000b70 <StartCommandtask+0x14>
	    {
	    	rptr = event.value.p;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	617b      	str	r3, [r7, #20]

	    	if (rptr->senderID == PCid)
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	795b      	ldrb	r3, [r3, #5]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d115      	bne.n	8000bc0 <StartCommandtask+0x64>
	    	{
	    		osMutexWait(usart_mutex_id, osWaitForever);
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <StartCommandtask+0xa8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 f9db 	bl	8002f58 <osMutexWait>
	    		{
	    			UART_write(&device_uart,rptr->commandstring, rptr->size);
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	6819      	ldr	r1, [r3, #0]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	4817      	ldr	r0, [pc, #92]	; (8000c0c <StartCommandtask+0xb0>)
 8000bb0:	f000 f830 	bl	8000c14 <UART_write>
	    		}
	    		osMutexRelease(usart_mutex_id);
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <StartCommandtask+0xa8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f002 fa1b 	bl	8002ff4 <osMutexRelease>
 8000bbe:	e018      	b.n	8000bf2 <StartCommandtask+0x96>
	    		//osPoolFree (PCMemPool_Id, rptr->commandstring);

	    	}
	    	else if (rptr->senderID == Deviceid)
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	795b      	ldrb	r3, [r3, #5]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d114      	bne.n	8000bf2 <StartCommandtask+0x96>
	    	{
	    		//HAL_UART_Transmit(&pc_usart,rptr->commandstring, rptr->size,10);
	    		osMutexWait(usart_mutex_id, osWaitForever);
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <StartCommandtask+0xa8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 f9c1 	bl	8002f58 <osMutexWait>
	    		{
	    			UART_write(&pc_uart,rptr->commandstring, rptr->size);
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	6819      	ldr	r1, [r3, #0]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <StartCommandtask+0xb4>)
 8000be4:	f000 f816 	bl	8000c14 <UART_write>
	    		}
	    		osMutexRelease(usart_mutex_id);
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <StartCommandtask+0xa8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 fa01 	bl	8002ff4 <osMutexRelease>
	    			HAL_UART_Transmit(&pc_uart,actualresponse, strlen(actualresponse), 100);
	    		}
	    	}
	    	*/

			osMailFree(command_mail, rptr);
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <StartCommandtask+0xac>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6979      	ldr	r1, [r7, #20]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 fd65 	bl	80036c8 <osMailFree>
		event = osMailGet(command_mail, osWaitForever);        // wait for mail
 8000bfe:	e7b7      	b.n	8000b70 <StartCommandtask+0x14>
 8000c00:	08006008 	.word	0x08006008
 8000c04:	2000406c 	.word	0x2000406c
 8000c08:	20003fd4 	.word	0x20003fd4
 8000c0c:	20003fd8 	.word	0x20003fd8
 8000c10:	20004024 	.word	0x20004024

08000c14 <UART_write>:
	    }
	}
}

void UART_write(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	80fb      	strh	r3, [r7, #6]
	if (huart->gState == HAL_UART_STATE_READY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b20      	cmp	r3, #32
 8000c2c:	d11e      	bne.n	8000c6c <UART_write+0x58>
		{

		}
		/* Check that a Tx process is not already ongoing */

		if ((pData == NULL) || (Size == 0U))
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d01d      	beq.n	8000c70 <UART_write+0x5c>
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d01a      	beq.n	8000c70 <UART_write+0x5c>
		{
		  return HAL_ERROR;
		}


		huart->pTxBuffPtr = pData;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	68ba      	ldr	r2, [r7, #8]
 8000c3e:	621a      	str	r2, [r3, #32]
		huart->TxXferSize = Size;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	88fa      	ldrh	r2, [r7, #6]
 8000c44:	849a      	strh	r2, [r3, #36]	; 0x24
		huart->TxXferCount = Size;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	88fa      	ldrh	r2, [r7, #6]
 8000c4a:	84da      	strh	r2, [r3, #38]	; 0x26

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2221      	movs	r2, #33	; 0x21
 8000c56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39



		/* Enable the UART Transmit data register empty Interrupt */
		__HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c68:	60da      	str	r2, [r3, #12]

		return HAL_OK;
 8000c6a:	e002      	b.n	8000c72 <UART_write+0x5e>


	}
	else
	{
		return HAL_BUSY;
 8000c6c:	bf00      	nop
 8000c6e:	e000      	b.n	8000c72 <UART_write+0x5e>
		  return HAL_ERROR;
 8000c70:	bf00      	nop
	}

}
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	if (UartHandle == &device_uart)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a13      	ldr	r2, [pc, #76]	; (8000cd4 <HAL_UART_TxCpltCallback+0x58>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d107      	bne.n	8000c9c <HAL_UART_TxCpltCallback+0x20>
	{
		osPoolFree(DeviceMemPool_Id, UartHandle->pTxBuffPtr);
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_UART_TxCpltCallback+0x5c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4610      	mov	r0, r2
 8000c98:	f002 fab6 	bl	8003208 <osPoolFree>
	}
	if (UartHandle == &pc_uart)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <HAL_UART_TxCpltCallback+0x60>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d107      	bne.n	8000cb4 <HAL_UART_TxCpltCallback+0x38>
	{
		osPoolFree(PCMemPool_Id, UartHandle->pTxBuffPtr);
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_UART_TxCpltCallback+0x64>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a1b      	ldr	r3, [r3, #32]
 8000cac:	4619      	mov	r1, r3
 8000cae:	4610      	mov	r0, r2
 8000cb0:	f002 faaa 	bl	8003208 <osPoolFree>
	}
	__HAL_UART_DISABLE_IT(UartHandle, UART_IT_TC);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cc2:	60da      	str	r2, [r3, #12]
	UartHandle->gState = HAL_UART_STATE_READY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20003fd8 	.word	0x20003fd8
 8000cd8:	20004068 	.word	0x20004068
 8000cdc:	20004024 	.word	0x20004024
 8000ce0:	20004070 	.word	0x20004070

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_MspInit+0x54>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <HAL_MspInit+0x54>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_MspInit+0x54>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_MspInit+0x54>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_MspInit+0x54>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_MspInit+0x54>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	210f      	movs	r1, #15
 8000d26:	f06f 0001 	mvn.w	r0, #1
 8000d2a:	f000 faf7 	bl	800131c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a3a      	ldr	r2, [pc, #232]	; (8000e44 <HAL_UART_MspInit+0x108>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d135      	bne.n	8000dca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
 8000d62:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a38      	ldr	r2, [pc, #224]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a31      	ldr	r2, [pc, #196]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da8:	2307      	movs	r3, #7
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4826      	ldr	r0, [pc, #152]	; (8000e4c <HAL_UART_MspInit+0x110>)
 8000db4:	f000 fadc 	bl	8001370 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2105      	movs	r1, #5
 8000dbc:	2025      	movs	r0, #37	; 0x25
 8000dbe:	f000 faad 	bl	800131c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dc2:	2025      	movs	r0, #37	; 0x25
 8000dc4:	f000 fac6 	bl	8001354 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc8:	e038      	b.n	8000e3c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <HAL_UART_MspInit+0x114>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d133      	bne.n	8000e3c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_UART_MspInit+0x10c>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4809      	ldr	r0, [pc, #36]	; (8000e4c <HAL_UART_MspInit+0x110>)
 8000e28:	f000 faa2 	bl	8001370 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2105      	movs	r1, #5
 8000e30:	2026      	movs	r0, #38	; 0x26
 8000e32:	f000 fa73 	bl	800131c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e36:	2026      	movs	r0, #38	; 0x26
 8000e38:	f000 fa8c 	bl	8001354 <HAL_NVIC_EnableIRQ>
}
 8000e3c:	bf00      	nop
 8000e3e:	3730      	adds	r7, #48	; 0x30
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40011000 	.word	0x40011000
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40004400 	.word	0x40004400

08000e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	2036      	movs	r0, #54	; 0x36
 8000e6a:	f000 fa57 	bl	800131c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000e6e:	2036      	movs	r0, #54	; 0x36
 8000e70:	f000 fa70 	bl	8001354 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_InitTick+0xa4>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <HAL_InitTick+0xa4>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6413      	str	r3, [r2, #64]	; 0x40
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_InitTick+0xa4>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e90:	f107 0210 	add.w	r2, r7, #16
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fd7e 	bl	800199c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ea0:	f000 fd54 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eac:	4a13      	ldr	r2, [pc, #76]	; (8000efc <HAL_InitTick+0xa8>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9b      	lsrs	r3, r3, #18
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_InitTick+0xac>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <HAL_InitTick+0xb0>)
 8000ebc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_InitTick+0xac>)
 8000ec0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_InitTick+0xac>)
 8000ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_InitTick+0xac>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_InitTick+0xac>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <HAL_InitTick+0xac>)
 8000eda:	f001 f98b 	bl	80021f4 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d104      	bne.n	8000eee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <HAL_InitTick+0xac>)
 8000ee6:	f001 f9ba 	bl	800225e <HAL_TIM_Base_Start_IT>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3730      	adds	r7, #48	; 0x30
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	431bde83 	.word	0x431bde83
 8000f00:	20004078 	.word	0x20004078
 8000f04:	40001000 	.word	0x40001000

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(device_uart);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <USART1_IRQHandler+0x10>)
 8000f42:	f000 f819 	bl	8000f78 <Uart_isr>
	return;
 8000f46:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20003fd8 	.word	0x20003fd8

08000f50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	//Uart_isr(&huart2);
	Uart_isr(pc_uart);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <USART2_IRQHandler+0x10>)
 8000f56:	f000 f80f 	bl	8000f78 <Uart_isr>
	return;
 8000f5a:	bf00      	nop
	HAL_UART_IRQHandler(&huart2);

  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20004024 	.word	0x20004024

08000f64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM6_DAC_IRQHandler+0x10>)
 8000f6a:	f001 f99c 	bl	80022a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20004078 	.word	0x20004078

08000f78 <Uart_isr>:

/* USER CODE BEGIN 1 */

void Uart_isr (UART_HandleTypeDef *huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f003 0320 	and.w	r3, r3, #32
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d02d      	beq.n	8000ff6 <Uart_isr+0x7e>
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	f003 0320 	and.w	r3, r3, #32
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d028      	beq.n	8000ff6 <Uart_isr+0x7e>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)  //You received inform from the device
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a38      	ldr	r2, [pc, #224]	; (8001098 <Uart_isr+0x120>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10c      	bne.n	8000fd4 <Uart_isr+0x5c>
        {
        	if(osMessagePut (Device_Queue, c, 10) != osOK)
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <Uart_isr+0x124>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	7bf9      	ldrb	r1, [r7, #15]
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 f98a 	bl	80032dc <osMessagePut>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d05b      	beq.n	8001086 <Uart_isr+0x10e>
			{
			  Error_Handler();
 8000fce:	f7ff fcb5 	bl	800093c <Error_Handler>
			{
			  Error_Handler();
			}
        }

        return;
 8000fd2:	e058      	b.n	8001086 <Uart_isr+0x10e>
        else if (huart == pc_uart) //information from PC
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a32      	ldr	r2, [pc, #200]	; (80010a0 <Uart_isr+0x128>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d154      	bne.n	8001086 <Uart_isr+0x10e>
           	if(osMessagePut (PC_Queue, c, 10) != osOK)
 8000fdc:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <Uart_isr+0x12c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	7bf9      	ldrb	r1, [r7, #15]
 8000fe2:	220a      	movs	r2, #10
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 f979 	bl	80032dc <osMessagePut>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d04a      	beq.n	8001086 <Uart_isr+0x10e>
			  Error_Handler();
 8000ff0:	f7ff fca4 	bl	800093c <Error_Handler>
        return;
 8000ff4:	e047      	b.n	8001086 <Uart_isr+0x10e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d034      	beq.n	800106a <Uart_isr+0xf2>
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001006:	2b00      	cmp	r3, #0
 8001008:	d02f      	beq.n	800106a <Uart_isr+0xf2>
    {

    	//__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
    	//Buffer empty - reset IRQ flag
    	if( (huart->TxXferCount) == 0U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800100e:	b29b      	uxth	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d110      	bne.n	8001036 <Uart_isr+0xbe>
    	{
    	      // Buffer empty, so disable interrupts

    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001022:	60da      	str	r2, [r3, #12]

    	      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001032:	60da      	str	r2, [r3, #12]
    	      huart->Instance->SR;
    	      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
    	      huart->TxXferCount--;
    		 }
    	}
    	return;
 8001034:	e029      	b.n	800108a <Uart_isr+0x112>
    		 if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b21      	cmp	r3, #33	; 0x21
 8001040:	d123      	bne.n	800108a <Uart_isr+0x112>
    	      huart->Instance->SR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	1c59      	adds	r1, r3, #1
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6211      	str	r1, [r2, #32]
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
    	      huart->TxXferCount--;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800105e:	b29b      	uxth	r3, r3
 8001060:	3b01      	subs	r3, #1
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	84da      	strh	r2, [r3, #38]	; 0x26
    	return;
 8001068:	e00f      	b.n	800108a <Uart_isr+0x112>
    }


    /*If interrupt is caused due to Transmit Complete Register */
    if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00c      	beq.n	800108e <Uart_isr+0x116>
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <Uart_isr+0x116>
    {
    	HAL_UART_TxCpltCallback(huart);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fdfc 	bl	8000c7c <HAL_UART_TxCpltCallback>
 8001084:	e004      	b.n	8001090 <Uart_isr+0x118>
        return;
 8001086:	bf00      	nop
 8001088:	e002      	b.n	8001090 <Uart_isr+0x118>
    	return;
 800108a:	bf00      	nop
 800108c:	e000      	b.n	8001090 <Uart_isr+0x118>
    }

    else
    {
      return;
 800108e:	bf00      	nop
    }


}
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20003fd8 	.word	0x20003fd8
 800109c:	20004018 	.word	0x20004018
 80010a0:	20004024 	.word	0x20004024
 80010a4:	2000401c 	.word	0x2000401c

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <SystemInit+0x28>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <SystemInit+0x28>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SystemInit+0x28>)
 80010be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c2:	609a      	str	r2, [r3, #8]
#endif
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010da:	e003      	b.n	80010e4 <LoopCopyDataInit>

080010dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010e2:	3104      	adds	r1, #4

080010e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010ec:	d3f6      	bcc.n	80010dc <CopyDataInit>
  ldr  r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010f0:	e002      	b.n	80010f8 <LoopFillZerobss>

080010f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010f4:	f842 3b04 	str.w	r3, [r2], #4

080010f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010fc:	d3f9      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010fe:	f7ff ffd3 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f004 fed3 	bl	8005eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff fa1d 	bl	8000544 <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001110:	08006038 	.word	0x08006038
  ldr  r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001118:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800111c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001120:	200040bc 	.word	0x200040bc

08001124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_Init+0x40>)
 8001132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_Init+0x40>)
 800113e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_Init+0x40>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f8d8 	bl	8001306 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff fe7c 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff fdc2 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023c00 	.word	0x40023c00

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	200040b8 	.word	0x200040b8

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200040b8 	.word	0x200040b8

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4907      	ldr	r1, [pc, #28]	; (8001248 <__NVIC_EnableIRQ+0x38>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff4c 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132e:	f7ff ff61 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001332:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ffb1 	bl	80012a0 <NVIC_EncodePriority>
 800133e:	4602      	mov	r2, r0
 8001340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff80 	bl	800124c <__NVIC_SetPriority>
}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff54 	bl	8001210 <__NVIC_EnableIRQ>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e165      	b.n	8001658 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f040 8154 	bne.w	8001652 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d00b      	beq.n	80013ca <HAL_GPIO_Init+0x5a>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013be:	2b11      	cmp	r3, #17
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d130      	bne.n	800142c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001400:	2201      	movs	r2, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 0201 	and.w	r2, r3, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0xfc>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b12      	cmp	r3, #18
 800146a:	d123      	bne.n	80014b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	08da      	lsrs	r2, r3, #3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3208      	adds	r2, #8
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3208      	adds	r2, #8
 80014ae:	69b9      	ldr	r1, [r7, #24]
 80014b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0203 	and.w	r2, r3, #3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80ae 	beq.w	8001652 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b5c      	ldr	r3, [pc, #368]	; (800166c <HAL_GPIO_Init+0x2fc>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a5b      	ldr	r2, [pc, #364]	; (800166c <HAL_GPIO_Init+0x2fc>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b59      	ldr	r3, [pc, #356]	; (800166c <HAL_GPIO_Init+0x2fc>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001512:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_GPIO_Init+0x300>)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4e      	ldr	r2, [pc, #312]	; (8001674 <HAL_GPIO_Init+0x304>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x21a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4d      	ldr	r2, [pc, #308]	; (8001678 <HAL_GPIO_Init+0x308>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x216>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4c      	ldr	r2, [pc, #304]	; (800167c <HAL_GPIO_Init+0x30c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x212>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4b      	ldr	r2, [pc, #300]	; (8001680 <HAL_GPIO_Init+0x310>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x20e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4a      	ldr	r2, [pc, #296]	; (8001684 <HAL_GPIO_Init+0x314>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x20a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a49      	ldr	r2, [pc, #292]	; (8001688 <HAL_GPIO_Init+0x318>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x206>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a48      	ldr	r2, [pc, #288]	; (800168c <HAL_GPIO_Init+0x31c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x202>
 800156e:	2306      	movs	r3, #6
 8001570:	e00c      	b.n	800158c <HAL_GPIO_Init+0x21c>
 8001572:	2307      	movs	r3, #7
 8001574:	e00a      	b.n	800158c <HAL_GPIO_Init+0x21c>
 8001576:	2305      	movs	r3, #5
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x21c>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x21c>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x21c>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x21c>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x21c>
 800158a:	2300      	movs	r3, #0
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159c:	4934      	ldr	r1, [pc, #208]	; (8001670 <HAL_GPIO_Init+0x300>)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015aa:	4b39      	ldr	r3, [pc, #228]	; (8001690 <HAL_GPIO_Init+0x320>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ce:	4a30      	ldr	r2, [pc, #192]	; (8001690 <HAL_GPIO_Init+0x320>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <HAL_GPIO_Init+0x320>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f8:	4a25      	ldr	r2, [pc, #148]	; (8001690 <HAL_GPIO_Init+0x320>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_GPIO_Init+0x320>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001622:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <HAL_GPIO_Init+0x320>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_GPIO_Init+0x320>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800164c:	4a10      	ldr	r2, [pc, #64]	; (8001690 <HAL_GPIO_Init+0x320>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b0f      	cmp	r3, #15
 800165c:	f67f ae96 	bls.w	800138c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001660:	bf00      	nop
 8001662:	3724      	adds	r7, #36	; 0x24
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40023800 	.word	0x40023800
 8001670:	40013800 	.word	0x40013800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020400 	.word	0x40020400
 800167c:	40020800 	.word	0x40020800
 8001680:	40020c00 	.word	0x40020c00
 8001684:	40021000 	.word	0x40021000
 8001688:	40021400 	.word	0x40021400
 800168c:	40021800 	.word	0x40021800
 8001690:	40013c00 	.word	0x40013c00

08001694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
 80016a0:	4613      	mov	r3, r2
 80016a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a4:	787b      	ldrb	r3, [r7, #1]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b0:	e003      	b.n	80016ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	041a      	lsls	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	619a      	str	r2, [r3, #24]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_PWREx_EnableOverDrive+0x90>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <HAL_PWREx_EnableOverDrive+0x90>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_PWREx_EnableOverDrive+0x90>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_PWREx_EnableOverDrive+0x94>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f4:	f7ff fd4e 	bl	8001194 <HAL_GetTick>
 80016f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016fa:	e009      	b.n	8001710 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016fc:	f7ff fd4a 	bl	8001194 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800170a:	d901      	bls.n	8001710 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e01f      	b.n	8001750 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <HAL_PWREx_EnableOverDrive+0x98>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d1ee      	bne.n	80016fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001724:	f7ff fd36 	bl	8001194 <HAL_GetTick>
 8001728:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800172a:	e009      	b.n	8001740 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800172c:	f7ff fd32 	bl	8001194 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800173a:	d901      	bls.n	8001740 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e007      	b.n	8001750 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <HAL_PWREx_EnableOverDrive+0x98>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800174c:	d1ee      	bne.n	800172c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	420e0040 	.word	0x420e0040
 8001760:	40007000 	.word	0x40007000
 8001764:	420e0044 	.word	0x420e0044

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0cc      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d90c      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d044      	beq.n	8001888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d119      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d003      	beq.n	8001826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	2b03      	cmp	r3, #3
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e06f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e067      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f023 0203 	bic.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4934      	ldr	r1, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001858:	f7ff fc9c 	bl	8001194 <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	e00a      	b.n	8001876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f7ff fc98 	bl	8001194 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e04f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	429a      	cmp	r2, r3
 8001886:	d1eb      	bne.n	8001860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d20c      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f887 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 80018f2:	4601      	mov	r1, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	fa21 f303 	lsr.w	r3, r1, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff faa0 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	08006010 	.word	0x08006010
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_RCC_GetHCLKFreq+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001950:	f7ff fff0 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 8001954:	4601      	mov	r1, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0a9b      	lsrs	r3, r3, #10
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4a03      	ldr	r2, [pc, #12]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001962:	5cd3      	ldrb	r3, [r2, r3]
 8001964:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	08006020 	.word	0x08006020

08001974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001978:	f7ff ffdc 	bl	8001934 <HAL_RCC_GetHCLKFreq>
 800197c:	4601      	mov	r1, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0b5b      	lsrs	r3, r3, #13
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4a03      	ldr	r2, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	08006020 	.word	0x08006020

0800199c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	220f      	movs	r2, #15
 80019aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0203 	and.w	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_RCC_GetClockConfig+0x60>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 020f 	and.w	r2, r3, #15
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	601a      	str	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a1a:	4bc6      	ldr	r3, [pc, #792]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	f200 817e 	bhi.w	8001d24 <HAL_RCC_GetSysClockFreq+0x324>
 8001a28:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <HAL_RCC_GetSysClockFreq+0x30>)
 8001a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2e:	bf00      	nop
 8001a30:	08001a65 	.word	0x08001a65
 8001a34:	08001d25 	.word	0x08001d25
 8001a38:	08001d25 	.word	0x08001d25
 8001a3c:	08001d25 	.word	0x08001d25
 8001a40:	08001a6b 	.word	0x08001a6b
 8001a44:	08001d25 	.word	0x08001d25
 8001a48:	08001d25 	.word	0x08001d25
 8001a4c:	08001d25 	.word	0x08001d25
 8001a50:	08001a71 	.word	0x08001a71
 8001a54:	08001d25 	.word	0x08001d25
 8001a58:	08001d25 	.word	0x08001d25
 8001a5c:	08001d25 	.word	0x08001d25
 8001a60:	08001bcd 	.word	0x08001bcd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4bb4      	ldr	r3, [pc, #720]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x338>)
 8001a66:	613b      	str	r3, [r7, #16]
       break;
 8001a68:	e15f      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6a:	4bb4      	ldr	r3, [pc, #720]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x33c>)
 8001a6c:	613b      	str	r3, [r7, #16]
      break;
 8001a6e:	e15c      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a70:	4bb0      	ldr	r3, [pc, #704]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a78:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7a:	4bae      	ldr	r3, [pc, #696]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d04a      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4bab      	ldr	r3, [pc, #684]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	f04f 0400 	mov.w	r4, #0
 8001a90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	ea03 0501 	and.w	r5, r3, r1
 8001a9c:	ea04 0602 	and.w	r6, r4, r2
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	4632      	mov	r2, r6
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	f04f 0400 	mov.w	r4, #0
 8001aac:	0154      	lsls	r4, r2, #5
 8001aae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ab2:	014b      	lsls	r3, r1, #5
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	1b49      	subs	r1, r1, r5
 8001aba:	eb62 0206 	sbc.w	r2, r2, r6
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	f04f 0400 	mov.w	r4, #0
 8001ac6:	0194      	lsls	r4, r2, #6
 8001ac8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001acc:	018b      	lsls	r3, r1, #6
 8001ace:	1a5b      	subs	r3, r3, r1
 8001ad0:	eb64 0402 	sbc.w	r4, r4, r2
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	00e2      	lsls	r2, r4, #3
 8001ade:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ae2:	00d9      	lsls	r1, r3, #3
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	195b      	adds	r3, r3, r5
 8001aea:	eb44 0406 	adc.w	r4, r4, r6
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	0262      	lsls	r2, r4, #9
 8001af8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001afc:	0259      	lsls	r1, r3, #9
 8001afe:	460b      	mov	r3, r1
 8001b00:	4614      	mov	r4, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	4621      	mov	r1, r4
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f04f 0400 	mov.w	r4, #0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4623      	mov	r3, r4
 8001b10:	f7fe fb7e 	bl	8000210 <__aeabi_uldivmod>
 8001b14:	4603      	mov	r3, r0
 8001b16:	460c      	mov	r4, r1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e049      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1c:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	f04f 0400 	mov.w	r4, #0
 8001b26:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	ea03 0501 	and.w	r5, r3, r1
 8001b32:	ea04 0602 	and.w	r6, r4, r2
 8001b36:	4629      	mov	r1, r5
 8001b38:	4632      	mov	r2, r6
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	f04f 0400 	mov.w	r4, #0
 8001b42:	0154      	lsls	r4, r2, #5
 8001b44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b48:	014b      	lsls	r3, r1, #5
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4622      	mov	r2, r4
 8001b4e:	1b49      	subs	r1, r1, r5
 8001b50:	eb62 0206 	sbc.w	r2, r2, r6
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	f04f 0400 	mov.w	r4, #0
 8001b5c:	0194      	lsls	r4, r2, #6
 8001b5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b62:	018b      	lsls	r3, r1, #6
 8001b64:	1a5b      	subs	r3, r3, r1
 8001b66:	eb64 0402 	sbc.w	r4, r4, r2
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	00e2      	lsls	r2, r4, #3
 8001b74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b78:	00d9      	lsls	r1, r3, #3
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4614      	mov	r4, r2
 8001b7e:	195b      	adds	r3, r3, r5
 8001b80:	eb44 0406 	adc.w	r4, r4, r6
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	02a2      	lsls	r2, r4, #10
 8001b8e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b92:	0299      	lsls	r1, r3, #10
 8001b94:	460b      	mov	r3, r1
 8001b96:	4614      	mov	r4, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f04f 0400 	mov.w	r4, #0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4623      	mov	r3, r4
 8001ba6:	f7fe fb33 	bl	8000210 <__aeabi_uldivmod>
 8001baa:	4603      	mov	r3, r0
 8001bac:	460c      	mov	r4, r1
 8001bae:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bb0:	4b60      	ldr	r3, [pc, #384]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	0c1b      	lsrs	r3, r3, #16
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	613b      	str	r3, [r7, #16]
      break;
 8001bca:	e0ae      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bcc:	4b59      	ldr	r3, [pc, #356]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd6:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d04a      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be2:	4b54      	ldr	r3, [pc, #336]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	099b      	lsrs	r3, r3, #6
 8001be8:	f04f 0400 	mov.w	r4, #0
 8001bec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	ea03 0501 	and.w	r5, r3, r1
 8001bf8:	ea04 0602 	and.w	r6, r4, r2
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	4632      	mov	r2, r6
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	f04f 0400 	mov.w	r4, #0
 8001c08:	0154      	lsls	r4, r2, #5
 8001c0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c0e:	014b      	lsls	r3, r1, #5
 8001c10:	4619      	mov	r1, r3
 8001c12:	4622      	mov	r2, r4
 8001c14:	1b49      	subs	r1, r1, r5
 8001c16:	eb62 0206 	sbc.w	r2, r2, r6
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	f04f 0400 	mov.w	r4, #0
 8001c22:	0194      	lsls	r4, r2, #6
 8001c24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c28:	018b      	lsls	r3, r1, #6
 8001c2a:	1a5b      	subs	r3, r3, r1
 8001c2c:	eb64 0402 	sbc.w	r4, r4, r2
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	00e2      	lsls	r2, r4, #3
 8001c3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c3e:	00d9      	lsls	r1, r3, #3
 8001c40:	460b      	mov	r3, r1
 8001c42:	4614      	mov	r4, r2
 8001c44:	195b      	adds	r3, r3, r5
 8001c46:	eb44 0406 	adc.w	r4, r4, r6
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	0262      	lsls	r2, r4, #9
 8001c54:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c58:	0259      	lsls	r1, r3, #9
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4614      	mov	r4, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	4621      	mov	r1, r4
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f04f 0400 	mov.w	r4, #0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	f7fe fad0 	bl	8000210 <__aeabi_uldivmod>
 8001c70:	4603      	mov	r3, r0
 8001c72:	460c      	mov	r4, r1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e049      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c78:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	f04f 0400 	mov.w	r4, #0
 8001c82:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	ea03 0501 	and.w	r5, r3, r1
 8001c8e:	ea04 0602 	and.w	r6, r4, r2
 8001c92:	4629      	mov	r1, r5
 8001c94:	4632      	mov	r2, r6
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	f04f 0400 	mov.w	r4, #0
 8001c9e:	0154      	lsls	r4, r2, #5
 8001ca0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ca4:	014b      	lsls	r3, r1, #5
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4622      	mov	r2, r4
 8001caa:	1b49      	subs	r1, r1, r5
 8001cac:	eb62 0206 	sbc.w	r2, r2, r6
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	f04f 0400 	mov.w	r4, #0
 8001cb8:	0194      	lsls	r4, r2, #6
 8001cba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cbe:	018b      	lsls	r3, r1, #6
 8001cc0:	1a5b      	subs	r3, r3, r1
 8001cc2:	eb64 0402 	sbc.w	r4, r4, r2
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	00e2      	lsls	r2, r4, #3
 8001cd0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cd4:	00d9      	lsls	r1, r3, #3
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4614      	mov	r4, r2
 8001cda:	195b      	adds	r3, r3, r5
 8001cdc:	eb44 0406 	adc.w	r4, r4, r6
 8001ce0:	f04f 0100 	mov.w	r1, #0
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	02a2      	lsls	r2, r4, #10
 8001cea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001cee:	0299      	lsls	r1, r3, #10
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4614      	mov	r4, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f04f 0400 	mov.w	r4, #0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4623      	mov	r3, r4
 8001d02:	f7fe fa85 	bl	8000210 <__aeabi_uldivmod>
 8001d06:	4603      	mov	r3, r0
 8001d08:	460c      	mov	r4, r1
 8001d0a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	0f1b      	lsrs	r3, r3, #28
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	613b      	str	r3, [r7, #16]
      break;
 8001d22:	e002      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x338>)
 8001d26:	613b      	str	r3, [r7, #16]
      break;
 8001d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d2a:	693b      	ldr	r3, [r7, #16]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	00f42400 	.word	0x00f42400
 8001d3c:	007a1200 	.word	0x007a1200

08001d40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8083 	beq.w	8001e60 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d5a:	4b95      	ldr	r3, [pc, #596]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d019      	beq.n	8001d9a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d66:	4b92      	ldr	r3, [pc, #584]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d106      	bne.n	8001d80 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d72:	4b8f      	ldr	r3, [pc, #572]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d7e:	d00c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d80:	4b8b      	ldr	r3, [pc, #556]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d112      	bne.n	8001db2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8c:	4b88      	ldr	r3, [pc, #544]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d98:	d10b      	bne.n	8001db2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9a:	4b85      	ldr	r3, [pc, #532]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d05b      	beq.n	8001e5e <HAL_RCC_OscConfig+0x11e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d157      	bne.n	8001e5e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e216      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x8a>
 8001dbc:	4b7c      	ldr	r3, [pc, #496]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a7b      	ldr	r2, [pc, #492]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e01d      	b.n	8001e06 <HAL_RCC_OscConfig+0xc6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0xae>
 8001dd4:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a75      	ldr	r2, [pc, #468]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001dda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b73      	ldr	r3, [pc, #460]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a72      	ldr	r2, [pc, #456]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0xc6>
 8001dee:	4b70      	ldr	r3, [pc, #448]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6f      	ldr	r2, [pc, #444]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6c      	ldr	r2, [pc, #432]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d013      	beq.n	8001e36 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff f9c1 	bl	8001194 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e16:	f7ff f9bd 	bl	8001194 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b64      	cmp	r3, #100	; 0x64
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1db      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e28:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0xd6>
 8001e34:	e014      	b.n	8001e60 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7ff f9ad 	bl	8001194 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e3e:	f7ff f9a9 	bl	8001194 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b64      	cmp	r3, #100	; 0x64
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e1c7      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e50:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0xfe>
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d06f      	beq.n	8001f4c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e6c:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d017      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e78:	4b4d      	ldr	r3, [pc, #308]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d105      	bne.n	8001e90 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e90:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d11c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e9c:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d116      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x180>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e18f      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4938      	ldr	r1, [pc, #224]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed4:	e03a      	b.n	8001f4c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d020      	beq.n	8001f20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f956 	bl	8001194 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eec:	f7ff f952 	bl	8001194 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e170      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4925      	ldr	r1, [pc, #148]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
 8001f1e:	e015      	b.n	8001f4c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_RCC_OscConfig+0x274>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7ff f935 	bl	8001194 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7ff f931 	bl	8001194 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e14f      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d037      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d016      	beq.n	8001f8e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f60:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_RCC_OscConfig+0x278>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7ff f915 	bl	8001194 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7ff f911 	bl	8001194 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e12f      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_OscConfig+0x270>)
 8001f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x22e>
 8001f8c:	e01c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCC_OscConfig+0x278>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff f8fe 	bl	8001194 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9a:	e00f      	b.n	8001fbc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff f8fa 	bl	8001194 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d908      	bls.n	8001fbc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e118      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	42470000 	.word	0x42470000
 8001fb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	4b8a      	ldr	r3, [pc, #552]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8001fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e9      	bne.n	8001f9c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 8097 	beq.w	8002104 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fda:	4b83      	ldr	r3, [pc, #524]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10f      	bne.n	8002006 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b7f      	ldr	r3, [pc, #508]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a7e      	ldr	r2, [pc, #504]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b7c      	ldr	r3, [pc, #496]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	4b79      	ldr	r3, [pc, #484]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002012:	4b76      	ldr	r3, [pc, #472]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a75      	ldr	r2, [pc, #468]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7ff f8b9 	bl	8001194 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7ff f8b5 	bl	8001194 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e0d3      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b6c      	ldr	r3, [pc, #432]	; (80021ec <HAL_RCC_OscConfig+0x4ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x31a>
 800204c:	4b66      	ldr	r3, [pc, #408]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	4a65      	ldr	r2, [pc, #404]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6713      	str	r3, [r2, #112]	; 0x70
 8002058:	e01c      	b.n	8002094 <HAL_RCC_OscConfig+0x354>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b05      	cmp	r3, #5
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x33c>
 8002062:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	4a60      	ldr	r2, [pc, #384]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6713      	str	r3, [r2, #112]	; 0x70
 800206e:	4b5e      	ldr	r3, [pc, #376]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	4a5d      	ldr	r2, [pc, #372]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6713      	str	r3, [r2, #112]	; 0x70
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0x354>
 800207c:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	4a59      	ldr	r2, [pc, #356]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
 8002088:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208c:	4a56      	ldr	r2, [pc, #344]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 800208e:	f023 0304 	bic.w	r3, r3, #4
 8002092:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d015      	beq.n	80020c8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7ff f87a 	bl	8001194 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7ff f876 	bl	8001194 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e092      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ba:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0ee      	beq.n	80020a4 <HAL_RCC_OscConfig+0x364>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff f864 	bl	8001194 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7ff f860 	bl	8001194 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e07c      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e6:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ee      	bne.n	80020d0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d105      	bne.n	8002104 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f8:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	4a3a      	ldr	r2, [pc, #232]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 80020fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002102:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d068      	beq.n	80021de <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800210c:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d060      	beq.n	80021da <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d145      	bne.n	80021ac <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002120:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <HAL_RCC_OscConfig+0x4b0>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7ff f835 	bl	8001194 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212e:	f7ff f831 	bl	8001194 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e04f      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f0      	bne.n	800212e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	019b      	lsls	r3, r3, #6
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	085b      	lsrs	r3, r3, #1
 8002164:	3b01      	subs	r3, #1
 8002166:	041b      	lsls	r3, r3, #16
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	061b      	lsls	r3, r3, #24
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	071b      	lsls	r3, r3, #28
 8002178:	491b      	ldr	r1, [pc, #108]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_RCC_OscConfig+0x4b0>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff f806 	bl	8001194 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff f802 	bl	8001194 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e020      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x44c>
 80021aa:	e018      	b.n	80021de <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_RCC_OscConfig+0x4b0>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe ffef 	bl	8001194 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe ffeb 	bl	8001194 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e009      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_OscConfig+0x4a8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x47a>
 80021d8:	e001      	b.n	80021de <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40007000 	.word	0x40007000
 80021f0:	42470060 	.word	0x42470060

080021f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e01d      	b.n	8002242 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f815 	bl	800224a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f000 f968 	bl	8002508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d007      	beq.n	8002298 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d122      	bne.n	8002302 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d11b      	bne.n	8002302 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f06f 0202 	mvn.w	r2, #2
 80022d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f8ee 	bl	80024ca <HAL_TIM_IC_CaptureCallback>
 80022ee:	e005      	b.n	80022fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f8e0 	bl	80024b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8f1 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b04      	cmp	r3, #4
 800230e:	d122      	bne.n	8002356 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b04      	cmp	r3, #4
 800231c:	d11b      	bne.n	8002356 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f06f 0204 	mvn.w	r2, #4
 8002326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f8c4 	bl	80024ca <HAL_TIM_IC_CaptureCallback>
 8002342:	e005      	b.n	8002350 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f8b6 	bl	80024b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f8c7 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b08      	cmp	r3, #8
 8002362:	d122      	bne.n	80023aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b08      	cmp	r3, #8
 8002370:	d11b      	bne.n	80023aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f06f 0208 	mvn.w	r2, #8
 800237a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2204      	movs	r2, #4
 8002380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f89a 	bl	80024ca <HAL_TIM_IC_CaptureCallback>
 8002396:	e005      	b.n	80023a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f88c 	bl	80024b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f89d 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d122      	bne.n	80023fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d11b      	bne.n	80023fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0210 	mvn.w	r2, #16
 80023ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2208      	movs	r2, #8
 80023d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f870 	bl	80024ca <HAL_TIM_IC_CaptureCallback>
 80023ea:	e005      	b.n	80023f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f862 	bl	80024b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f873 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d10e      	bne.n	800242a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f06f 0201 	mvn.w	r2, #1
 8002422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7fe fa77 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002434:	2b80      	cmp	r3, #128	; 0x80
 8002436:	d10e      	bne.n	8002456 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002442:	2b80      	cmp	r3, #128	; 0x80
 8002444:	d107      	bne.n	8002456 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800244e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f903 	bl	800265c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d10e      	bne.n	8002482 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d107      	bne.n	8002482 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800247a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f838 	bl	80024f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b20      	cmp	r3, #32
 800248e:	d10e      	bne.n	80024ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b20      	cmp	r3, #32
 800249c:	d107      	bne.n	80024ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f06f 0220 	mvn.w	r2, #32
 80024a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f8cd 	bl	8002648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a40      	ldr	r2, [pc, #256]	; (800261c <TIM_Base_SetConfig+0x114>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <TIM_Base_SetConfig+0x40>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002526:	d00f      	beq.n	8002548 <TIM_Base_SetConfig+0x40>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a3d      	ldr	r2, [pc, #244]	; (8002620 <TIM_Base_SetConfig+0x118>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00b      	beq.n	8002548 <TIM_Base_SetConfig+0x40>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a3c      	ldr	r2, [pc, #240]	; (8002624 <TIM_Base_SetConfig+0x11c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <TIM_Base_SetConfig+0x40>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a3b      	ldr	r2, [pc, #236]	; (8002628 <TIM_Base_SetConfig+0x120>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d003      	beq.n	8002548 <TIM_Base_SetConfig+0x40>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a3a      	ldr	r2, [pc, #232]	; (800262c <TIM_Base_SetConfig+0x124>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d108      	bne.n	800255a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a2f      	ldr	r2, [pc, #188]	; (800261c <TIM_Base_SetConfig+0x114>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02b      	beq.n	80025ba <TIM_Base_SetConfig+0xb2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002568:	d027      	beq.n	80025ba <TIM_Base_SetConfig+0xb2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a2c      	ldr	r2, [pc, #176]	; (8002620 <TIM_Base_SetConfig+0x118>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d023      	beq.n	80025ba <TIM_Base_SetConfig+0xb2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a2b      	ldr	r2, [pc, #172]	; (8002624 <TIM_Base_SetConfig+0x11c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01f      	beq.n	80025ba <TIM_Base_SetConfig+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <TIM_Base_SetConfig+0x120>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01b      	beq.n	80025ba <TIM_Base_SetConfig+0xb2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a29      	ldr	r2, [pc, #164]	; (800262c <TIM_Base_SetConfig+0x124>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d017      	beq.n	80025ba <TIM_Base_SetConfig+0xb2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a28      	ldr	r2, [pc, #160]	; (8002630 <TIM_Base_SetConfig+0x128>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <TIM_Base_SetConfig+0xb2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a27      	ldr	r2, [pc, #156]	; (8002634 <TIM_Base_SetConfig+0x12c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00f      	beq.n	80025ba <TIM_Base_SetConfig+0xb2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a26      	ldr	r2, [pc, #152]	; (8002638 <TIM_Base_SetConfig+0x130>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00b      	beq.n	80025ba <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a25      	ldr	r2, [pc, #148]	; (800263c <TIM_Base_SetConfig+0x134>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a24      	ldr	r2, [pc, #144]	; (8002640 <TIM_Base_SetConfig+0x138>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d003      	beq.n	80025ba <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a23      	ldr	r2, [pc, #140]	; (8002644 <TIM_Base_SetConfig+0x13c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d108      	bne.n	80025cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <TIM_Base_SetConfig+0x114>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d003      	beq.n	8002600 <TIM_Base_SetConfig+0xf8>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a0c      	ldr	r2, [pc, #48]	; (800262c <TIM_Base_SetConfig+0x124>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d103      	bne.n	8002608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	615a      	str	r2, [r3, #20]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40010000 	.word	0x40010000
 8002620:	40000400 	.word	0x40000400
 8002624:	40000800 	.word	0x40000800
 8002628:	40000c00 	.word	0x40000c00
 800262c:	40010400 	.word	0x40010400
 8002630:	40014000 	.word	0x40014000
 8002634:	40014400 	.word	0x40014400
 8002638:	40014800 	.word	0x40014800
 800263c:	40001800 	.word	0x40001800
 8002640:	40001c00 	.word	0x40001c00
 8002644:	40002000 	.word	0x40002000

08002648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e03f      	b.n	8002702 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe fb50 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f829 	bl	800270c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800274e:	f023 030c 	bic.w	r3, r3, #12
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	68f9      	ldr	r1, [r7, #12]
 8002758:	430b      	orrs	r3, r1
 800275a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800277a:	f040 818b 	bne.w	8002a94 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4ac1      	ldr	r2, [pc, #772]	; (8002a88 <UART_SetConfig+0x37c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d005      	beq.n	8002794 <UART_SetConfig+0x88>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4abf      	ldr	r2, [pc, #764]	; (8002a8c <UART_SetConfig+0x380>)
 800278e:	4293      	cmp	r3, r2
 8002790:	f040 80bd 	bne.w	800290e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002794:	f7ff f8ee 	bl	8001974 <HAL_RCC_GetPCLK2Freq>
 8002798:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	461d      	mov	r5, r3
 800279e:	f04f 0600 	mov.w	r6, #0
 80027a2:	46a8      	mov	r8, r5
 80027a4:	46b1      	mov	r9, r6
 80027a6:	eb18 0308 	adds.w	r3, r8, r8
 80027aa:	eb49 0409 	adc.w	r4, r9, r9
 80027ae:	4698      	mov	r8, r3
 80027b0:	46a1      	mov	r9, r4
 80027b2:	eb18 0805 	adds.w	r8, r8, r5
 80027b6:	eb49 0906 	adc.w	r9, r9, r6
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027ce:	4688      	mov	r8, r1
 80027d0:	4691      	mov	r9, r2
 80027d2:	eb18 0005 	adds.w	r0, r8, r5
 80027d6:	eb49 0106 	adc.w	r1, r9, r6
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	461d      	mov	r5, r3
 80027e0:	f04f 0600 	mov.w	r6, #0
 80027e4:	196b      	adds	r3, r5, r5
 80027e6:	eb46 0406 	adc.w	r4, r6, r6
 80027ea:	461a      	mov	r2, r3
 80027ec:	4623      	mov	r3, r4
 80027ee:	f7fd fd0f 	bl	8000210 <__aeabi_uldivmod>
 80027f2:	4603      	mov	r3, r0
 80027f4:	460c      	mov	r4, r1
 80027f6:	461a      	mov	r2, r3
 80027f8:	4ba5      	ldr	r3, [pc, #660]	; (8002a90 <UART_SetConfig+0x384>)
 80027fa:	fba3 2302 	umull	r2, r3, r3, r2
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	461d      	mov	r5, r3
 8002808:	f04f 0600 	mov.w	r6, #0
 800280c:	46a9      	mov	r9, r5
 800280e:	46b2      	mov	sl, r6
 8002810:	eb19 0309 	adds.w	r3, r9, r9
 8002814:	eb4a 040a 	adc.w	r4, sl, sl
 8002818:	4699      	mov	r9, r3
 800281a:	46a2      	mov	sl, r4
 800281c:	eb19 0905 	adds.w	r9, r9, r5
 8002820:	eb4a 0a06 	adc.w	sl, sl, r6
 8002824:	f04f 0100 	mov.w	r1, #0
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002830:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002834:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002838:	4689      	mov	r9, r1
 800283a:	4692      	mov	sl, r2
 800283c:	eb19 0005 	adds.w	r0, r9, r5
 8002840:	eb4a 0106 	adc.w	r1, sl, r6
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	461d      	mov	r5, r3
 800284a:	f04f 0600 	mov.w	r6, #0
 800284e:	196b      	adds	r3, r5, r5
 8002850:	eb46 0406 	adc.w	r4, r6, r6
 8002854:	461a      	mov	r2, r3
 8002856:	4623      	mov	r3, r4
 8002858:	f7fd fcda 	bl	8000210 <__aeabi_uldivmod>
 800285c:	4603      	mov	r3, r0
 800285e:	460c      	mov	r4, r1
 8002860:	461a      	mov	r2, r3
 8002862:	4b8b      	ldr	r3, [pc, #556]	; (8002a90 <UART_SetConfig+0x384>)
 8002864:	fba3 1302 	umull	r1, r3, r3, r2
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	2164      	movs	r1, #100	; 0x64
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	3332      	adds	r3, #50	; 0x32
 8002876:	4a86      	ldr	r2, [pc, #536]	; (8002a90 <UART_SetConfig+0x384>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002884:	4498      	add	r8, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	461d      	mov	r5, r3
 800288a:	f04f 0600 	mov.w	r6, #0
 800288e:	46a9      	mov	r9, r5
 8002890:	46b2      	mov	sl, r6
 8002892:	eb19 0309 	adds.w	r3, r9, r9
 8002896:	eb4a 040a 	adc.w	r4, sl, sl
 800289a:	4699      	mov	r9, r3
 800289c:	46a2      	mov	sl, r4
 800289e:	eb19 0905 	adds.w	r9, r9, r5
 80028a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028ba:	4689      	mov	r9, r1
 80028bc:	4692      	mov	sl, r2
 80028be:	eb19 0005 	adds.w	r0, r9, r5
 80028c2:	eb4a 0106 	adc.w	r1, sl, r6
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	461d      	mov	r5, r3
 80028cc:	f04f 0600 	mov.w	r6, #0
 80028d0:	196b      	adds	r3, r5, r5
 80028d2:	eb46 0406 	adc.w	r4, r6, r6
 80028d6:	461a      	mov	r2, r3
 80028d8:	4623      	mov	r3, r4
 80028da:	f7fd fc99 	bl	8000210 <__aeabi_uldivmod>
 80028de:	4603      	mov	r3, r0
 80028e0:	460c      	mov	r4, r1
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <UART_SetConfig+0x384>)
 80028e6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2164      	movs	r1, #100	; 0x64
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	3332      	adds	r3, #50	; 0x32
 80028f8:	4a65      	ldr	r2, [pc, #404]	; (8002a90 <UART_SetConfig+0x384>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	f003 0207 	and.w	r2, r3, #7
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4442      	add	r2, r8
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	e26f      	b.n	8002dee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800290e:	f7ff f81d 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8002912:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	461d      	mov	r5, r3
 8002918:	f04f 0600 	mov.w	r6, #0
 800291c:	46a8      	mov	r8, r5
 800291e:	46b1      	mov	r9, r6
 8002920:	eb18 0308 	adds.w	r3, r8, r8
 8002924:	eb49 0409 	adc.w	r4, r9, r9
 8002928:	4698      	mov	r8, r3
 800292a:	46a1      	mov	r9, r4
 800292c:	eb18 0805 	adds.w	r8, r8, r5
 8002930:	eb49 0906 	adc.w	r9, r9, r6
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002940:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002944:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002948:	4688      	mov	r8, r1
 800294a:	4691      	mov	r9, r2
 800294c:	eb18 0005 	adds.w	r0, r8, r5
 8002950:	eb49 0106 	adc.w	r1, r9, r6
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	461d      	mov	r5, r3
 800295a:	f04f 0600 	mov.w	r6, #0
 800295e:	196b      	adds	r3, r5, r5
 8002960:	eb46 0406 	adc.w	r4, r6, r6
 8002964:	461a      	mov	r2, r3
 8002966:	4623      	mov	r3, r4
 8002968:	f7fd fc52 	bl	8000210 <__aeabi_uldivmod>
 800296c:	4603      	mov	r3, r0
 800296e:	460c      	mov	r4, r1
 8002970:	461a      	mov	r2, r3
 8002972:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <UART_SetConfig+0x384>)
 8002974:	fba3 2302 	umull	r2, r3, r3, r2
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	461d      	mov	r5, r3
 8002982:	f04f 0600 	mov.w	r6, #0
 8002986:	46a9      	mov	r9, r5
 8002988:	46b2      	mov	sl, r6
 800298a:	eb19 0309 	adds.w	r3, r9, r9
 800298e:	eb4a 040a 	adc.w	r4, sl, sl
 8002992:	4699      	mov	r9, r3
 8002994:	46a2      	mov	sl, r4
 8002996:	eb19 0905 	adds.w	r9, r9, r5
 800299a:	eb4a 0a06 	adc.w	sl, sl, r6
 800299e:	f04f 0100 	mov.w	r1, #0
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029b2:	4689      	mov	r9, r1
 80029b4:	4692      	mov	sl, r2
 80029b6:	eb19 0005 	adds.w	r0, r9, r5
 80029ba:	eb4a 0106 	adc.w	r1, sl, r6
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	461d      	mov	r5, r3
 80029c4:	f04f 0600 	mov.w	r6, #0
 80029c8:	196b      	adds	r3, r5, r5
 80029ca:	eb46 0406 	adc.w	r4, r6, r6
 80029ce:	461a      	mov	r2, r3
 80029d0:	4623      	mov	r3, r4
 80029d2:	f7fd fc1d 	bl	8000210 <__aeabi_uldivmod>
 80029d6:	4603      	mov	r3, r0
 80029d8:	460c      	mov	r4, r1
 80029da:	461a      	mov	r2, r3
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <UART_SetConfig+0x384>)
 80029de:	fba3 1302 	umull	r1, r3, r3, r2
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2164      	movs	r1, #100	; 0x64
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	3332      	adds	r3, #50	; 0x32
 80029f0:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <UART_SetConfig+0x384>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029fe:	4498      	add	r8, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	461d      	mov	r5, r3
 8002a04:	f04f 0600 	mov.w	r6, #0
 8002a08:	46a9      	mov	r9, r5
 8002a0a:	46b2      	mov	sl, r6
 8002a0c:	eb19 0309 	adds.w	r3, r9, r9
 8002a10:	eb4a 040a 	adc.w	r4, sl, sl
 8002a14:	4699      	mov	r9, r3
 8002a16:	46a2      	mov	sl, r4
 8002a18:	eb19 0905 	adds.w	r9, r9, r5
 8002a1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a20:	f04f 0100 	mov.w	r1, #0
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a34:	4689      	mov	r9, r1
 8002a36:	4692      	mov	sl, r2
 8002a38:	eb19 0005 	adds.w	r0, r9, r5
 8002a3c:	eb4a 0106 	adc.w	r1, sl, r6
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	461d      	mov	r5, r3
 8002a46:	f04f 0600 	mov.w	r6, #0
 8002a4a:	196b      	adds	r3, r5, r5
 8002a4c:	eb46 0406 	adc.w	r4, r6, r6
 8002a50:	461a      	mov	r2, r3
 8002a52:	4623      	mov	r3, r4
 8002a54:	f7fd fbdc 	bl	8000210 <__aeabi_uldivmod>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <UART_SetConfig+0x384>)
 8002a60:	fba3 1302 	umull	r1, r3, r3, r2
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	2164      	movs	r1, #100	; 0x64
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	3332      	adds	r3, #50	; 0x32
 8002a72:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <UART_SetConfig+0x384>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	f003 0207 	and.w	r2, r3, #7
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4442      	add	r2, r8
 8002a84:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002a86:	e1b2      	b.n	8002dee <UART_SetConfig+0x6e2>
 8002a88:	40011000 	.word	0x40011000
 8002a8c:	40011400 	.word	0x40011400
 8002a90:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4ad7      	ldr	r2, [pc, #860]	; (8002df8 <UART_SetConfig+0x6ec>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d005      	beq.n	8002aaa <UART_SetConfig+0x39e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4ad6      	ldr	r2, [pc, #856]	; (8002dfc <UART_SetConfig+0x6f0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	f040 80d1 	bne.w	8002c4c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aaa:	f7fe ff63 	bl	8001974 <HAL_RCC_GetPCLK2Freq>
 8002aae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	469a      	mov	sl, r3
 8002ab4:	f04f 0b00 	mov.w	fp, #0
 8002ab8:	46d0      	mov	r8, sl
 8002aba:	46d9      	mov	r9, fp
 8002abc:	eb18 0308 	adds.w	r3, r8, r8
 8002ac0:	eb49 0409 	adc.w	r4, r9, r9
 8002ac4:	4698      	mov	r8, r3
 8002ac6:	46a1      	mov	r9, r4
 8002ac8:	eb18 080a 	adds.w	r8, r8, sl
 8002acc:	eb49 090b 	adc.w	r9, r9, fp
 8002ad0:	f04f 0100 	mov.w	r1, #0
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002adc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ae0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ae4:	4688      	mov	r8, r1
 8002ae6:	4691      	mov	r9, r2
 8002ae8:	eb1a 0508 	adds.w	r5, sl, r8
 8002aec:	eb4b 0609 	adc.w	r6, fp, r9
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4619      	mov	r1, r3
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	f04f 0400 	mov.w	r4, #0
 8002b02:	0094      	lsls	r4, r2, #2
 8002b04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b08:	008b      	lsls	r3, r1, #2
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	4628      	mov	r0, r5
 8002b10:	4631      	mov	r1, r6
 8002b12:	f7fd fb7d 	bl	8000210 <__aeabi_uldivmod>
 8002b16:	4603      	mov	r3, r0
 8002b18:	460c      	mov	r4, r1
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4bb8      	ldr	r3, [pc, #736]	; (8002e00 <UART_SetConfig+0x6f4>)
 8002b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	469b      	mov	fp, r3
 8002b2c:	f04f 0c00 	mov.w	ip, #0
 8002b30:	46d9      	mov	r9, fp
 8002b32:	46e2      	mov	sl, ip
 8002b34:	eb19 0309 	adds.w	r3, r9, r9
 8002b38:	eb4a 040a 	adc.w	r4, sl, sl
 8002b3c:	4699      	mov	r9, r3
 8002b3e:	46a2      	mov	sl, r4
 8002b40:	eb19 090b 	adds.w	r9, r9, fp
 8002b44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b5c:	4689      	mov	r9, r1
 8002b5e:	4692      	mov	sl, r2
 8002b60:	eb1b 0509 	adds.w	r5, fp, r9
 8002b64:	eb4c 060a 	adc.w	r6, ip, sl
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	f04f 0400 	mov.w	r4, #0
 8002b7a:	0094      	lsls	r4, r2, #2
 8002b7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b80:	008b      	lsls	r3, r1, #2
 8002b82:	461a      	mov	r2, r3
 8002b84:	4623      	mov	r3, r4
 8002b86:	4628      	mov	r0, r5
 8002b88:	4631      	mov	r1, r6
 8002b8a:	f7fd fb41 	bl	8000210 <__aeabi_uldivmod>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	460c      	mov	r4, r1
 8002b92:	461a      	mov	r2, r3
 8002b94:	4b9a      	ldr	r3, [pc, #616]	; (8002e00 <UART_SetConfig+0x6f4>)
 8002b96:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	2164      	movs	r1, #100	; 0x64
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	3332      	adds	r3, #50	; 0x32
 8002ba8:	4a95      	ldr	r2, [pc, #596]	; (8002e00 <UART_SetConfig+0x6f4>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb4:	4498      	add	r8, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	469b      	mov	fp, r3
 8002bba:	f04f 0c00 	mov.w	ip, #0
 8002bbe:	46d9      	mov	r9, fp
 8002bc0:	46e2      	mov	sl, ip
 8002bc2:	eb19 0309 	adds.w	r3, r9, r9
 8002bc6:	eb4a 040a 	adc.w	r4, sl, sl
 8002bca:	4699      	mov	r9, r3
 8002bcc:	46a2      	mov	sl, r4
 8002bce:	eb19 090b 	adds.w	r9, r9, fp
 8002bd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002be2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002be6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bea:	4689      	mov	r9, r1
 8002bec:	4692      	mov	sl, r2
 8002bee:	eb1b 0509 	adds.w	r5, fp, r9
 8002bf2:	eb4c 060a 	adc.w	r6, ip, sl
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	f04f 0400 	mov.w	r4, #0
 8002c08:	0094      	lsls	r4, r2, #2
 8002c0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c0e:	008b      	lsls	r3, r1, #2
 8002c10:	461a      	mov	r2, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	4628      	mov	r0, r5
 8002c16:	4631      	mov	r1, r6
 8002c18:	f7fd fafa 	bl	8000210 <__aeabi_uldivmod>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	460c      	mov	r4, r1
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b77      	ldr	r3, [pc, #476]	; (8002e00 <UART_SetConfig+0x6f4>)
 8002c24:	fba3 1302 	umull	r1, r3, r3, r2
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	2164      	movs	r1, #100	; 0x64
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	3332      	adds	r3, #50	; 0x32
 8002c36:	4a72      	ldr	r2, [pc, #456]	; (8002e00 <UART_SetConfig+0x6f4>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	f003 020f 	and.w	r2, r3, #15
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4442      	add	r2, r8
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	e0d0      	b.n	8002dee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c4c:	f7fe fe7e 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8002c50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	469a      	mov	sl, r3
 8002c56:	f04f 0b00 	mov.w	fp, #0
 8002c5a:	46d0      	mov	r8, sl
 8002c5c:	46d9      	mov	r9, fp
 8002c5e:	eb18 0308 	adds.w	r3, r8, r8
 8002c62:	eb49 0409 	adc.w	r4, r9, r9
 8002c66:	4698      	mov	r8, r3
 8002c68:	46a1      	mov	r9, r4
 8002c6a:	eb18 080a 	adds.w	r8, r8, sl
 8002c6e:	eb49 090b 	adc.w	r9, r9, fp
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c86:	4688      	mov	r8, r1
 8002c88:	4691      	mov	r9, r2
 8002c8a:	eb1a 0508 	adds.w	r5, sl, r8
 8002c8e:	eb4b 0609 	adc.w	r6, fp, r9
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	f04f 0400 	mov.w	r4, #0
 8002ca4:	0094      	lsls	r4, r2, #2
 8002ca6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002caa:	008b      	lsls	r3, r1, #2
 8002cac:	461a      	mov	r2, r3
 8002cae:	4623      	mov	r3, r4
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	4631      	mov	r1, r6
 8002cb4:	f7fd faac 	bl	8000210 <__aeabi_uldivmod>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	460c      	mov	r4, r1
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <UART_SetConfig+0x6f4>)
 8002cc0:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	469b      	mov	fp, r3
 8002cce:	f04f 0c00 	mov.w	ip, #0
 8002cd2:	46d9      	mov	r9, fp
 8002cd4:	46e2      	mov	sl, ip
 8002cd6:	eb19 0309 	adds.w	r3, r9, r9
 8002cda:	eb4a 040a 	adc.w	r4, sl, sl
 8002cde:	4699      	mov	r9, r3
 8002ce0:	46a2      	mov	sl, r4
 8002ce2:	eb19 090b 	adds.w	r9, r9, fp
 8002ce6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002cea:	f04f 0100 	mov.w	r1, #0
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cfe:	4689      	mov	r9, r1
 8002d00:	4692      	mov	sl, r2
 8002d02:	eb1b 0509 	adds.w	r5, fp, r9
 8002d06:	eb4c 060a 	adc.w	r6, ip, sl
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	f04f 0400 	mov.w	r4, #0
 8002d1c:	0094      	lsls	r4, r2, #2
 8002d1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d22:	008b      	lsls	r3, r1, #2
 8002d24:	461a      	mov	r2, r3
 8002d26:	4623      	mov	r3, r4
 8002d28:	4628      	mov	r0, r5
 8002d2a:	4631      	mov	r1, r6
 8002d2c:	f7fd fa70 	bl	8000210 <__aeabi_uldivmod>
 8002d30:	4603      	mov	r3, r0
 8002d32:	460c      	mov	r4, r1
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b32      	ldr	r3, [pc, #200]	; (8002e00 <UART_SetConfig+0x6f4>)
 8002d38:	fba3 1302 	umull	r1, r3, r3, r2
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	2164      	movs	r1, #100	; 0x64
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	3332      	adds	r3, #50	; 0x32
 8002d4a:	4a2d      	ldr	r2, [pc, #180]	; (8002e00 <UART_SetConfig+0x6f4>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d56:	4498      	add	r8, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	469b      	mov	fp, r3
 8002d5c:	f04f 0c00 	mov.w	ip, #0
 8002d60:	46d9      	mov	r9, fp
 8002d62:	46e2      	mov	sl, ip
 8002d64:	eb19 0309 	adds.w	r3, r9, r9
 8002d68:	eb4a 040a 	adc.w	r4, sl, sl
 8002d6c:	4699      	mov	r9, r3
 8002d6e:	46a2      	mov	sl, r4
 8002d70:	eb19 090b 	adds.w	r9, r9, fp
 8002d74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d78:	f04f 0100 	mov.w	r1, #0
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d8c:	4689      	mov	r9, r1
 8002d8e:	4692      	mov	sl, r2
 8002d90:	eb1b 0509 	adds.w	r5, fp, r9
 8002d94:	eb4c 060a 	adc.w	r6, ip, sl
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	f04f 0400 	mov.w	r4, #0
 8002daa:	0094      	lsls	r4, r2, #2
 8002dac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002db0:	008b      	lsls	r3, r1, #2
 8002db2:	461a      	mov	r2, r3
 8002db4:	4623      	mov	r3, r4
 8002db6:	4628      	mov	r0, r5
 8002db8:	4631      	mov	r1, r6
 8002dba:	f7fd fa29 	bl	8000210 <__aeabi_uldivmod>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <UART_SetConfig+0x6f4>)
 8002dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2164      	movs	r1, #100	; 0x64
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	3332      	adds	r3, #50	; 0x32
 8002dd8:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <UART_SetConfig+0x6f4>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	f003 020f 	and.w	r2, r3, #15
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4442      	add	r2, r8
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	e7ff      	b.n	8002dee <UART_SetConfig+0x6e2>
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df8:	40011000 	.word	0x40011000
 8002dfc:	40011400 	.word	0x40011400
 8002e00:	51eb851f 	.word	0x51eb851f

08002e04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e16:	2b84      	cmp	r3, #132	; 0x84
 8002e18:	d005      	beq.n	8002e26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002e1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4413      	add	r3, r2
 8002e22:	3303      	adds	r3, #3
 8002e24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002e26:	68fb      	ldr	r3, [r7, #12]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e3a:	f3ef 8305 	mrs	r3, IPSR
 8002e3e:	607b      	str	r3, [r7, #4]
  return(result);
 8002e40:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf14      	ite	ne
 8002e46:	2301      	movne	r3, #1
 8002e48:	2300      	moveq	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002e5c:	f001 fde8 	bl	8004a30 <vTaskStartScheduler>
  
  return osOK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e68:	b089      	sub	sp, #36	; 0x24
 8002e6a:	af04      	add	r7, sp, #16
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <osThreadCreate+0x54>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01c      	beq.n	8002eba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685c      	ldr	r4, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681d      	ldr	r5, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691e      	ldr	r6, [r3, #16]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ffb6 	bl	8002e04 <makeFreeRtosPriority>
 8002e98:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ea2:	9202      	str	r2, [sp, #8]
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	9100      	str	r1, [sp, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4632      	mov	r2, r6
 8002eac:	4629      	mov	r1, r5
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f001 fbfb 	bl	80046aa <xTaskCreateStatic>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e01c      	b.n	8002ef4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685c      	ldr	r4, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ec6:	b29e      	uxth	r6, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff98 	bl	8002e04 <makeFreeRtosPriority>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	f107 030c 	add.w	r3, r7, #12
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	9200      	str	r2, [sp, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	4632      	mov	r2, r6
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f001 fc3a 	bl	800475e <xTaskCreate>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d001      	beq.n	8002ef4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e000      	b.n	8002ef6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002efe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <osDelay+0x16>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	e000      	b.n	8002f16 <osDelay+0x18>
 8002f14:	2301      	movs	r3, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f001 fd56 	bl	80049c8 <vTaskDelay>
  
  return osOK;
 8002f1c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f000 fdf8 	bl	8003b32 <xQueueCreateMutexStatic>
 8002f42:	4603      	mov	r3, r0
 8002f44:	e003      	b.n	8002f4e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002f46:	2001      	movs	r0, #1
 8002f48:	f000 fddb 	bl	8003b02 <xQueueCreateMutex>
 8002f4c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <osMutexWait+0x18>
    return osErrorParameter;
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	e03a      	b.n	8002fe6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f7a:	d103      	bne.n	8002f84 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e009      	b.n	8002f98 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <osMutexWait+0x40>
      ticks = 1;
 8002f94:	2301      	movs	r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002f98:	f7ff ff4c 	bl	8002e34 <inHandlerMode>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d017      	beq.n	8002fd2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2100      	movs	r1, #0
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f001 f9d8 	bl	8004360 <xQueueReceiveFromISR>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d001      	beq.n	8002fba <osMutexWait+0x62>
      return osErrorOS;
 8002fb6:	23ff      	movs	r3, #255	; 0xff
 8002fb8:	e015      	b.n	8002fe6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d011      	beq.n	8002fe4 <osMutexWait+0x8c>
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <osMutexWait+0x98>)
 8002fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	e008      	b.n	8002fe4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002fd2:	68f9      	ldr	r1, [r7, #12]
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f001 f8bb 	bl	8004150 <xQueueSemaphoreTake>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <osMutexWait+0x8c>
    return osErrorOS;
 8002fe0:	23ff      	movs	r3, #255	; 0xff
 8002fe2:	e000      	b.n	8002fe6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	e000ed04 	.word	0xe000ed04

08002ff4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003000:	2300      	movs	r3, #0
 8003002:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003004:	f7ff ff16 	bl	8002e34 <inHandlerMode>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800300e:	f107 0308 	add.w	r3, r7, #8
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 ff35 	bl	8003e84 <xQueueGiveFromISR>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d001      	beq.n	8003024 <osMutexRelease+0x30>
      return osErrorOS;
 8003020:	23ff      	movs	r3, #255	; 0xff
 8003022:	e017      	b.n	8003054 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d013      	beq.n	8003052 <osMutexRelease+0x5e>
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <osMutexRelease+0x68>)
 800302c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	e00a      	b.n	8003052 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800303c:	2300      	movs	r3, #0
 800303e:	2200      	movs	r2, #0
 8003040:	2100      	movs	r1, #0
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fd90 	bl	8003b68 <xQueueGenericSend>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d001      	beq.n	8003052 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800304e:	23ff      	movs	r3, #255	; 0xff
 8003050:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	e000ed04 	.word	0xe000ed04

08003060 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	3303      	adds	r3, #3
 800306e:	f023 0303 	bic.w	r3, r3, #3
 8003072:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8003074:	2014      	movs	r0, #20
 8003076:	f002 fd43 	bl	8005b00 <pvPortMalloc>
 800307a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d046      	beq.n	8003110 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f002 fd30 	bl	8005b00 <pvPortMalloc>
 80030a0:	4602      	mov	r2, r0
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d02b      	beq.n	8003106 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	f002 fd21 	bl	8005b00 <pvPortMalloc>
 80030be:	4602      	mov	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d011      	beq.n	80030f0 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80030cc:	2300      	movs	r3, #0
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	e008      	b.n	80030e4 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	3301      	adds	r3, #1
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d3f1      	bcc.n	80030d2 <osPoolCreate+0x72>
 80030ee:	e00f      	b.n	8003110 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f002 fdc5 	bl	8005c84 <vPortFree>
        vPortFree(thePool);
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f002 fdc2 	bl	8005c84 <vPortFree>
        thePool = NULL;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	e004      	b.n	8003110 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003106:	6978      	ldr	r0, [r7, #20]
 8003108:	f002 fdbc 	bl	8005c84 <vPortFree>
      thePool = NULL;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003110:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b08a      	sub	sp, #40	; 0x28
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800312a:	f7ff fe83 	bl	8002e34 <inHandlerMode>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003134:	f3ef 8211 	mrs	r2, BASEPRI
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	617a      	str	r2, [r7, #20]
 800314a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800314c:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
 8003150:	e001      	b.n	8003156 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8003152:	f002 fbbb 	bl	80058cc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	e029      	b.n	80031b0 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	4413      	add	r3, r2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6892      	ldr	r2, [r2, #8]
 8003168:	fbb3 f1f2 	udiv	r1, r3, r2
 800316c:	fb02 f201 	mul.w	r2, r2, r1
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4413      	add	r3, r2
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d113      	bne.n	80031aa <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	4413      	add	r3, r2
 800318a:	2201      	movs	r2, #1
 800318c:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4619      	mov	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	440b      	add	r3, r1
 80031a0:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	611a      	str	r2, [r3, #16]
      break;
 80031a8:	e007      	b.n	80031ba <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3301      	adds	r3, #1
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d3d0      	bcc.n	800315c <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80031ba:	f7ff fe3b 	bl	8002e34 <inHandlerMode>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	e001      	b.n	80031d4 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80031d0:	f002 fbaa 	bl	8005928 <vPortExitCritical>
  }
  
  return p;
 80031d4:	6a3b      	ldr	r3, [r7, #32]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3728      	adds	r7, #40	; 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <osPoolCAlloc>:
* @param  pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolCAlloc (osPoolId pool_id)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  void *p = osPoolAlloc(pool_id);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ff97 	bl	800311a <osPoolAlloc>
 80031ec:	60f8      	str	r0, [r7, #12]
  
  if (p != NULL)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d004      	beq.n	80031fe <osPoolCAlloc+0x20>
  {
    memset(p, 0, sizeof(pool_id->pool_sz));
 80031f4:	2204      	movs	r2, #4
 80031f6:	2100      	movs	r1, #0
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f002 fe86 	bl	8005f0a <memset>
  }
  
  return p;
 80031fe:	68fb      	ldr	r3, [r7, #12]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <osPoolFree+0x14>
    return osErrorParameter;
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	e030      	b.n	800327e <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <osPoolFree+0x1e>
    return osErrorParameter;
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	e02b      	b.n	800327e <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d201      	bcs.n	8003234 <osPoolFree+0x2c>
    return osErrorParameter;
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	e024      	b.n	800327e <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	fbb3 f1f2 	udiv	r1, r3, r2
 8003248:	fb02 f201 	mul.w	r2, r2, r1
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <osPoolFree+0x4e>
    return osErrorParameter;
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	e013      	b.n	800327e <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	429a      	cmp	r2, r3
 800326a:	d301      	bcc.n	8003270 <osPoolFree+0x68>
    return osErrorParameter;
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	e006      	b.n	800327e <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800328a:	b590      	push	{r4, r7, lr}
 800328c:	b085      	sub	sp, #20
 800328e:	af02      	add	r7, sp, #8
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d012      	beq.n	80032c2 <osMessageCreate+0x38>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00e      	beq.n	80032c2 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68dc      	ldr	r4, [r3, #12]
 80032b4:	2300      	movs	r3, #0
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	4623      	mov	r3, r4
 80032ba:	f000 fb37 	bl	800392c <xQueueGenericCreateStatic>
 80032be:	4603      	mov	r3, r0
 80032c0:	e008      	b.n	80032d4 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	4619      	mov	r1, r3
 80032ce:	f000 fba0 	bl	8003a12 <xQueueGenericCreate>
 80032d2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}

080032dc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <osMessagePut+0x1e>
    ticks = 1;
 80032f6:	2301      	movs	r3, #1
 80032f8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80032fa:	f7ff fd9b 	bl	8002e34 <inHandlerMode>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d018      	beq.n	8003336 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003304:	f107 0210 	add.w	r2, r7, #16
 8003308:	f107 0108 	add.w	r1, r7, #8
 800330c:	2300      	movs	r3, #0
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fd24 	bl	8003d5c <xQueueGenericSendFromISR>
 8003314:	4603      	mov	r3, r0
 8003316:	2b01      	cmp	r3, #1
 8003318:	d001      	beq.n	800331e <osMessagePut+0x42>
      return osErrorOS;
 800331a:	23ff      	movs	r3, #255	; 0xff
 800331c:	e018      	b.n	8003350 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d014      	beq.n	800334e <osMessagePut+0x72>
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <osMessagePut+0x7c>)
 8003326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	e00b      	b.n	800334e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003336:	f107 0108 	add.w	r1, r7, #8
 800333a:	2300      	movs	r3, #0
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fc12 	bl	8003b68 <xQueueGenericSend>
 8003344:	4603      	mov	r3, r0
 8003346:	2b01      	cmp	r3, #1
 8003348:	d001      	beq.n	800334e <osMessagePut+0x72>
      return osErrorOS;
 800334a:	23ff      	movs	r3, #255	; 0xff
 800334c:	e000      	b.n	8003350 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b08b      	sub	sp, #44	; 0x2c
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10a      	bne.n	800338c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	617b      	str	r3, [r7, #20]
    return event;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	461c      	mov	r4, r3
 800337e:	f107 0314 	add.w	r3, r7, #20
 8003382:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800338a:	e054      	b.n	8003436 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800338c:	2300      	movs	r3, #0
 800338e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800339a:	d103      	bne.n	80033a4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	e009      	b.n	80033b8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d006      	beq.n	80033b8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <osMessageGet+0x5c>
      ticks = 1;
 80033b4:	2301      	movs	r3, #1
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80033b8:	f7ff fd3c 	bl	8002e34 <inHandlerMode>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01c      	beq.n	80033fc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80033c2:	f107 0220 	add.w	r2, r7, #32
 80033c6:	f107 0314 	add.w	r3, r7, #20
 80033ca:	3304      	adds	r3, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	68b8      	ldr	r0, [r7, #8]
 80033d0:	f000 ffc6 	bl	8004360 <xQueueReceiveFromISR>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d102      	bne.n	80033e0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80033da:	2310      	movs	r3, #16
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e001      	b.n	80033e4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d01d      	beq.n	8003426 <osMessageGet+0xca>
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <osMessageGet+0xe4>)
 80033ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	e014      	b.n	8003426 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	3304      	adds	r3, #4
 8003402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003404:	4619      	mov	r1, r3
 8003406:	68b8      	ldr	r0, [r7, #8]
 8003408:	f000 fdc6 	bl	8003f98 <xQueueReceive>
 800340c:	4603      	mov	r3, r0
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003412:	2310      	movs	r3, #16
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e006      	b.n	8003426 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <osMessageGet+0xc6>
 800341e:	2300      	movs	r3, #0
 8003420:	e000      	b.n	8003424 <osMessageGet+0xc8>
 8003422:	2340      	movs	r3, #64	; 0x40
 8003424:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	461c      	mov	r4, r3
 800342a:	f107 0314 	add.w	r3, r7, #20
 800342e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003432:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	372c      	adds	r7, #44	; 0x2c
 800343a:	46bd      	mov	sp, r7
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	bf00      	nop
 8003440:	e000ed04 	.word	0xe000ed04

08003444 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689c      	ldr	r4, [r3, #8]
 8003462:	200c      	movs	r0, #12
 8003464:	f002 fb4c 	bl	8005b00 <pvPortMalloc>
 8003468:	4603      	mov	r3, r0
 800346a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <osMailCreate+0x36>
    return NULL;
 8003476:	2300      	movs	r3, #0
 8003478:	e038      	b.n	80034ec <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	681c      	ldr	r4, [r3, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	2104      	movs	r1, #4
 8003492:	f000 fabe 	bl	8003a12 <xQueueGenericCreate>
 8003496:	4603      	mov	r3, r0
 8003498:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d107      	bne.n	80034b6 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 fbe9 	bl	8005c84 <vPortFree>
    return NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e01a      	b.n	80034ec <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	681c      	ldr	r4, [r3, #0]
 80034bc:	f107 030c 	add.w	r3, r7, #12
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fdcd 	bl	8003060 <osPoolCreate>
 80034c6:	4603      	mov	r3, r0
 80034c8:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 fbd1 	bl	8005c84 <vPortFree>
    return NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e002      	b.n	80034ec <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}

080034f4 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <osMailAlloc+0x14>
    return NULL;
 8003504:	2300      	movs	r3, #0
 8003506:	e006      	b.n	8003516 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fe04 	bl	800311a <osPoolAlloc>
 8003512:	60f8      	str	r0, [r7, #12]
  
  return p;
 8003514:	68fb      	ldr	r3, [r7, #12]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <osMailCAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailCAlloc (osMailQId queue_id, uint32_t millisec)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
  uint32_t i;
  void *p = osMailAlloc(queue_id, millisec);
 8003528:	6839      	ldr	r1, [r7, #0]
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffe2 	bl	80034f4 <osMailAlloc>
 8003530:	60b8      	str	r0, [r7, #8]
  
  if (p) {
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d010      	beq.n	800355a <osMailCAlloc+0x3c>
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e007      	b.n	800354e <osMailCAlloc+0x30>
      ((uint8_t *)p)[i] = 0;
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < queue_id->queue_def->item_sz; i++) {
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3301      	adds	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	429a      	cmp	r2, r3
 8003558:	d3f1      	bcc.n	800353e <osMailCAlloc+0x20>
    }
  }
  
  return p;
 800355a:	68bb      	ldr	r3, [r7, #8]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <osMailPut+0x14>
    return osErrorParameter;
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	e02c      	b.n	80035d2 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800357c:	f7ff fc5a 	bl	8002e34 <inHandlerMode>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d018      	beq.n	80035b8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6858      	ldr	r0, [r3, #4]
 800358a:	f107 020c 	add.w	r2, r7, #12
 800358e:	4639      	mov	r1, r7
 8003590:	2300      	movs	r3, #0
 8003592:	f000 fbe3 	bl	8003d5c <xQueueGenericSendFromISR>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d001      	beq.n	80035a0 <osMailPut+0x3c>
      return osErrorOS;
 800359c:	23ff      	movs	r3, #255	; 0xff
 800359e:	e018      	b.n	80035d2 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d014      	beq.n	80035d0 <osMailPut+0x6c>
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <osMailPut+0x78>)
 80035a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	e00b      	b.n	80035d0 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6858      	ldr	r0, [r3, #4]
 80035bc:	4639      	mov	r1, r7
 80035be:	2300      	movs	r3, #0
 80035c0:	2200      	movs	r2, #0
 80035c2:	f000 fad1 	bl	8003b68 <xQueueGenericSend>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d001      	beq.n	80035d0 <osMailPut+0x6c>
      return osErrorOS;
 80035cc:	23ff      	movs	r3, #255	; 0xff
 80035ce:	e000      	b.n	80035d2 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b08b      	sub	sp, #44	; 0x2c
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <osMailGet+0x2c>
    event.status = osErrorParameter;
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	617b      	str	r3, [r7, #20]
    return event;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	461c      	mov	r4, r3
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800360a:	e056      	b.n	80036ba <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800360c:	2300      	movs	r3, #0
 800360e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800361a:	d103      	bne.n	8003624 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
 8003622:	e009      	b.n	8003638 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d006      	beq.n	8003638 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <osMailGet+0x58>
      ticks = 1;
 8003634:	2301      	movs	r3, #1
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003638:	f7ff fbfc 	bl	8002e34 <inHandlerMode>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01d      	beq.n	800367e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	6858      	ldr	r0, [r3, #4]
 8003646:	f107 0220 	add.w	r2, r7, #32
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	f000 fe85 	bl	8004360 <xQueueReceiveFromISR>
 8003656:	4603      	mov	r3, r0
 8003658:	2b01      	cmp	r3, #1
 800365a:	d102      	bne.n	8003662 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800365c:	2320      	movs	r3, #32
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	e001      	b.n	8003666 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01e      	beq.n	80036aa <osMailGet+0xca>
 800366c:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <osMailGet+0xe4>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	e015      	b.n	80036aa <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	6858      	ldr	r0, [r3, #4]
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	3304      	adds	r3, #4
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	4619      	mov	r1, r3
 800368c:	f000 fc84 	bl	8003f98 <xQueueReceive>
 8003690:	4603      	mov	r3, r0
 8003692:	2b01      	cmp	r3, #1
 8003694:	d102      	bne.n	800369c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8003696:	2320      	movs	r3, #32
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	e006      	b.n	80036aa <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <osMailGet+0xc6>
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <osMailGet+0xc8>
 80036a6:	2340      	movs	r3, #64	; 0x40
 80036a8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	461c      	mov	r4, r3
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	372c      	adds	r7, #44	; 0x2c
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000ed04 	.word	0xe000ed04

080036c8 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <osMailFree+0x14>
    return osErrorParameter;
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	e006      	b.n	80036ea <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fd90 	bl	8003208 <osPoolFree>
 80036e8:	4603      	mov	r3, r0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f103 0208 	add.w	r2, r3, #8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800370a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f103 0208 	add.w	r2, r3, #8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f103 0208 	add.w	r2, r3, #8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	601a      	str	r2, [r3, #0]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037aa:	d103      	bne.n	80037b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e00c      	b.n	80037ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3308      	adds	r3, #8
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	e002      	b.n	80037c2 <vListInsert+0x2e>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d2f6      	bcs.n	80037bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	601a      	str	r2, [r3, #0]
}
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6892      	ldr	r2, [r2, #8]
 800381c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6852      	ldr	r2, [r2, #4]
 8003826:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d103      	bne.n	800383a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	1e5a      	subs	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <xQueueGenericReset+0x28>
	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	e7fe      	b.n	8003882 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003884:	f002 f822 	bl	80058cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	68f9      	ldr	r1, [r7, #12]
 8003892:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	441a      	add	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b4:	3b01      	subs	r3, #1
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	441a      	add	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	22ff      	movs	r2, #255	; 0xff
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	22ff      	movs	r2, #255	; 0xff
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d114      	bne.n	8003904 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01a      	beq.n	8003918 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3310      	adds	r3, #16
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 fae0 	bl	8004eac <xTaskRemoveFromEventList>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d012      	beq.n	8003918 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <xQueueGenericReset+0xcc>)
 80038f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	e009      	b.n	8003918 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3310      	adds	r3, #16
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fef2 	bl	80036f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3324      	adds	r3, #36	; 0x24
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff feed 	bl	80036f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003918:	f002 f806 	bl	8005928 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800391c:	2301      	movs	r3, #1
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08e      	sub	sp, #56	; 0x38
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <xQueueGenericCreateStatic+0x28>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
 8003952:	e7fe      	b.n	8003952 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <xQueueGenericCreateStatic+0x42>
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e7fe      	b.n	800396c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <xQueueGenericCreateStatic+0x4e>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <xQueueGenericCreateStatic+0x52>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <xQueueGenericCreateStatic+0x54>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <xQueueGenericCreateStatic+0x6c>
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	623b      	str	r3, [r7, #32]
 8003996:	e7fe      	b.n	8003996 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <xQueueGenericCreateStatic+0x78>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <xQueueGenericCreateStatic+0x7c>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <xQueueGenericCreateStatic+0x7e>
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <xQueueGenericCreateStatic+0x96>
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	e7fe      	b.n	80039c0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039c2:	2348      	movs	r3, #72	; 0x48
 80039c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b48      	cmp	r3, #72	; 0x48
 80039ca:	d009      	beq.n	80039e0 <xQueueGenericCreateStatic+0xb4>
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	e7fe      	b.n	80039de <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00d      	beq.n	8003a08 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f844 	bl	8003a90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3730      	adds	r7, #48	; 0x30
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b08a      	sub	sp, #40	; 0x28
 8003a16:	af02      	add	r7, sp, #8
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <xQueueGenericCreate+0x28>
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e7fe      	b.n	8003a38 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	e004      	b.n	8003a50 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	3348      	adds	r3, #72	; 0x48
 8003a54:	4618      	mov	r0, r3
 8003a56:	f002 f853 	bl	8005b00 <pvPortMalloc>
 8003a5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d011      	beq.n	8003a86 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	3348      	adds	r3, #72	; 0x48
 8003a6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a74:	79fa      	ldrb	r2, [r7, #7]
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f805 	bl	8003a90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a86:	69bb      	ldr	r3, [r7, #24]
	}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d103      	bne.n	8003aac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	e002      	b.n	8003ab2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003abe:	2101      	movs	r1, #1
 8003ac0:	69b8      	ldr	r0, [r7, #24]
 8003ac2:	f7ff fecb 	bl	800385c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003aee:	2300      	movs	r3, #0
 8003af0:	2200      	movs	r2, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f837 	bl	8003b68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	4603      	mov	r3, r0
 8003b0a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	461a      	mov	r2, r3
 8003b18:	6939      	ldr	r1, [r7, #16]
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7ff ff79 	bl	8003a12 <xQueueGenericCreate>
 8003b20:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f7ff ffd3 	bl	8003ace <prvInitialiseMutex>

		return xNewQueue;
 8003b28:	68fb      	ldr	r3, [r7, #12]
	}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b088      	sub	sp, #32
 8003b36:	af02      	add	r7, sp, #8
 8003b38:	4603      	mov	r3, r0
 8003b3a:	6039      	str	r1, [r7, #0]
 8003b3c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	6939      	ldr	r1, [r7, #16]
 8003b50:	6978      	ldr	r0, [r7, #20]
 8003b52:	f7ff feeb 	bl	800392c <xQueueGenericCreateStatic>
 8003b56:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff ffb8 	bl	8003ace <prvInitialiseMutex>

		return xNewQueue;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
	}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08e      	sub	sp, #56	; 0x38
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b76:	2300      	movs	r3, #0
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <xQueueGenericSend+0x30>
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b96:	e7fe      	b.n	8003b96 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <xQueueGenericSend+0x3e>
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <xQueueGenericSend+0x42>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <xQueueGenericSend+0x44>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <xQueueGenericSend+0x5c>
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	e7fe      	b.n	8003bc2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d103      	bne.n	8003bd2 <xQueueGenericSend+0x6a>
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <xQueueGenericSend+0x6e>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <xQueueGenericSend+0x70>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <xQueueGenericSend+0x88>
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	623b      	str	r3, [r7, #32]
 8003bee:	e7fe      	b.n	8003bee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bf0:	f001 fb12 	bl	8005218 <xTaskGetSchedulerState>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d102      	bne.n	8003c00 <xQueueGenericSend+0x98>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <xQueueGenericSend+0x9c>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <xQueueGenericSend+0x9e>
 8003c04:	2300      	movs	r3, #0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <xQueueGenericSend+0xb6>
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	e7fe      	b.n	8003c1c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c1e:	f001 fe55 	bl	80058cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <xQueueGenericSend+0xcc>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d129      	bne.n	8003c88 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c3a:	f000 fc26 	bl	800448a <prvCopyDataToQueue>
 8003c3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d010      	beq.n	8003c6a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	3324      	adds	r3, #36	; 0x24
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 f92d 	bl	8004eac <xTaskRemoveFromEventList>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c58:	4b3f      	ldr	r3, [pc, #252]	; (8003d58 <xQueueGenericSend+0x1f0>)
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	e00a      	b.n	8003c80 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c70:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <xQueueGenericSend+0x1f0>)
 8003c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c80:	f001 fe52 	bl	8005928 <vPortExitCritical>
				return pdPASS;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e063      	b.n	8003d50 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c8e:	f001 fe4b 	bl	8005928 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e05c      	b.n	8003d50 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c9c:	f107 0314 	add.w	r3, r7, #20
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 f965 	bl	8004f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003caa:	f001 fe3d 	bl	8005928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cae:	f000 ff1d 	bl	8004aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cb2:	f001 fe0b 	bl	80058cc <vPortEnterCritical>
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cbc:	b25b      	sxtb	r3, r3
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc2:	d103      	bne.n	8003ccc <xQueueGenericSend+0x164>
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd2:	b25b      	sxtb	r3, r3
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd8:	d103      	bne.n	8003ce2 <xQueueGenericSend+0x17a>
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce2:	f001 fe21 	bl	8005928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ce6:	1d3a      	adds	r2, r7, #4
 8003ce8:	f107 0314 	add.w	r3, r7, #20
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f001 f954 	bl	8004f9c <xTaskCheckForTimeOut>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d124      	bne.n	8003d44 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cfc:	f000 fcbd 	bl	800467a <prvIsQueueFull>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d018      	beq.n	8003d38 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	3310      	adds	r3, #16
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 f8a8 	bl	8004e64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d16:	f000 fc48 	bl	80045aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d1a:	f000 fef5 	bl	8004b08 <xTaskResumeAll>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f47f af7c 	bne.w	8003c1e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <xQueueGenericSend+0x1f0>)
 8003d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	e772      	b.n	8003c1e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d3a:	f000 fc36 	bl	80045aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d3e:	f000 fee3 	bl	8004b08 <xTaskResumeAll>
 8003d42:	e76c      	b.n	8003c1e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d46:	f000 fc30 	bl	80045aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d4a:	f000 fedd 	bl	8004b08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3738      	adds	r7, #56	; 0x38
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08e      	sub	sp, #56	; 0x38
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d109      	bne.n	8003d88 <xQueueGenericSendFromISR+0x2c>
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
 8003d86:	e7fe      	b.n	8003d86 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <xQueueGenericSendFromISR+0x3a>
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <xQueueGenericSendFromISR+0x3e>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <xQueueGenericSendFromISR+0x40>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <xQueueGenericSendFromISR+0x58>
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	e7fe      	b.n	8003db2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d103      	bne.n	8003dc2 <xQueueGenericSendFromISR+0x66>
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <xQueueGenericSendFromISR+0x6a>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <xQueueGenericSendFromISR+0x6c>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <xQueueGenericSendFromISR+0x84>
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	e7fe      	b.n	8003dde <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003de0:	f001 fe50 	bl	8005a84 <vPortValidateInterruptPriority>
	__asm volatile
 8003de4:	f3ef 8211 	mrs	r2, BASEPRI
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	61ba      	str	r2, [r7, #24]
 8003dfa:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003dfc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d302      	bcc.n	8003e12 <xQueueGenericSendFromISR+0xb6>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d12c      	bne.n	8003e6c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e22:	f000 fb32 	bl	800448a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e26:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e2e:	d112      	bne.n	8003e56 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d016      	beq.n	8003e66 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	3324      	adds	r3, #36	; 0x24
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 f835 	bl	8004eac <xTaskRemoveFromEventList>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e007      	b.n	8003e66 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	b25a      	sxtb	r2, r3
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e66:	2301      	movs	r3, #1
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003e6a:	e001      	b.n	8003e70 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3738      	adds	r7, #56	; 0x38
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08e      	sub	sp, #56	; 0x38
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <xQueueGiveFromISR+0x28>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	623b      	str	r3, [r7, #32]
 8003eaa:	e7fe      	b.n	8003eaa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <xQueueGiveFromISR+0x44>
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	e7fe      	b.n	8003ec6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d103      	bne.n	8003ed8 <xQueueGiveFromISR+0x54>
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <xQueueGiveFromISR+0x58>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <xQueueGiveFromISR+0x5a>
 8003edc:	2300      	movs	r3, #0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <xQueueGiveFromISR+0x72>
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	e7fe      	b.n	8003ef4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ef6:	f001 fdc5 	bl	8005a84 <vPortValidateInterruptPriority>
	__asm volatile
 8003efa:	f3ef 8211 	mrs	r2, BASEPRI
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	617a      	str	r2, [r7, #20]
 8003f10:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003f12:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d22b      	bcs.n	8003f7e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f40:	d112      	bne.n	8003f68 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d016      	beq.n	8003f78 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	3324      	adds	r3, #36	; 0x24
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 ffac 	bl	8004eac <xTaskRemoveFromEventList>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00e      	beq.n	8003f78 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e007      	b.n	8003f78 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	b25a      	sxtb	r2, r3
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7c:	e001      	b.n	8003f82 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	637b      	str	r3, [r7, #52]	; 0x34
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3738      	adds	r7, #56	; 0x38
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08c      	sub	sp, #48	; 0x30
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <xQueueReceive+0x2e>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	623b      	str	r3, [r7, #32]
 8003fc4:	e7fe      	b.n	8003fc4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d103      	bne.n	8003fd4 <xQueueReceive+0x3c>
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <xQueueReceive+0x40>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <xQueueReceive+0x42>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <xQueueReceive+0x5a>
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	e7fe      	b.n	8003ff0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ff2:	f001 f911 	bl	8005218 <xTaskGetSchedulerState>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <xQueueReceive+0x6a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <xQueueReceive+0x6e>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <xQueueReceive+0x70>
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d109      	bne.n	8004020 <xQueueReceive+0x88>
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	e7fe      	b.n	800401e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004020:	f001 fc54 	bl	80058cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01f      	beq.n	8004070 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004034:	f000 fa93 	bl	800455e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	1e5a      	subs	r2, r3, #1
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00f      	beq.n	8004068 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	3310      	adds	r3, #16
 800404c:	4618      	mov	r0, r3
 800404e:	f000 ff2d 	bl	8004eac <xTaskRemoveFromEventList>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004058:	4b3c      	ldr	r3, [pc, #240]	; (800414c <xQueueReceive+0x1b4>)
 800405a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004068:	f001 fc5e 	bl	8005928 <vPortExitCritical>
				return pdPASS;
 800406c:	2301      	movs	r3, #1
 800406e:	e069      	b.n	8004144 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d103      	bne.n	800407e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004076:	f001 fc57 	bl	8005928 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800407a:	2300      	movs	r3, #0
 800407c:	e062      	b.n	8004144 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d106      	bne.n	8004092 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004084:	f107 0310 	add.w	r3, r7, #16
 8004088:	4618      	mov	r0, r3
 800408a:	f000 ff71 	bl	8004f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800408e:	2301      	movs	r3, #1
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004092:	f001 fc49 	bl	8005928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004096:	f000 fd29 	bl	8004aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800409a:	f001 fc17 	bl	80058cc <vPortEnterCritical>
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040a4:	b25b      	sxtb	r3, r3
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040aa:	d103      	bne.n	80040b4 <xQueueReceive+0x11c>
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ba:	b25b      	sxtb	r3, r3
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c0:	d103      	bne.n	80040ca <xQueueReceive+0x132>
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ca:	f001 fc2d 	bl	8005928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040ce:	1d3a      	adds	r2, r7, #4
 80040d0:	f107 0310 	add.w	r3, r7, #16
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 ff60 	bl	8004f9c <xTaskCheckForTimeOut>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d123      	bne.n	800412a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e4:	f000 fab3 	bl	800464e <prvIsQueueEmpty>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d017      	beq.n	800411e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	3324      	adds	r3, #36	; 0x24
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 feb4 	bl	8004e64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040fe:	f000 fa54 	bl	80045aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004102:	f000 fd01 	bl	8004b08 <xTaskResumeAll>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d189      	bne.n	8004020 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <xQueueReceive+0x1b4>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	e780      	b.n	8004020 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800411e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004120:	f000 fa43 	bl	80045aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004124:	f000 fcf0 	bl	8004b08 <xTaskResumeAll>
 8004128:	e77a      	b.n	8004020 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800412a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800412c:	f000 fa3d 	bl	80045aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004130:	f000 fcea 	bl	8004b08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004136:	f000 fa8a 	bl	800464e <prvIsQueueEmpty>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	f43f af6f 	beq.w	8004020 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004142:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004144:	4618      	mov	r0, r3
 8004146:	3730      	adds	r7, #48	; 0x30
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	e000ed04 	.word	0xe000ed04

08004150 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08e      	sub	sp, #56	; 0x38
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800415a:	2300      	movs	r3, #0
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004162:	2300      	movs	r3, #0
 8004164:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <xQueueSemaphoreTake+0x30>
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	623b      	str	r3, [r7, #32]
 800417e:	e7fe      	b.n	800417e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <xQueueSemaphoreTake+0x4c>
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	e7fe      	b.n	800419a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800419c:	f001 f83c 	bl	8005218 <xTaskGetSchedulerState>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <xQueueSemaphoreTake+0x5c>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <xQueueSemaphoreTake+0x60>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <xQueueSemaphoreTake+0x62>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <xQueueSemaphoreTake+0x7a>
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	e7fe      	b.n	80041c8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ca:	f001 fb7f 	bl	80058cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d024      	beq.n	8004224 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	1e5a      	subs	r2, r3, #1
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d104      	bne.n	80041f4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80041ea:	f001 f9cf 	bl	800558c <pvTaskIncrementMutexHeldCount>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00f      	beq.n	800421c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fe:	3310      	adds	r3, #16
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fe53 	bl	8004eac <xTaskRemoveFromEventList>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800420c:	4b53      	ldr	r3, [pc, #332]	; (800435c <xQueueSemaphoreTake+0x20c>)
 800420e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800421c:	f001 fb84 	bl	8005928 <vPortExitCritical>
				return pdPASS;
 8004220:	2301      	movs	r3, #1
 8004222:	e096      	b.n	8004352 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d110      	bne.n	800424c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <xQueueSemaphoreTake+0xf4>
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	e7fe      	b.n	8004242 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004244:	f001 fb70 	bl	8005928 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004248:	2300      	movs	r3, #0
 800424a:	e082      	b.n	8004352 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004252:	f107 030c 	add.w	r3, r7, #12
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fe8a 	bl	8004f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004260:	f001 fb62 	bl	8005928 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004264:	f000 fc42 	bl	8004aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004268:	f001 fb30 	bl	80058cc <vPortEnterCritical>
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004272:	b25b      	sxtb	r3, r3
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004278:	d103      	bne.n	8004282 <xQueueSemaphoreTake+0x132>
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004288:	b25b      	sxtb	r3, r3
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800428e:	d103      	bne.n	8004298 <xQueueSemaphoreTake+0x148>
 8004290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004298:	f001 fb46 	bl	8005928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800429c:	463a      	mov	r2, r7
 800429e:	f107 030c 	add.w	r3, r7, #12
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fe79 	bl	8004f9c <xTaskCheckForTimeOut>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d132      	bne.n	8004316 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042b2:	f000 f9cc 	bl	800464e <prvIsQueueEmpty>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d026      	beq.n	800430a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80042c4:	f001 fb02 	bl	80058cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 ffc1 	bl	8005254 <xTaskPriorityInherit>
 80042d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80042d4:	f001 fb28 	bl	8005928 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	3324      	adds	r3, #36	; 0x24
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fdbf 	bl	8004e64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042e8:	f000 f95f 	bl	80045aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042ec:	f000 fc0c 	bl	8004b08 <xTaskResumeAll>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f47f af69 	bne.w	80041ca <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80042f8:	4b18      	ldr	r3, [pc, #96]	; (800435c <xQueueSemaphoreTake+0x20c>)
 80042fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	e75f      	b.n	80041ca <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800430a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800430c:	f000 f94d 	bl	80045aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004310:	f000 fbfa 	bl	8004b08 <xTaskResumeAll>
 8004314:	e759      	b.n	80041ca <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004316:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004318:	f000 f947 	bl	80045aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800431c:	f000 fbf4 	bl	8004b08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004320:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004322:	f000 f994 	bl	800464e <prvIsQueueEmpty>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	f43f af4e 	beq.w	80041ca <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004334:	f001 faca 	bl	80058cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800433a:	f000 f88e 	bl	800445a <prvGetDisinheritPriorityAfterTimeout>
 800433e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004346:	4618      	mov	r0, r3
 8004348:	f001 f888 	bl	800545c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800434c:	f001 faec 	bl	8005928 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004350:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004352:	4618      	mov	r0, r3
 8004354:	3738      	adds	r7, #56	; 0x38
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	e000ed04 	.word	0xe000ed04

08004360 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08e      	sub	sp, #56	; 0x38
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <xQueueReceiveFromISR+0x2a>
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	623b      	str	r3, [r7, #32]
 8004388:	e7fe      	b.n	8004388 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d103      	bne.n	8004398 <xQueueReceiveFromISR+0x38>
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <xQueueReceiveFromISR+0x3c>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <xQueueReceiveFromISR+0x3e>
 800439c:	2300      	movs	r3, #0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <xQueueReceiveFromISR+0x56>
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	e7fe      	b.n	80043b4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043b6:	f001 fb65 	bl	8005a84 <vPortValidateInterruptPriority>
	__asm volatile
 80043ba:	f3ef 8211 	mrs	r2, BASEPRI
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	61ba      	str	r2, [r7, #24]
 80043d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80043d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d02f      	beq.n	8004442 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f0:	f000 f8b5 	bl	800455e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	1e5a      	subs	r2, r3, #1
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80043fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004404:	d112      	bne.n	800442c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d016      	beq.n	800443c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	3310      	adds	r3, #16
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fd4a 	bl	8004eac <xTaskRemoveFromEventList>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00e      	beq.n	800443c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e007      	b.n	800443c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800442c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004430:	3301      	adds	r3, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	b25a      	sxtb	r2, r3
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800443c:	2301      	movs	r3, #1
 800443e:	637b      	str	r3, [r7, #52]	; 0x34
 8004440:	e001      	b.n	8004446 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004442:	2300      	movs	r3, #0
 8004444:	637b      	str	r3, [r7, #52]	; 0x34
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	613b      	str	r3, [r7, #16]
	__asm volatile
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004452:	4618      	mov	r0, r3
 8004454:	3738      	adds	r7, #56	; 0x38
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800445a:	b480      	push	{r7}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d006      	beq.n	8004478 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f1c3 0307 	rsb	r3, r3, #7
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e001      	b.n	800447c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800447c:	68fb      	ldr	r3, [r7, #12]
	}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10d      	bne.n	80044c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d14d      	bne.n	800454c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 ff4d 	bl	8005354 <xTaskPriorityDisinherit>
 80044ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	609a      	str	r2, [r3, #8]
 80044c2:	e043      	b.n	800454c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d119      	bne.n	80044fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6858      	ldr	r0, [r3, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	461a      	mov	r2, r3
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	f001 fd0d 	bl	8005ef4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	441a      	add	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d32b      	bcc.n	800454c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	e026      	b.n	800454c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	68d8      	ldr	r0, [r3, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	461a      	mov	r2, r3
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	f001 fcf3 	bl	8005ef4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	425b      	negs	r3, r3
 8004518:	441a      	add	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d207      	bcs.n	800453a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	425b      	negs	r3, r3
 8004534:	441a      	add	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d105      	bne.n	800454c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	3b01      	subs	r3, #1
 800454a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004554:	697b      	ldr	r3, [r7, #20]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d018      	beq.n	80045a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	441a      	add	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	429a      	cmp	r2, r3
 8004588:	d303      	bcc.n	8004592 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68d9      	ldr	r1, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	461a      	mov	r2, r3
 800459c:	6838      	ldr	r0, [r7, #0]
 800459e:	f001 fca9 	bl	8005ef4 <memcpy>
	}
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045b2:	f001 f98b 	bl	80058cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045be:	e011      	b.n	80045e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d012      	beq.n	80045ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3324      	adds	r3, #36	; 0x24
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fc6d 	bl	8004eac <xTaskRemoveFromEventList>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045d8:	f000 fd40 	bl	800505c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	3b01      	subs	r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dce9      	bgt.n	80045c0 <prvUnlockQueue+0x16>
 80045ec:	e000      	b.n	80045f0 <prvUnlockQueue+0x46>
					break;
 80045ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	22ff      	movs	r2, #255	; 0xff
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80045f8:	f001 f996 	bl	8005928 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045fc:	f001 f966 	bl	80058cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004606:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004608:	e011      	b.n	800462e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d012      	beq.n	8004638 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3310      	adds	r3, #16
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fc48 	bl	8004eac <xTaskRemoveFromEventList>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004622:	f000 fd1b 	bl	800505c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004626:	7bbb      	ldrb	r3, [r7, #14]
 8004628:	3b01      	subs	r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800462e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004632:	2b00      	cmp	r3, #0
 8004634:	dce9      	bgt.n	800460a <prvUnlockQueue+0x60>
 8004636:	e000      	b.n	800463a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004638:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	22ff      	movs	r2, #255	; 0xff
 800463e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004642:	f001 f971 	bl	8005928 <vPortExitCritical>
}
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004656:	f001 f939 	bl	80058cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004662:	2301      	movs	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	e001      	b.n	800466c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800466c:	f001 f95c 	bl	8005928 <vPortExitCritical>

	return xReturn;
 8004670:	68fb      	ldr	r3, [r7, #12]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004682:	f001 f923 	bl	80058cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	429a      	cmp	r2, r3
 8004690:	d102      	bne.n	8004698 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004692:	2301      	movs	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e001      	b.n	800469c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800469c:	f001 f944 	bl	8005928 <vPortExitCritical>

	return xReturn;
 80046a0:	68fb      	ldr	r3, [r7, #12]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b08e      	sub	sp, #56	; 0x38
 80046ae:	af04      	add	r7, sp, #16
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <xTaskCreateStatic+0x28>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	623b      	str	r3, [r7, #32]
 80046d0:	e7fe      	b.n	80046d0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80046d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <xTaskCreateStatic+0x42>
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e7fe      	b.n	80046ea <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046ec:	2354      	movs	r3, #84	; 0x54
 80046ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b54      	cmp	r3, #84	; 0x54
 80046f4:	d009      	beq.n	800470a <xTaskCreateStatic+0x60>
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	e7fe      	b.n	8004708 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800470a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01e      	beq.n	8004750 <xTaskCreateStatic+0xa6>
 8004712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01b      	beq.n	8004750 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004720:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	2202      	movs	r2, #2
 8004726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800472a:	2300      	movs	r3, #0
 800472c:	9303      	str	r3, [sp, #12]
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	9302      	str	r3, [sp, #8]
 8004732:	f107 0314 	add.w	r3, r7, #20
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f850 	bl	80047e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800474a:	f000 f8d3 	bl	80048f4 <prvAddNewTaskToReadyList>
 800474e:	e001      	b.n	8004754 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004754:	697b      	ldr	r3, [r7, #20]
	}
 8004756:	4618      	mov	r0, r3
 8004758:	3728      	adds	r7, #40	; 0x28
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800475e:	b580      	push	{r7, lr}
 8004760:	b08c      	sub	sp, #48	; 0x30
 8004762:	af04      	add	r7, sp, #16
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4613      	mov	r3, r2
 800476c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4618      	mov	r0, r3
 8004774:	f001 f9c4 	bl	8005b00 <pvPortMalloc>
 8004778:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00e      	beq.n	800479e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004780:	2054      	movs	r0, #84	; 0x54
 8004782:	f001 f9bd 	bl	8005b00 <pvPortMalloc>
 8004786:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
 8004794:	e005      	b.n	80047a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004796:	6978      	ldr	r0, [r7, #20]
 8004798:	f001 fa74 	bl	8005c84 <vPortFree>
 800479c:	e001      	b.n	80047a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d017      	beq.n	80047d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047b0:	88fa      	ldrh	r2, [r7, #6]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9303      	str	r3, [sp, #12]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	9302      	str	r3, [sp, #8]
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f80e 	bl	80047e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047cc:	69f8      	ldr	r0, [r7, #28]
 80047ce:	f000 f891 	bl	80048f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	e002      	b.n	80047de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047de:	69bb      	ldr	r3, [r7, #24]
	}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004800:	3b01      	subs	r3, #1
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f023 0307 	bic.w	r3, r3, #7
 800480e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <prvInitialiseNewTask+0x46>
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e7fe      	b.n	800482c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01f      	beq.n	8004874 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004834:	2300      	movs	r3, #0
 8004836:	61fb      	str	r3, [r7, #28]
 8004838:	e012      	b.n	8004860 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	4413      	add	r3, r2
 8004840:	7819      	ldrb	r1, [r3, #0]
 8004842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	3334      	adds	r3, #52	; 0x34
 800484a:	460a      	mov	r2, r1
 800484c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d006      	beq.n	8004868 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3301      	adds	r3, #1
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b0f      	cmp	r3, #15
 8004864:	d9e9      	bls.n	800483a <prvInitialiseNewTask+0x52>
 8004866:	e000      	b.n	800486a <prvInitialiseNewTask+0x82>
			{
				break;
 8004868:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004872:	e003      	b.n	800487c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	2b06      	cmp	r3, #6
 8004880:	d901      	bls.n	8004886 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004882:	2306      	movs	r3, #6
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800488a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004890:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	2200      	movs	r2, #0
 8004896:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	3304      	adds	r3, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f7fe ff48 	bl	8003732 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	3318      	adds	r3, #24
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe ff43 	bl	8003732 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	f1c3 0207 	rsb	r2, r3, #7
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	2200      	movs	r2, #0
 80048c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	68f9      	ldr	r1, [r7, #12]
 80048d4:	69b8      	ldr	r0, [r7, #24]
 80048d6:	f000 fed3 	bl	8005680 <pxPortInitialiseStack>
 80048da:	4602      	mov	r2, r0
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ec:	bf00      	nop
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048fc:	f000 ffe6 	bl	80058cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004900:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <prvAddNewTaskToReadyList+0xb8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3301      	adds	r3, #1
 8004906:	4a29      	ldr	r2, [pc, #164]	; (80049ac <prvAddNewTaskToReadyList+0xb8>)
 8004908:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800490a:	4b29      	ldr	r3, [pc, #164]	; (80049b0 <prvAddNewTaskToReadyList+0xbc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004912:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <prvAddNewTaskToReadyList+0xbc>)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004918:	4b24      	ldr	r3, [pc, #144]	; (80049ac <prvAddNewTaskToReadyList+0xb8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d110      	bne.n	8004942 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004920:	f000 fbc0 	bl	80050a4 <prvInitialiseTaskLists>
 8004924:	e00d      	b.n	8004942 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004926:	4b23      	ldr	r3, [pc, #140]	; (80049b4 <prvAddNewTaskToReadyList+0xc0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800492e:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <prvAddNewTaskToReadyList+0xbc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	429a      	cmp	r2, r3
 800493a:	d802      	bhi.n	8004942 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800493c:	4a1c      	ldr	r2, [pc, #112]	; (80049b0 <prvAddNewTaskToReadyList+0xbc>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004942:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <prvAddNewTaskToReadyList+0xc4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3301      	adds	r3, #1
 8004948:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <prvAddNewTaskToReadyList+0xc4>)
 800494a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	2201      	movs	r2, #1
 8004952:	409a      	lsls	r2, r3
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <prvAddNewTaskToReadyList+0xc8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4313      	orrs	r3, r2
 800495a:	4a18      	ldr	r2, [pc, #96]	; (80049bc <prvAddNewTaskToReadyList+0xc8>)
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4a15      	ldr	r2, [pc, #84]	; (80049c0 <prvAddNewTaskToReadyList+0xcc>)
 800496c:	441a      	add	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3304      	adds	r3, #4
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f7fe fee9 	bl	800374c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800497a:	f000 ffd5 	bl	8005928 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800497e:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <prvAddNewTaskToReadyList+0xc0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00e      	beq.n	80049a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <prvAddNewTaskToReadyList+0xbc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	429a      	cmp	r2, r3
 8004992:	d207      	bcs.n	80049a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <prvAddNewTaskToReadyList+0xd0>)
 8004996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049a4:	bf00      	nop
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000380 	.word	0x20000380
 80049b0:	20000280 	.word	0x20000280
 80049b4:	2000038c 	.word	0x2000038c
 80049b8:	2000039c 	.word	0x2000039c
 80049bc:	20000388 	.word	0x20000388
 80049c0:	20000284 	.word	0x20000284
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049da:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <vTaskDelay+0x60>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <vTaskDelay+0x2e>
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	e7fe      	b.n	80049f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80049f6:	f000 f879 	bl	8004aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049fa:	2100      	movs	r1, #0
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fdd9 	bl	80055b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a02:	f000 f881 	bl	8004b08 <xTaskResumeAll>
 8004a06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d107      	bne.n	8004a1e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <vTaskDelay+0x64>)
 8004a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a1e:	bf00      	nop
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	200003a8 	.word	0x200003a8
 8004a2c:	e000ed04 	.word	0xe000ed04

08004a30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	; 0x28
 8004a34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a3e:	463a      	mov	r2, r7
 8004a40:	1d39      	adds	r1, r7, #4
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fb fd62 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	9202      	str	r2, [sp, #8]
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	2300      	movs	r3, #0
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	460a      	mov	r2, r1
 8004a5e:	491d      	ldr	r1, [pc, #116]	; (8004ad4 <vTaskStartScheduler+0xa4>)
 8004a60:	481d      	ldr	r0, [pc, #116]	; (8004ad8 <vTaskStartScheduler+0xa8>)
 8004a62:	f7ff fe22 	bl	80046aa <xTaskCreateStatic>
 8004a66:	4602      	mov	r2, r0
 8004a68:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <vTaskStartScheduler+0xac>)
 8004a6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a6c:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <vTaskStartScheduler+0xac>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a74:	2301      	movs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e001      	b.n	8004a7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d115      	bne.n	8004ab0 <vTaskStartScheduler+0x80>
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a96:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <vTaskStartScheduler+0xb0>)
 8004a98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a9e:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <vTaskStartScheduler+0xb4>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004aa4:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <vTaskStartScheduler+0xb8>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004aaa:	f000 fe71 	bl	8005790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004aae:	e00d      	b.n	8004acc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab6:	d109      	bne.n	8004acc <vTaskStartScheduler+0x9c>
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e7fe      	b.n	8004aca <vTaskStartScheduler+0x9a>
}
 8004acc:	bf00      	nop
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	08005fe0 	.word	0x08005fe0
 8004ad8:	08005075 	.word	0x08005075
 8004adc:	200003a4 	.word	0x200003a4
 8004ae0:	200003a0 	.word	0x200003a0
 8004ae4:	2000038c 	.word	0x2000038c
 8004ae8:	20000384 	.word	0x20000384

08004aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <vTaskSuspendAll+0x18>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3301      	adds	r3, #1
 8004af6:	4a03      	ldr	r2, [pc, #12]	; (8004b04 <vTaskSuspendAll+0x18>)
 8004af8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	200003a8 	.word	0x200003a8

08004b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b16:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <xTaskResumeAll+0x114>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <xTaskResumeAll+0x2a>
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	e7fe      	b.n	8004b30 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b32:	f000 fecb 	bl	80058cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b36:	4b39      	ldr	r3, [pc, #228]	; (8004c1c <xTaskResumeAll+0x114>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	4a37      	ldr	r2, [pc, #220]	; (8004c1c <xTaskResumeAll+0x114>)
 8004b3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b40:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <xTaskResumeAll+0x114>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d161      	bne.n	8004c0c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b48:	4b35      	ldr	r3, [pc, #212]	; (8004c20 <xTaskResumeAll+0x118>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d05d      	beq.n	8004c0c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b50:	e02e      	b.n	8004bb0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b52:	4b34      	ldr	r3, [pc, #208]	; (8004c24 <xTaskResumeAll+0x11c>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3318      	adds	r3, #24
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fe51 	bl	8003806 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fe fe4c 	bl	8003806 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	2201      	movs	r2, #1
 8004b74:	409a      	lsls	r2, r3
 8004b76:	4b2c      	ldr	r3, [pc, #176]	; (8004c28 <xTaskResumeAll+0x120>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	4a2a      	ldr	r2, [pc, #168]	; (8004c28 <xTaskResumeAll+0x120>)
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4a27      	ldr	r2, [pc, #156]	; (8004c2c <xTaskResumeAll+0x124>)
 8004b8e:	441a      	add	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f7fe fdd8 	bl	800374c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba0:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <xTaskResumeAll+0x128>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004baa:	4b22      	ldr	r3, [pc, #136]	; (8004c34 <xTaskResumeAll+0x12c>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bb0:	4b1c      	ldr	r3, [pc, #112]	; (8004c24 <xTaskResumeAll+0x11c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1cc      	bne.n	8004b52 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bbe:	f000 fb0b 	bl	80051d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004bc2:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <xTaskResumeAll+0x130>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d010      	beq.n	8004bf0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bce:	f000 f837 	bl	8004c40 <xTaskIncrementTick>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004bd8:	4b16      	ldr	r3, [pc, #88]	; (8004c34 <xTaskResumeAll+0x12c>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f1      	bne.n	8004bce <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <xTaskResumeAll+0x130>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bf0:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <xTaskResumeAll+0x12c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d009      	beq.n	8004c0c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <xTaskResumeAll+0x134>)
 8004bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c0c:	f000 fe8c 	bl	8005928 <vPortExitCritical>

	return xAlreadyYielded;
 8004c10:	68bb      	ldr	r3, [r7, #8]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	200003a8 	.word	0x200003a8
 8004c20:	20000380 	.word	0x20000380
 8004c24:	20000340 	.word	0x20000340
 8004c28:	20000388 	.word	0x20000388
 8004c2c:	20000284 	.word	0x20000284
 8004c30:	20000280 	.word	0x20000280
 8004c34:	20000394 	.word	0x20000394
 8004c38:	20000390 	.word	0x20000390
 8004c3c:	e000ed04 	.word	0xe000ed04

08004c40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c4a:	4b4e      	ldr	r3, [pc, #312]	; (8004d84 <xTaskIncrementTick+0x144>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f040 8087 	bne.w	8004d62 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c54:	4b4c      	ldr	r3, [pc, #304]	; (8004d88 <xTaskIncrementTick+0x148>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c5c:	4a4a      	ldr	r2, [pc, #296]	; (8004d88 <xTaskIncrementTick+0x148>)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11f      	bne.n	8004ca8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c68:	4b48      	ldr	r3, [pc, #288]	; (8004d8c <xTaskIncrementTick+0x14c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <xTaskIncrementTick+0x46>
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	e7fe      	b.n	8004c84 <xTaskIncrementTick+0x44>
 8004c86:	4b41      	ldr	r3, [pc, #260]	; (8004d8c <xTaskIncrementTick+0x14c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	4b40      	ldr	r3, [pc, #256]	; (8004d90 <xTaskIncrementTick+0x150>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a3e      	ldr	r2, [pc, #248]	; (8004d8c <xTaskIncrementTick+0x14c>)
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	4a3e      	ldr	r2, [pc, #248]	; (8004d90 <xTaskIncrementTick+0x150>)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <xTaskIncrementTick+0x154>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	4a3c      	ldr	r2, [pc, #240]	; (8004d94 <xTaskIncrementTick+0x154>)
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	f000 fa98 	bl	80051d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ca8:	4b3b      	ldr	r3, [pc, #236]	; (8004d98 <xTaskIncrementTick+0x158>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d348      	bcc.n	8004d44 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cb2:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <xTaskIncrementTick+0x14c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d104      	bne.n	8004cc6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cbc:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <xTaskIncrementTick+0x158>)
 8004cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cc2:	601a      	str	r2, [r3, #0]
					break;
 8004cc4:	e03e      	b.n	8004d44 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc6:	4b31      	ldr	r3, [pc, #196]	; (8004d8c <xTaskIncrementTick+0x14c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d203      	bcs.n	8004ce6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cde:	4a2e      	ldr	r2, [pc, #184]	; (8004d98 <xTaskIncrementTick+0x158>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ce4:	e02e      	b.n	8004d44 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe fd8b 	bl	8003806 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d004      	beq.n	8004d02 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	3318      	adds	r3, #24
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe fd82 	bl	8003806 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	2201      	movs	r2, #1
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <xTaskIncrementTick+0x15c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	4a22      	ldr	r2, [pc, #136]	; (8004d9c <xTaskIncrementTick+0x15c>)
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4a1f      	ldr	r2, [pc, #124]	; (8004da0 <xTaskIncrementTick+0x160>)
 8004d22:	441a      	add	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f7fe fd0e 	bl	800374c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <xTaskIncrementTick+0x164>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d3b9      	bcc.n	8004cb2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d42:	e7b6      	b.n	8004cb2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d44:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <xTaskIncrementTick+0x164>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4a:	4915      	ldr	r1, [pc, #84]	; (8004da0 <xTaskIncrementTick+0x160>)
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d907      	bls.n	8004d6c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e004      	b.n	8004d6c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004d62:	4b11      	ldr	r3, [pc, #68]	; (8004da8 <xTaskIncrementTick+0x168>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3301      	adds	r3, #1
 8004d68:	4a0f      	ldr	r2, [pc, #60]	; (8004da8 <xTaskIncrementTick+0x168>)
 8004d6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <xTaskIncrementTick+0x16c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004d78:	697b      	ldr	r3, [r7, #20]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	200003a8 	.word	0x200003a8
 8004d88:	20000384 	.word	0x20000384
 8004d8c:	20000338 	.word	0x20000338
 8004d90:	2000033c 	.word	0x2000033c
 8004d94:	20000398 	.word	0x20000398
 8004d98:	200003a0 	.word	0x200003a0
 8004d9c:	20000388 	.word	0x20000388
 8004da0:	20000284 	.word	0x20000284
 8004da4:	20000280 	.word	0x20000280
 8004da8:	20000390 	.word	0x20000390
 8004dac:	20000394 	.word	0x20000394

08004db0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004db6:	4b26      	ldr	r3, [pc, #152]	; (8004e50 <vTaskSwitchContext+0xa0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dbe:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <vTaskSwitchContext+0xa4>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004dc4:	e03e      	b.n	8004e44 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004dc6:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <vTaskSwitchContext+0xa4>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dcc:	4b22      	ldr	r3, [pc, #136]	; (8004e58 <vTaskSwitchContext+0xa8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	fab3 f383 	clz	r3, r3
 8004dd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004dda:	7afb      	ldrb	r3, [r7, #11]
 8004ddc:	f1c3 031f 	rsb	r3, r3, #31
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	491e      	ldr	r1, [pc, #120]	; (8004e5c <vTaskSwitchContext+0xac>)
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	e7fe      	b.n	8004e08 <vTaskSwitchContext+0x58>
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4a11      	ldr	r2, [pc, #68]	; (8004e5c <vTaskSwitchContext+0xac>)
 8004e16:	4413      	add	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	605a      	str	r2, [r3, #4]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d104      	bne.n	8004e3a <vTaskSwitchContext+0x8a>
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4a07      	ldr	r2, [pc, #28]	; (8004e60 <vTaskSwitchContext+0xb0>)
 8004e42:	6013      	str	r3, [r2, #0]
}
 8004e44:	bf00      	nop
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	200003a8 	.word	0x200003a8
 8004e54:	20000394 	.word	0x20000394
 8004e58:	20000388 	.word	0x20000388
 8004e5c:	20000284 	.word	0x20000284
 8004e60:	20000280 	.word	0x20000280

08004e64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d109      	bne.n	8004e88 <vTaskPlaceOnEventList+0x24>
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	e7fe      	b.n	8004e86 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e88:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <vTaskPlaceOnEventList+0x44>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3318      	adds	r3, #24
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7fe fc7f 	bl	8003794 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e96:	2101      	movs	r1, #1
 8004e98:	6838      	ldr	r0, [r7, #0]
 8004e9a:	f000 fb8b 	bl	80055b4 <prvAddCurrentTaskToDelayedList>
}
 8004e9e:	bf00      	nop
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000280 	.word	0x20000280

08004eac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <xTaskRemoveFromEventList+0x2a>
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e7fe      	b.n	8004ed4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	3318      	adds	r3, #24
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe fc93 	bl	8003806 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <xTaskRemoveFromEventList+0xac>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d11c      	bne.n	8004f22 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	3304      	adds	r3, #4
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe fc8a 	bl	8003806 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <xTaskRemoveFromEventList+0xb0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <xTaskRemoveFromEventList+0xb0>)
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <xTaskRemoveFromEventList+0xb4>)
 8004f12:	441a      	add	r2, r3
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f7fe fc16 	bl	800374c <vListInsertEnd>
 8004f20:	e005      	b.n	8004f2e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	3318      	adds	r3, #24
 8004f26:	4619      	mov	r1, r3
 8004f28:	480e      	ldr	r0, [pc, #56]	; (8004f64 <xTaskRemoveFromEventList+0xb8>)
 8004f2a:	f7fe fc0f 	bl	800374c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f32:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <xTaskRemoveFromEventList+0xbc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d905      	bls.n	8004f48 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <xTaskRemoveFromEventList+0xc0>)
 8004f42:	2201      	movs	r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	e001      	b.n	8004f4c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f4c:	697b      	ldr	r3, [r7, #20]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	200003a8 	.word	0x200003a8
 8004f5c:	20000388 	.word	0x20000388
 8004f60:	20000284 	.word	0x20000284
 8004f64:	20000340 	.word	0x20000340
 8004f68:	20000280 	.word	0x20000280
 8004f6c:	20000394 	.word	0x20000394

08004f70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <vTaskInternalSetTimeOutState+0x24>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <vTaskInternalSetTimeOutState+0x28>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	605a      	str	r2, [r3, #4]
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	20000398 	.word	0x20000398
 8004f98:	20000384 	.word	0x20000384

08004f9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <xTaskCheckForTimeOut+0x24>
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	e7fe      	b.n	8004fbe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <xTaskCheckForTimeOut+0x3e>
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e7fe      	b.n	8004fd8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004fda:	f000 fc77 	bl	80058cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fde:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <xTaskCheckForTimeOut+0xb8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff6:	d102      	bne.n	8004ffe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	e023      	b.n	8005046 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b15      	ldr	r3, [pc, #84]	; (8005058 <xTaskCheckForTimeOut+0xbc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d007      	beq.n	800501a <xTaskCheckForTimeOut+0x7e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	429a      	cmp	r2, r3
 8005012:	d302      	bcc.n	800501a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005014:	2301      	movs	r3, #1
 8005016:	61fb      	str	r3, [r7, #28]
 8005018:	e015      	b.n	8005046 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	429a      	cmp	r2, r3
 8005022:	d20b      	bcs.n	800503c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	1ad2      	subs	r2, r2, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff ff9d 	bl	8004f70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	e004      	b.n	8005046 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005042:	2301      	movs	r3, #1
 8005044:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005046:	f000 fc6f 	bl	8005928 <vPortExitCritical>

	return xReturn;
 800504a:	69fb      	ldr	r3, [r7, #28]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000384 	.word	0x20000384
 8005058:	20000398 	.word	0x20000398

0800505c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005060:	4b03      	ldr	r3, [pc, #12]	; (8005070 <vTaskMissedYield+0x14>)
 8005062:	2201      	movs	r2, #1
 8005064:	601a      	str	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	20000394 	.word	0x20000394

08005074 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800507c:	f000 f852 	bl	8005124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <prvIdleTask+0x28>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d9f9      	bls.n	800507c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005088:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <prvIdleTask+0x2c>)
 800508a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005098:	e7f0      	b.n	800507c <prvIdleTask+0x8>
 800509a:	bf00      	nop
 800509c:	20000284 	.word	0x20000284
 80050a0:	e000ed04 	.word	0xe000ed04

080050a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050aa:	2300      	movs	r3, #0
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	e00c      	b.n	80050ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4a12      	ldr	r2, [pc, #72]	; (8005104 <prvInitialiseTaskLists+0x60>)
 80050bc:	4413      	add	r3, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fb17 	bl	80036f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3301      	adds	r3, #1
 80050c8:	607b      	str	r3, [r7, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b06      	cmp	r3, #6
 80050ce:	d9ef      	bls.n	80050b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050d0:	480d      	ldr	r0, [pc, #52]	; (8005108 <prvInitialiseTaskLists+0x64>)
 80050d2:	f7fe fb0e 	bl	80036f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050d6:	480d      	ldr	r0, [pc, #52]	; (800510c <prvInitialiseTaskLists+0x68>)
 80050d8:	f7fe fb0b 	bl	80036f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050dc:	480c      	ldr	r0, [pc, #48]	; (8005110 <prvInitialiseTaskLists+0x6c>)
 80050de:	f7fe fb08 	bl	80036f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050e2:	480c      	ldr	r0, [pc, #48]	; (8005114 <prvInitialiseTaskLists+0x70>)
 80050e4:	f7fe fb05 	bl	80036f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050e8:	480b      	ldr	r0, [pc, #44]	; (8005118 <prvInitialiseTaskLists+0x74>)
 80050ea:	f7fe fb02 	bl	80036f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <prvInitialiseTaskLists+0x78>)
 80050f0:	4a05      	ldr	r2, [pc, #20]	; (8005108 <prvInitialiseTaskLists+0x64>)
 80050f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050f4:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <prvInitialiseTaskLists+0x7c>)
 80050f6:	4a05      	ldr	r2, [pc, #20]	; (800510c <prvInitialiseTaskLists+0x68>)
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000284 	.word	0x20000284
 8005108:	20000310 	.word	0x20000310
 800510c:	20000324 	.word	0x20000324
 8005110:	20000340 	.word	0x20000340
 8005114:	20000354 	.word	0x20000354
 8005118:	2000036c 	.word	0x2000036c
 800511c:	20000338 	.word	0x20000338
 8005120:	2000033c 	.word	0x2000033c

08005124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800512a:	e019      	b.n	8005160 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800512c:	f000 fbce 	bl	80058cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005130:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <prvCheckTasksWaitingTermination+0x4c>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4618      	mov	r0, r3
 800513e:	f7fe fb62 	bl	8003806 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005142:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <prvCheckTasksWaitingTermination+0x50>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3b01      	subs	r3, #1
 8005148:	4a0a      	ldr	r2, [pc, #40]	; (8005174 <prvCheckTasksWaitingTermination+0x50>)
 800514a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <prvCheckTasksWaitingTermination+0x54>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3b01      	subs	r3, #1
 8005152:	4a09      	ldr	r2, [pc, #36]	; (8005178 <prvCheckTasksWaitingTermination+0x54>)
 8005154:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005156:	f000 fbe7 	bl	8005928 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f80e 	bl	800517c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005160:	4b05      	ldr	r3, [pc, #20]	; (8005178 <prvCheckTasksWaitingTermination+0x54>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e1      	bne.n	800512c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000354 	.word	0x20000354
 8005174:	20000380 	.word	0x20000380
 8005178:	20000368 	.word	0x20000368

0800517c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800518a:	2b00      	cmp	r3, #0
 800518c:	d108      	bne.n	80051a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fd76 	bl	8005c84 <vPortFree>
				vPortFree( pxTCB );
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fd73 	bl	8005c84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800519e:	e017      	b.n	80051d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d103      	bne.n	80051b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fd6a 	bl	8005c84 <vPortFree>
	}
 80051b0:	e00e      	b.n	80051d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d009      	beq.n	80051d0 <prvDeleteTCB+0x54>
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	e7fe      	b.n	80051ce <prvDeleteTCB+0x52>
	}
 80051d0:	bf00      	nop
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051de:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <prvResetNextTaskUnblockTime+0x38>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <prvResetNextTaskUnblockTime+0x3c>)
 80051ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051f0:	e008      	b.n	8005204 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <prvResetNextTaskUnblockTime+0x38>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a04      	ldr	r2, [pc, #16]	; (8005214 <prvResetNextTaskUnblockTime+0x3c>)
 8005202:	6013      	str	r3, [r2, #0]
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000338 	.word	0x20000338
 8005214:	200003a0 	.word	0x200003a0

08005218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <xTaskGetSchedulerState+0x34>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d102      	bne.n	800522c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005226:	2301      	movs	r3, #1
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	e008      	b.n	800523e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <xTaskGetSchedulerState+0x38>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005234:	2302      	movs	r3, #2
 8005236:	607b      	str	r3, [r7, #4]
 8005238:	e001      	b.n	800523e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800523e:	687b      	ldr	r3, [r7, #4]
	}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	2000038c 	.word	0x2000038c
 8005250:	200003a8 	.word	0x200003a8

08005254 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d069      	beq.n	800533e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526e:	4b36      	ldr	r3, [pc, #216]	; (8005348 <xTaskPriorityInherit+0xf4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	429a      	cmp	r2, r3
 8005276:	d259      	bcs.n	800532c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	2b00      	cmp	r3, #0
 800527e:	db06      	blt.n	800528e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005280:	4b31      	ldr	r3, [pc, #196]	; (8005348 <xTaskPriorityInherit+0xf4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	f1c3 0207 	rsb	r2, r3, #7
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	6959      	ldr	r1, [r3, #20]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005296:	4613      	mov	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4a2b      	ldr	r2, [pc, #172]	; (800534c <xTaskPriorityInherit+0xf8>)
 80052a0:	4413      	add	r3, r2
 80052a2:	4299      	cmp	r1, r3
 80052a4:	d13a      	bne.n	800531c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe faab 	bl	8003806 <uxListRemove>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d115      	bne.n	80052e2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ba:	4924      	ldr	r1, [pc, #144]	; (800534c <xTaskPriorityInherit+0xf8>)
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <xTaskPriorityInherit+0x8e>
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	2201      	movs	r2, #1
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43da      	mvns	r2, r3
 80052d8:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <xTaskPriorityInherit+0xfc>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4013      	ands	r3, r2
 80052de:	4a1c      	ldr	r2, [pc, #112]	; (8005350 <xTaskPriorityInherit+0xfc>)
 80052e0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052e2:	4b19      	ldr	r3, [pc, #100]	; (8005348 <xTaskPriorityInherit+0xf4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	2201      	movs	r2, #1
 80052f2:	409a      	lsls	r2, r3
 80052f4:	4b16      	ldr	r3, [pc, #88]	; (8005350 <xTaskPriorityInherit+0xfc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	4a15      	ldr	r2, [pc, #84]	; (8005350 <xTaskPriorityInherit+0xfc>)
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4a10      	ldr	r2, [pc, #64]	; (800534c <xTaskPriorityInherit+0xf8>)
 800530c:	441a      	add	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	3304      	adds	r3, #4
 8005312:	4619      	mov	r1, r3
 8005314:	4610      	mov	r0, r2
 8005316:	f7fe fa19 	bl	800374c <vListInsertEnd>
 800531a:	e004      	b.n	8005326 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <xTaskPriorityInherit+0xf4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005326:	2301      	movs	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e008      	b.n	800533e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <xTaskPriorityInherit+0xf4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	429a      	cmp	r2, r3
 8005338:	d201      	bcs.n	800533e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800533a:	2301      	movs	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800533e:	68fb      	ldr	r3, [r7, #12]
	}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000280 	.word	0x20000280
 800534c:	20000284 	.word	0x20000284
 8005350:	20000388 	.word	0x20000388

08005354 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d06c      	beq.n	8005444 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800536a:	4b39      	ldr	r3, [pc, #228]	; (8005450 <xTaskPriorityDisinherit+0xfc>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	429a      	cmp	r2, r3
 8005372:	d009      	beq.n	8005388 <xTaskPriorityDisinherit+0x34>
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	e7fe      	b.n	8005386 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <xTaskPriorityDisinherit+0x50>
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	e7fe      	b.n	80053a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a8:	1e5a      	subs	r2, r3, #1
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d044      	beq.n	8005444 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d140      	bne.n	8005444 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	3304      	adds	r3, #4
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe fa1d 	bl	8003806 <uxListRemove>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d115      	bne.n	80053fe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d6:	491f      	ldr	r1, [pc, #124]	; (8005454 <xTaskPriorityDisinherit+0x100>)
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xTaskPriorityDisinherit+0xaa>
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	2201      	movs	r2, #1
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43da      	mvns	r2, r3
 80053f4:	4b18      	ldr	r3, [pc, #96]	; (8005458 <xTaskPriorityDisinherit+0x104>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4013      	ands	r3, r2
 80053fa:	4a17      	ldr	r2, [pc, #92]	; (8005458 <xTaskPriorityDisinherit+0x104>)
 80053fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	f1c3 0207 	rsb	r2, r3, #7
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	2201      	movs	r2, #1
 8005418:	409a      	lsls	r2, r3
 800541a:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <xTaskPriorityDisinherit+0x104>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4313      	orrs	r3, r2
 8005420:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <xTaskPriorityDisinherit+0x104>)
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4a08      	ldr	r2, [pc, #32]	; (8005454 <xTaskPriorityDisinherit+0x100>)
 8005432:	441a      	add	r2, r3
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	3304      	adds	r3, #4
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f7fe f986 	bl	800374c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005444:	697b      	ldr	r3, [r7, #20]
	}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000280 	.word	0x20000280
 8005454:	20000284 	.word	0x20000284
 8005458:	20000388 	.word	0x20000388

0800545c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800546a:	2301      	movs	r3, #1
 800546c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8081 	beq.w	8005578 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e7fe      	b.n	8005490 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d902      	bls.n	80054a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	61fb      	str	r3, [r7, #28]
 80054a0:	e002      	b.n	80054a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d062      	beq.n	8005578 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d15d      	bne.n	8005578 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80054bc:	4b30      	ldr	r3, [pc, #192]	; (8005580 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d109      	bne.n	80054da <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60bb      	str	r3, [r7, #8]
 80054d8:	e7fe      	b.n	80054d8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	db04      	blt.n	80054f8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	f1c3 0207 	rsb	r2, r3, #7
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	6959      	ldr	r1, [r3, #20]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005508:	4413      	add	r3, r2
 800550a:	4299      	cmp	r1, r3
 800550c:	d134      	bne.n	8005578 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	3304      	adds	r3, #4
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe f977 	bl	8003806 <uxListRemove>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d115      	bne.n	800554a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005522:	4918      	ldr	r1, [pc, #96]	; (8005584 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	2201      	movs	r2, #1
 800553a:	fa02 f303 	lsl.w	r3, r2, r3
 800553e:	43da      	mvns	r2, r3
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4013      	ands	r3, r2
 8005546:	4a10      	ldr	r2, [pc, #64]	; (8005588 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005548:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	2201      	movs	r2, #1
 8005550:	409a      	lsls	r2, r3
 8005552:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4313      	orrs	r3, r2
 8005558:	4a0b      	ldr	r2, [pc, #44]	; (8005588 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4a06      	ldr	r2, [pc, #24]	; (8005584 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800556a:	441a      	add	r2, r3
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	3304      	adds	r3, #4
 8005570:	4619      	mov	r1, r3
 8005572:	4610      	mov	r0, r2
 8005574:	f7fe f8ea 	bl	800374c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005578:	bf00      	nop
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000280 	.word	0x20000280
 8005584:	20000284 	.word	0x20000284
 8005588:	20000388 	.word	0x20000388

0800558c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800559e:	3201      	adds	r2, #1
 80055a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80055a2:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80055a4:	681b      	ldr	r3, [r3, #0]
	}
 80055a6:	4618      	mov	r0, r3
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	20000280 	.word	0x20000280

080055b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055be:	4b29      	ldr	r3, [pc, #164]	; (8005664 <prvAddCurrentTaskToDelayedList+0xb0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055c4:	4b28      	ldr	r3, [pc, #160]	; (8005668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe f91b 	bl	8003806 <uxListRemove>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10b      	bne.n	80055ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055d6:	4b24      	ldr	r3, [pc, #144]	; (8005668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	2201      	movs	r2, #1
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43da      	mvns	r2, r3
 80055e4:	4b21      	ldr	r3, [pc, #132]	; (800566c <prvAddCurrentTaskToDelayedList+0xb8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4013      	ands	r3, r2
 80055ea:	4a20      	ldr	r2, [pc, #128]	; (800566c <prvAddCurrentTaskToDelayedList+0xb8>)
 80055ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055f4:	d10a      	bne.n	800560c <prvAddCurrentTaskToDelayedList+0x58>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055fc:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3304      	adds	r3, #4
 8005602:	4619      	mov	r1, r3
 8005604:	481a      	ldr	r0, [pc, #104]	; (8005670 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005606:	f7fe f8a1 	bl	800374c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800560a:	e026      	b.n	800565a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4413      	add	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005614:	4b14      	ldr	r3, [pc, #80]	; (8005668 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	429a      	cmp	r2, r3
 8005622:	d209      	bcs.n	8005638 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005624:	4b13      	ldr	r3, [pc, #76]	; (8005674 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <prvAddCurrentTaskToDelayedList+0xb4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3304      	adds	r3, #4
 800562e:	4619      	mov	r1, r3
 8005630:	4610      	mov	r0, r2
 8005632:	f7fe f8af 	bl	8003794 <vListInsert>
}
 8005636:	e010      	b.n	800565a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <prvAddCurrentTaskToDelayedList+0xc4>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <prvAddCurrentTaskToDelayedList+0xb4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3304      	adds	r3, #4
 8005642:	4619      	mov	r1, r3
 8005644:	4610      	mov	r0, r2
 8005646:	f7fe f8a5 	bl	8003794 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800564a:	4b0c      	ldr	r3, [pc, #48]	; (800567c <prvAddCurrentTaskToDelayedList+0xc8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	429a      	cmp	r2, r3
 8005652:	d202      	bcs.n	800565a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005654:	4a09      	ldr	r2, [pc, #36]	; (800567c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	6013      	str	r3, [r2, #0]
}
 800565a:	bf00      	nop
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000384 	.word	0x20000384
 8005668:	20000280 	.word	0x20000280
 800566c:	20000388 	.word	0x20000388
 8005670:	2000036c 	.word	0x2000036c
 8005674:	2000033c 	.word	0x2000033c
 8005678:	20000338 	.word	0x20000338
 800567c:	200003a0 	.word	0x200003a0

08005680 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3b04      	subs	r3, #4
 8005690:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3b04      	subs	r3, #4
 800569e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f023 0201 	bic.w	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3b04      	subs	r3, #4
 80056ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056b0:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <pxPortInitialiseStack+0x64>)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3b14      	subs	r3, #20
 80056ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3b04      	subs	r3, #4
 80056c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f06f 0202 	mvn.w	r2, #2
 80056ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3b20      	subs	r3, #32
 80056d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056d6:	68fb      	ldr	r3, [r7, #12]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	080056e9 	.word	0x080056e9

080056e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <prvTaskExitError+0x50>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056fa:	d009      	beq.n	8005710 <prvTaskExitError+0x28>
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e7fe      	b.n	800570e <prvTaskExitError+0x26>
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005722:	bf00      	nop
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0fc      	beq.n	8005724 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	2000000c 	.word	0x2000000c
 800573c:	00000000 	.word	0x00000000

08005740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005740:	4b07      	ldr	r3, [pc, #28]	; (8005760 <pxCurrentTCBConst2>)
 8005742:	6819      	ldr	r1, [r3, #0]
 8005744:	6808      	ldr	r0, [r1, #0]
 8005746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574a:	f380 8809 	msr	PSP, r0
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8811 	msr	BASEPRI, r0
 800575a:	4770      	bx	lr
 800575c:	f3af 8000 	nop.w

08005760 <pxCurrentTCBConst2>:
 8005760:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop

08005768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005768:	4808      	ldr	r0, [pc, #32]	; (800578c <prvPortStartFirstTask+0x24>)
 800576a:	6800      	ldr	r0, [r0, #0]
 800576c:	6800      	ldr	r0, [r0, #0]
 800576e:	f380 8808 	msr	MSP, r0
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f380 8814 	msr	CONTROL, r0
 800577a:	b662      	cpsie	i
 800577c:	b661      	cpsie	f
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	df00      	svc	0
 8005788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800578a:	bf00      	nop
 800578c:	e000ed08 	.word	0xe000ed08

08005790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005796:	4b44      	ldr	r3, [pc, #272]	; (80058a8 <xPortStartScheduler+0x118>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a44      	ldr	r2, [pc, #272]	; (80058ac <xPortStartScheduler+0x11c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d109      	bne.n	80057b4 <xPortStartScheduler+0x24>
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	e7fe      	b.n	80057b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057b4:	4b3c      	ldr	r3, [pc, #240]	; (80058a8 <xPortStartScheduler+0x118>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a3d      	ldr	r2, [pc, #244]	; (80058b0 <xPortStartScheduler+0x120>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d109      	bne.n	80057d2 <xPortStartScheduler+0x42>
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	e7fe      	b.n	80057d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057d2:	4b38      	ldr	r3, [pc, #224]	; (80058b4 <xPortStartScheduler+0x124>)
 80057d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	22ff      	movs	r2, #255	; 0xff
 80057e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	4b30      	ldr	r3, [pc, #192]	; (80058b8 <xPortStartScheduler+0x128>)
 80057f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057fa:	4b30      	ldr	r3, [pc, #192]	; (80058bc <xPortStartScheduler+0x12c>)
 80057fc:	2207      	movs	r2, #7
 80057fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005800:	e009      	b.n	8005816 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005802:	4b2e      	ldr	r3, [pc, #184]	; (80058bc <xPortStartScheduler+0x12c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3b01      	subs	r3, #1
 8005808:	4a2c      	ldr	r2, [pc, #176]	; (80058bc <xPortStartScheduler+0x12c>)
 800580a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	b2db      	uxtb	r3, r3
 8005814:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581e:	2b80      	cmp	r3, #128	; 0x80
 8005820:	d0ef      	beq.n	8005802 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005822:	4b26      	ldr	r3, [pc, #152]	; (80058bc <xPortStartScheduler+0x12c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f1c3 0307 	rsb	r3, r3, #7
 800582a:	2b04      	cmp	r3, #4
 800582c:	d009      	beq.n	8005842 <xPortStartScheduler+0xb2>
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	e7fe      	b.n	8005840 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005842:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <xPortStartScheduler+0x12c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	4a1c      	ldr	r2, [pc, #112]	; (80058bc <xPortStartScheduler+0x12c>)
 800584a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800584c:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <xPortStartScheduler+0x12c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005854:	4a19      	ldr	r2, [pc, #100]	; (80058bc <xPortStartScheduler+0x12c>)
 8005856:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	b2da      	uxtb	r2, r3
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005860:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <xPortStartScheduler+0x130>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a16      	ldr	r2, [pc, #88]	; (80058c0 <xPortStartScheduler+0x130>)
 8005866:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800586a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800586c:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <xPortStartScheduler+0x130>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a13      	ldr	r2, [pc, #76]	; (80058c0 <xPortStartScheduler+0x130>)
 8005872:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005876:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005878:	f000 f8d6 	bl	8005a28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800587c:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <xPortStartScheduler+0x134>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005882:	f000 f8f5 	bl	8005a70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <xPortStartScheduler+0x138>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a0f      	ldr	r2, [pc, #60]	; (80058c8 <xPortStartScheduler+0x138>)
 800588c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005890:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005892:	f7ff ff69 	bl	8005768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005896:	f7ff fa8b 	bl	8004db0 <vTaskSwitchContext>
	prvTaskExitError();
 800589a:	f7ff ff25 	bl	80056e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	e000ed00 	.word	0xe000ed00
 80058ac:	410fc271 	.word	0x410fc271
 80058b0:	410fc270 	.word	0x410fc270
 80058b4:	e000e400 	.word	0xe000e400
 80058b8:	200003ac 	.word	0x200003ac
 80058bc:	200003b0 	.word	0x200003b0
 80058c0:	e000ed20 	.word	0xe000ed20
 80058c4:	2000000c 	.word	0x2000000c
 80058c8:	e000ef34 	.word	0xe000ef34

080058cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058e4:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <vPortEnterCritical+0x54>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	4a0d      	ldr	r2, [pc, #52]	; (8005920 <vPortEnterCritical+0x54>)
 80058ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058ee:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <vPortEnterCritical+0x54>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d10e      	bne.n	8005914 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <vPortEnterCritical+0x58>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d009      	beq.n	8005914 <vPortEnterCritical+0x48>
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	e7fe      	b.n	8005912 <vPortEnterCritical+0x46>
	}
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	2000000c 	.word	0x2000000c
 8005924:	e000ed04 	.word	0xe000ed04

08005928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800592e:	4b11      	ldr	r3, [pc, #68]	; (8005974 <vPortExitCritical+0x4c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d109      	bne.n	800594a <vPortExitCritical+0x22>
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	607b      	str	r3, [r7, #4]
 8005948:	e7fe      	b.n	8005948 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800594a:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <vPortExitCritical+0x4c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3b01      	subs	r3, #1
 8005950:	4a08      	ldr	r2, [pc, #32]	; (8005974 <vPortExitCritical+0x4c>)
 8005952:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005954:	4b07      	ldr	r3, [pc, #28]	; (8005974 <vPortExitCritical+0x4c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <vPortExitCritical+0x3e>
 800595c:	2300      	movs	r3, #0
 800595e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	2000000c 	.word	0x2000000c
	...

08005980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005980:	f3ef 8009 	mrs	r0, PSP
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	4b15      	ldr	r3, [pc, #84]	; (80059e0 <pxCurrentTCBConst>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	f01e 0f10 	tst.w	lr, #16
 8005990:	bf08      	it	eq
 8005992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	6010      	str	r0, [r2, #0]
 800599c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059a4:	f380 8811 	msr	BASEPRI, r0
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f7ff f9fe 	bl	8004db0 <vTaskSwitchContext>
 80059b4:	f04f 0000 	mov.w	r0, #0
 80059b8:	f380 8811 	msr	BASEPRI, r0
 80059bc:	bc09      	pop	{r0, r3}
 80059be:	6819      	ldr	r1, [r3, #0]
 80059c0:	6808      	ldr	r0, [r1, #0]
 80059c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c6:	f01e 0f10 	tst.w	lr, #16
 80059ca:	bf08      	it	eq
 80059cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059d0:	f380 8809 	msr	PSP, r0
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	f3af 8000 	nop.w

080059e0 <pxCurrentTCBConst>:
 80059e0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop

080059e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a00:	f7ff f91e 	bl	8004c40 <xTaskIncrementTick>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <SysTick_Handler+0x3c>)
 8005a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	2300      	movs	r3, #0
 8005a14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <vPortSetupTimerInterrupt+0x34>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <vPortSetupTimerInterrupt+0x38>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <vPortSetupTimerInterrupt+0x3c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <vPortSetupTimerInterrupt+0x40>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	099b      	lsrs	r3, r3, #6
 8005a44:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <vPortSetupTimerInterrupt+0x44>)
 8005a46:	3b01      	subs	r3, #1
 8005a48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a4a:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <vPortSetupTimerInterrupt+0x34>)
 8005a4c:	2207      	movs	r2, #7
 8005a4e:	601a      	str	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	e000e010 	.word	0xe000e010
 8005a60:	e000e018 	.word	0xe000e018
 8005a64:	20000000 	.word	0x20000000
 8005a68:	10624dd3 	.word	0x10624dd3
 8005a6c:	e000e014 	.word	0xe000e014

08005a70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a80 <vPortEnableVFP+0x10>
 8005a74:	6801      	ldr	r1, [r0, #0]
 8005a76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a7a:	6001      	str	r1, [r0, #0]
 8005a7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a7e:	bf00      	nop
 8005a80:	e000ed88 	.word	0xe000ed88

08005a84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a8a:	f3ef 8305 	mrs	r3, IPSR
 8005a8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b0f      	cmp	r3, #15
 8005a94:	d913      	bls.n	8005abe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a96:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <vPortValidateInterruptPriority+0x6c>)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005aa0:	4b14      	ldr	r3, [pc, #80]	; (8005af4 <vPortValidateInterruptPriority+0x70>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	7afa      	ldrb	r2, [r7, #11]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d209      	bcs.n	8005abe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	607b      	str	r3, [r7, #4]
 8005abc:	e7fe      	b.n	8005abc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005abe:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <vPortValidateInterruptPriority+0x74>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <vPortValidateInterruptPriority+0x78>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d909      	bls.n	8005ae2 <vPortValidateInterruptPriority+0x5e>
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	e7fe      	b.n	8005ae0 <vPortValidateInterruptPriority+0x5c>
	}
 8005ae2:	bf00      	nop
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000e3f0 	.word	0xe000e3f0
 8005af4:	200003ac 	.word	0x200003ac
 8005af8:	e000ed0c 	.word	0xe000ed0c
 8005afc:	200003b0 	.word	0x200003b0

08005b00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	; 0x28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b0c:	f7fe ffee 	bl	8004aec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b10:	4b57      	ldr	r3, [pc, #348]	; (8005c70 <pvPortMalloc+0x170>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b18:	f000 f90c 	bl	8005d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b1c:	4b55      	ldr	r3, [pc, #340]	; (8005c74 <pvPortMalloc+0x174>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f040 808c 	bne.w	8005c42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01c      	beq.n	8005b6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005b30:	2208      	movs	r2, #8
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4413      	add	r3, r2
 8005b36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d013      	beq.n	8005b6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f023 0307 	bic.w	r3, r3, #7
 8005b48:	3308      	adds	r3, #8
 8005b4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <pvPortMalloc+0x6a>
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e7fe      	b.n	8005b68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d068      	beq.n	8005c42 <pvPortMalloc+0x142>
 8005b70:	4b41      	ldr	r3, [pc, #260]	; (8005c78 <pvPortMalloc+0x178>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d863      	bhi.n	8005c42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b7a:	4b40      	ldr	r3, [pc, #256]	; (8005c7c <pvPortMalloc+0x17c>)
 8005b7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b7e:	4b3f      	ldr	r3, [pc, #252]	; (8005c7c <pvPortMalloc+0x17c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b84:	e004      	b.n	8005b90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d903      	bls.n	8005ba2 <pvPortMalloc+0xa2>
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f1      	bne.n	8005b86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ba2:	4b33      	ldr	r3, [pc, #204]	; (8005c70 <pvPortMalloc+0x170>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d04a      	beq.n	8005c42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	4413      	add	r3, r2
 8005bb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	1ad2      	subs	r2, r2, r3
 8005bc6:	2308      	movs	r3, #8
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d91e      	bls.n	8005c0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d009      	beq.n	8005bf4 <pvPortMalloc+0xf4>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	e7fe      	b.n	8005bf2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	1ad2      	subs	r2, r2, r3
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c06:	69b8      	ldr	r0, [r7, #24]
 8005c08:	f000 f8f6 	bl	8005df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <pvPortMalloc+0x178>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <pvPortMalloc+0x178>)
 8005c18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c1a:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <pvPortMalloc+0x178>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	4b18      	ldr	r3, [pc, #96]	; (8005c80 <pvPortMalloc+0x180>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d203      	bcs.n	8005c2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <pvPortMalloc+0x178>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <pvPortMalloc+0x180>)
 8005c2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	4b10      	ldr	r3, [pc, #64]	; (8005c74 <pvPortMalloc+0x174>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c42:	f7fe ff61 	bl	8004b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <pvPortMalloc+0x164>
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	e7fe      	b.n	8005c62 <pvPortMalloc+0x162>
	return pvReturn;
 8005c64:	69fb      	ldr	r3, [r7, #28]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3728      	adds	r7, #40	; 0x28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20003fbc 	.word	0x20003fbc
 8005c74:	20003fc8 	.word	0x20003fc8
 8005c78:	20003fc0 	.word	0x20003fc0
 8005c7c:	20003fb4 	.word	0x20003fb4
 8005c80:	20003fc4 	.word	0x20003fc4

08005c84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d046      	beq.n	8005d24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c96:	2308      	movs	r3, #8
 8005c98:	425b      	negs	r3, r3
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	4b20      	ldr	r3, [pc, #128]	; (8005d2c <vPortFree+0xa8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4013      	ands	r3, r2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <vPortFree+0x42>
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e7fe      	b.n	8005cc4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <vPortFree+0x5e>
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60bb      	str	r3, [r7, #8]
 8005ce0:	e7fe      	b.n	8005ce0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	4b11      	ldr	r3, [pc, #68]	; (8005d2c <vPortFree+0xa8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d019      	beq.n	8005d24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d115      	bne.n	8005d24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <vPortFree+0xa8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	43db      	mvns	r3, r3
 8005d02:	401a      	ands	r2, r3
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d08:	f7fe fef0 	bl	8004aec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <vPortFree+0xac>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4413      	add	r3, r2
 8005d16:	4a06      	ldr	r2, [pc, #24]	; (8005d30 <vPortFree+0xac>)
 8005d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d1a:	6938      	ldr	r0, [r7, #16]
 8005d1c:	f000 f86c 	bl	8005df8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d20:	f7fe fef2 	bl	8004b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d24:	bf00      	nop
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20003fc8 	.word	0x20003fc8
 8005d30:	20003fc0 	.word	0x20003fc0

08005d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d40:	4b27      	ldr	r3, [pc, #156]	; (8005de0 <prvHeapInit+0xac>)
 8005d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3307      	adds	r3, #7
 8005d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0307 	bic.w	r3, r3, #7
 8005d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <prvHeapInit+0xac>)
 8005d64:	4413      	add	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d6c:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <prvHeapInit+0xb0>)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d72:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <prvHeapInit+0xb0>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d80:	2208      	movs	r2, #8
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0307 	bic.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <prvHeapInit+0xb4>)
 8005d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d96:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <prvHeapInit+0xb4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d9e:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <prvHeapInit+0xb4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005db4:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <prvHeapInit+0xb4>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <prvHeapInit+0xb8>)
 8005dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <prvHeapInit+0xbc>)
 8005dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005dcc:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <prvHeapInit+0xc0>)
 8005dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005dd2:	601a      	str	r2, [r3, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	200003b4 	.word	0x200003b4
 8005de4:	20003fb4 	.word	0x20003fb4
 8005de8:	20003fbc 	.word	0x20003fbc
 8005dec:	20003fc4 	.word	0x20003fc4
 8005df0:	20003fc0 	.word	0x20003fc0
 8005df4:	20003fc8 	.word	0x20003fc8

08005df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e00:	4b28      	ldr	r3, [pc, #160]	; (8005ea4 <prvInsertBlockIntoFreeList+0xac>)
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	e002      	b.n	8005e0c <prvInsertBlockIntoFreeList+0x14>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d8f7      	bhi.n	8005e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	4413      	add	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d108      	bne.n	8005e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	441a      	add	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	441a      	add	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d118      	bne.n	8005e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d00d      	beq.n	8005e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	441a      	add	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	e008      	b.n	8005e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e76:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	e003      	b.n	8005e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d002      	beq.n	8005e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e96:	bf00      	nop
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20003fb4 	.word	0x20003fb4
 8005ea8:	20003fbc 	.word	0x20003fbc

08005eac <__libc_init_array>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	4e0d      	ldr	r6, [pc, #52]	; (8005ee4 <__libc_init_array+0x38>)
 8005eb0:	4c0d      	ldr	r4, [pc, #52]	; (8005ee8 <__libc_init_array+0x3c>)
 8005eb2:	1ba4      	subs	r4, r4, r6
 8005eb4:	10a4      	asrs	r4, r4, #2
 8005eb6:	2500      	movs	r5, #0
 8005eb8:	42a5      	cmp	r5, r4
 8005eba:	d109      	bne.n	8005ed0 <__libc_init_array+0x24>
 8005ebc:	4e0b      	ldr	r6, [pc, #44]	; (8005eec <__libc_init_array+0x40>)
 8005ebe:	4c0c      	ldr	r4, [pc, #48]	; (8005ef0 <__libc_init_array+0x44>)
 8005ec0:	f000 f82c 	bl	8005f1c <_init>
 8005ec4:	1ba4      	subs	r4, r4, r6
 8005ec6:	10a4      	asrs	r4, r4, #2
 8005ec8:	2500      	movs	r5, #0
 8005eca:	42a5      	cmp	r5, r4
 8005ecc:	d105      	bne.n	8005eda <__libc_init_array+0x2e>
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
 8005ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ed4:	4798      	blx	r3
 8005ed6:	3501      	adds	r5, #1
 8005ed8:	e7ee      	b.n	8005eb8 <__libc_init_array+0xc>
 8005eda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ede:	4798      	blx	r3
 8005ee0:	3501      	adds	r5, #1
 8005ee2:	e7f2      	b.n	8005eca <__libc_init_array+0x1e>
 8005ee4:	08006030 	.word	0x08006030
 8005ee8:	08006030 	.word	0x08006030
 8005eec:	08006030 	.word	0x08006030
 8005ef0:	08006034 	.word	0x08006034

08005ef4 <memcpy>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	1e43      	subs	r3, r0, #1
 8005ef8:	440a      	add	r2, r1
 8005efa:	4291      	cmp	r1, r2
 8005efc:	d100      	bne.n	8005f00 <memcpy+0xc>
 8005efe:	bd10      	pop	{r4, pc}
 8005f00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f08:	e7f7      	b.n	8005efa <memcpy+0x6>

08005f0a <memset>:
 8005f0a:	4402      	add	r2, r0
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d100      	bne.n	8005f14 <memset+0xa>
 8005f12:	4770      	bx	lr
 8005f14:	f803 1b01 	strb.w	r1, [r3], #1
 8005f18:	e7f9      	b.n	8005f0e <memset+0x4>
	...

08005f1c <_init>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	bf00      	nop
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr

08005f28 <_fini>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	bf00      	nop
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr
